using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace StandardApp.Models
{
    /// <summary>
    /// DbContext Class is Data-Access-Layer by EF Core
    /// DbContext Performs following
    /// 1. Establish Db Connection
    /// 2. Manages Mapping between EntityClass of Name T with Table of name T
    /// using DbSet<T>, Entity Class UserManster maps with UserMaster Table using
    /// DbSet<UserMaster>
    /// 3. Manages Db Transactions using SaveChanges() and SaveChangesAsync()
    /// 4. Manages Db Concurrency (in EF Core)
    /// 5. CRUD Operations on UserMaster, consider 'ctx' as instance of DbContext 
    /// a. TO Read all Records from UserMaster, 
    ///     var users = ctx.UserMaster.ToListAsync();
    /// b. To Read User Based on P.K.
    ///     var user = ctx.UserMaster.FindAsync(p.k.);
    /// c. To Add new User in UserMaster
    ///     Create an instance of UserMaster and Set its property values
    ///     Append the instance to the DbSet<>
    ///     ctx.UserMaster.AddAsync(instance); // ctx.UserMaster.AddRangeAsync([])
    ///     Commit Transaction
    ///     ctx.SaveChangesAsync();
    /// d. To Update Record
    ///     Search record Based on P.K.
    ///     Update Its values
    ///     Commit Transaction
    /// e. To Delete User
    ///     Search Record based on P.K.
    ///     ctx.UserMaster.Remove(searched record)
    ///     Commit Trnsaction
    /// </summary>
    public partial class EkatmERPContext : DbContext
    {
        public EkatmERPContext()
        {
        }

        public EkatmERPContext(DbContextOptions<EkatmERPContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AcGroupMaster> AcGroupMaster { get; set; }
        public virtual DbSet<AccessHistory> AccessHistory { get; set; }
        public virtual DbSet<AccountGroupMaster> AccountGroupMaster { get; set; }
        public virtual DbSet<ActivityAllocationMaster> ActivityAllocationMaster { get; set; }
        public virtual DbSet<ActivityAllocationMaster1> ActivityAllocationMaster1 { get; set; }
        public virtual DbSet<ActivityAttachements> ActivityAttachements { get; set; }
        public virtual DbSet<ActivityMaster> ActivityMaster { get; set; }
        public virtual DbSet<ActivityPlanner> ActivityPlanner { get; set; }
        public virtual DbSet<Album> Album { get; set; }
        public virtual DbSet<AlertHistory> AlertHistory { get; set; }
        public virtual DbSet<AmndPaymentSchedule> AmndPaymentSchedule { get; set; }
        public virtual DbSet<AmndSocommission> AmndSocommission { get; set; }
        public virtual DbSet<AmndSodetail> AmndSodetail { get; set; }
        public virtual DbSet<AmndSodetailTaxLine> AmndSodetailTaxLine { get; set; }
        public virtual DbSet<AmndSoheader> AmndSoheader { get; set; }
        public virtual DbSet<AmndSoschedule> AmndSoschedule { get; set; }
        public virtual DbSet<AppLevel> AppLevel { get; set; }
        public virtual DbSet<AppMaster> AppMaster { get; set; }
        public virtual DbSet<AppMethod> AppMethod { get; set; }
        public virtual DbSet<AppReleaseHistory> AppReleaseHistory { get; set; }
        public virtual DbSet<AppRootCauseAnalysis> AppRootCauseAnalysis { get; set; }
        public virtual DbSet<ApplicationMaster> ApplicationMaster { get; set; }
        public virtual DbSet<ApplicationSetUp> ApplicationSetUp { get; set; }
        public virtual DbSet<ApportionmentClass> ApportionmentClass { get; set; }
        public virtual DbSet<ApportionmentDetail> ApportionmentDetail { get; set; }
        public virtual DbSet<ApportionmentDtl> ApportionmentDtl { get; set; }
        public virtual DbSet<ApportionmentMaster> ApportionmentMaster { get; set; }
        public virtual DbSet<ArchActivityAllocationMaster> ArchActivityAllocationMaster { get; set; }
        public virtual DbSet<ArchActivityAssignmentHistory> ArchActivityAssignmentHistory { get; set; }
        public virtual DbSet<ArchActivityAttachements> ArchActivityAttachements { get; set; }
        public virtual DbSet<ArchActivityTrail> ArchActivityTrail { get; set; }
        public virtual DbSet<ArchCrmCallList> ArchCrmCallList { get; set; }
        public virtual DbSet<ArchCrmCollectionCallList> ArchCrmCollectionCallList { get; set; }
        public virtual DbSet<ArchCrmFeedBackCallList> ArchCrmFeedBackCallList { get; set; }
        public virtual DbSet<ArchCrmSuspContactDtls> ArchCrmSuspContactDtls { get; set; }
        public virtual DbSet<ArchCrmSuspProdctDtls> ArchCrmSuspProdctDtls { get; set; }
        public virtual DbSet<ArchCrmSuspectMaster> ArchCrmSuspectMaster { get; set; }
        public virtual DbSet<ArchiveHistory> ArchiveHistory { get; set; }
        public virtual DbSet<AsnchargeDetail> AsnchargeDetail { get; set; }
        public virtual DbSet<AsnchargeTaxLine> AsnchargeTaxLine { get; set; }
        public virtual DbSet<Asncharges> Asncharges { get; set; }
        public virtual DbSet<AsndetailTaxLine> AsndetailTaxLine { get; set; }
        public virtual DbSet<AssetDetail> AssetDetail { get; set; }
        public virtual DbSet<AssetRegister> AssetRegister { get; set; }
        public virtual DbSet<AttachementPath> AttachementPath { get; set; }
        public virtual DbSet<AttandanceApprovalLog> AttandanceApprovalLog { get; set; }
        public virtual DbSet<AttendanceCodeMaster> AttendanceCodeMaster { get; set; }
        public virtual DbSet<AttendanceMaster> AttendanceMaster { get; set; }
        public virtual DbSet<AuditActivityAllocation> AuditActivityAllocation { get; set; }
        public virtual DbSet<AuditFindings> AuditFindings { get; set; }
        public virtual DbSet<AuditParticipants> AuditParticipants { get; set; }
        public virtual DbSet<AuditPlanMaster> AuditPlanMaster { get; set; }
        public virtual DbSet<AuditPointsMaster> AuditPointsMaster { get; set; }
        public virtual DbSet<AuditProcessMaster> AuditProcessMaster { get; set; }
        public virtual DbSet<AuthRequest> AuthRequest { get; set; }
        public virtual DbSet<Authentication> Authentication { get; set; }
        public virtual DbSet<BankDetails> BankDetails { get; set; }
        public virtual DbSet<BankMaster> BankMaster { get; set; }
        public virtual DbSet<BillHeader> BillHeader { get; set; }
        public virtual DbSet<BinAcrcyDtl> BinAcrcyDtl { get; set; }
        public virtual DbSet<BinAcrcyHdr> BinAcrcyHdr { get; set; }
        public virtual DbSet<BioMetricData> BioMetricData { get; set; }
        public virtual DbSet<Bomdetail> Bomdetail { get; set; }
        public virtual DbSet<Bomheader> Bomheader { get; set; }
        public virtual DbSet<BoxTypeMaster> BoxTypeMaster { get; set; }
        public virtual DbSet<BqmAddressMaster> BqmAddressMaster { get; set; }
        public virtual DbSet<BqmBanquetClientMaster> BqmBanquetClientMaster { get; set; }
        public virtual DbSet<BqmBanquetContactInfo> BqmBanquetContactInfo { get; set; }
        public virtual DbSet<BqmEventMaster> BqmEventMaster { get; set; }
        public virtual DbSet<BqmInstructionMaster> BqmInstructionMaster { get; set; }
        public virtual DbSet<BqmSectionItemClass> BqmSectionItemClass { get; set; }
        public virtual DbSet<BqmSectionMaster> BqmSectionMaster { get; set; }
        public virtual DbSet<BqtEnquiry> BqtEnquiry { get; set; }
        public virtual DbSet<BqtQuotationDtl> BqtQuotationDtl { get; set; }
        public virtual DbSet<BqtQuotationDtlMedia> BqtQuotationDtlMedia { get; set; }
        public virtual DbSet<BqtQuotationFtr> BqtQuotationFtr { get; set; }
        public virtual DbSet<BqtQuotationHeader> BqtQuotationHeader { get; set; }
        public virtual DbSet<BranchMaster> BranchMaster { get; set; }
        public virtual DbSet<BrandMaster> BrandMaster { get; set; }
        public virtual DbSet<BusinessTripAdvanceDetail> BusinessTripAdvanceDetail { get; set; }
        public virtual DbSet<BusinessTripAdvanceMaster> BusinessTripAdvanceMaster { get; set; }
        public virtual DbSet<CalendarWorkingHours> CalendarWorkingHours { get; set; }
        public virtual DbSet<CalibrationPrintingParameter> CalibrationPrintingParameter { get; set; }
        public virtual DbSet<CapexFormMaster> CapexFormMaster { get; set; }
        public virtual DbSet<CarActivities> CarActivities { get; set; }
        public virtual DbSet<CarDetails> CarDetails { get; set; }
        public virtual DbSet<CarrierMaster> CarrierMaster { get; set; }
        public virtual DbSet<CartonDetail> CartonDetail { get; set; }
        public virtual DbSet<CartonHeader> CartonHeader { get; set; }
        public virtual DbSet<CartonStockDetail> CartonStockDetail { get; set; }
        public virtual DbSet<CartonTransHistory> CartonTransHistory { get; set; }
        public virtual DbSet<CenvatServiceTaxInfo> CenvatServiceTaxInfo { get; set; }
        public virtual DbSet<ChargeMaster> ChargeMaster { get; set; }
        public virtual DbSet<ChatMessage> ChatMessage { get; set; }
        public virtual DbSet<ChatMessages> ChatMessages { get; set; }
        public virtual DbSet<ChatRoomDetails> ChatRoomDetails { get; set; }
        public virtual DbSet<ChatRoomMaster> ChatRoomMaster { get; set; }
        public virtual DbSet<ChatUserMaster> ChatUserMaster { get; set; }
        public virtual DbSet<ChqPrintProg> ChqPrintProg { get; set; }
        public virtual DbSet<ChqSetup> ChqSetup { get; set; }
        public virtual DbSet<ClaimDetailMaster> ClaimDetailMaster { get; set; }
        public virtual DbSet<ClaimHeaderMaster> ClaimHeaderMaster { get; set; }
        public virtual DbSet<ClassSpec> ClassSpec { get; set; }
        public virtual DbSet<ClassificationMaster> ClassificationMaster { get; set; }
        public virtual DbSet<ClientInfo> ClientInfo { get; set; }
        public virtual DbSet<ClientLicenseDetails> ClientLicenseDetails { get; set; }
        public virtual DbSet<ClientMachineInfo> ClientMachineInfo { get; set; }
        public virtual DbSet<ClientVersionDtl> ClientVersionDtl { get; set; }
        public virtual DbSet<CodePartMaster> CodePartMaster { get; set; }
        public virtual DbSet<ColorMaster> ColorMaster { get; set; }
        public virtual DbSet<CommProcDtl> CommProcDtl { get; set; }
        public virtual DbSet<CommProcHdr> CommProcHdr { get; set; }
        public virtual DbSet<CommProcessed> CommProcessed { get; set; }
        public virtual DbSet<CommProcessing> CommProcessing { get; set; }
        public virtual DbSet<CommSummary> CommSummary { get; set; }
        public virtual DbSet<CommType> CommType { get; set; }
        public virtual DbSet<CompanyLogo> CompanyLogo { get; set; }
        public virtual DbSet<CompanyMaster> CompanyMaster { get; set; }
        public virtual DbSet<ConfigurationDetail> ConfigurationDetail { get; set; }
        public virtual DbSet<ConfigurationMaster> ConfigurationMaster { get; set; }
        public virtual DbSet<ContractInfo> ContractInfo { get; set; }
        public virtual DbSet<ConveyanceDetails> ConveyanceDetails { get; set; }
        public virtual DbSet<ConveyanceMaster> ConveyanceMaster { get; set; }
        public virtual DbSet<CostBatchCalcDtl> CostBatchCalcDtl { get; set; }
        public virtual DbSet<CostBatchComp> CostBatchComp { get; set; }
        public virtual DbSet<CostBatchError> CostBatchError { get; set; }
        public virtual DbSet<CostBatchHeader> CostBatchHeader { get; set; }
        public virtual DbSet<CostBatchItems> CostBatchItems { get; set; }
        public virtual DbSet<CostBatchRout> CostBatchRout { get; set; }
        public virtual DbSet<CostCenterData> CostCenterData { get; set; }
        public virtual DbSet<CostCentreMaster> CostCentreMaster { get; set; }
        public virtual DbSet<CostHeadMaster> CostHeadMaster { get; set; }
        public virtual DbSet<CostRate> CostRate { get; set; }
        public virtual DbSet<CreditTermsMaster> CreditTermsMaster { get; set; }
        public virtual DbSet<CrmAppoinment> CrmAppoinment { get; set; }
        public virtual DbSet<CrmAttachments> CrmAttachments { get; set; }
        public virtual DbSet<CrmBlackList> CrmBlackList { get; set; }
        public virtual DbSet<CrmBusSegUserRelatn> CrmBusSegUserRelatn { get; set; }
        public virtual DbSet<CrmBusiSegmentMaster> CrmBusiSegmentMaster { get; set; }
        public virtual DbSet<CrmCallAssignment> CrmCallAssignment { get; set; }
        public virtual DbSet<CrmCallFollowup> CrmCallFollowup { get; set; }
        public virtual DbSet<CrmCallHistory> CrmCallHistory { get; set; }
        public virtual DbSet<CrmCallList> CrmCallList { get; set; }
        public virtual DbSet<CrmCallPurposeMaster> CrmCallPurposeMaster { get; set; }
        public virtual DbSet<CrmCallReminders> CrmCallReminders { get; set; }
        public virtual DbSet<CrmCallStatusChart> CrmCallStatusChart { get; set; }
        public virtual DbSet<CrmCallStatusMaster> CrmCallStatusMaster { get; set; }
        public virtual DbSet<CrmCallSupportingActivities> CrmCallSupportingActivities { get; set; }
        public virtual DbSet<CrmCampaignMaster> CrmCampaignMaster { get; set; }
        public virtual DbSet<CrmChannelSuspContactDtls> CrmChannelSuspContactDtls { get; set; }
        public virtual DbSet<CrmChannelSuspProdctDtls> CrmChannelSuspProdctDtls { get; set; }
        public virtual DbSet<CrmChannelSuspectMaster> CrmChannelSuspectMaster { get; set; }
        public virtual DbSet<CrmCityMaster> CrmCityMaster { get; set; }
        public virtual DbSet<CrmCollectionCallErrLog> CrmCollectionCallErrLog { get; set; }
        public virtual DbSet<CrmCollectionCallList> CrmCollectionCallList { get; set; }
        public virtual DbSet<CrmCommonWordMaster> CrmCommonWordMaster { get; set; }
        public virtual DbSet<CrmCompetitorAgainstCall> CrmCompetitorAgainstCall { get; set; }
        public virtual DbSet<CrmCompetitorDealerMaster> CrmCompetitorDealerMaster { get; set; }
        public virtual DbSet<CrmCompetitorMaster> CrmCompetitorMaster { get; set; }
        public virtual DbSet<CrmCompetitorProductMaster> CrmCompetitorProductMaster { get; set; }
        public virtual DbSet<CrmCssdetail> CrmCssdetail { get; set; }
        public virtual DbSet<CrmCssformQuesDtls> CrmCssformQuesDtls { get; set; }
        public virtual DbSet<CrmCssformsMaster> CrmCssformsMaster { get; set; }
        public virtual DbSet<CrmCssformsQuestns> CrmCssformsQuestns { get; set; }
        public virtual DbSet<CrmCssheader> CrmCssheader { get; set; }
        public virtual DbSet<CrmCssquestionMaster> CrmCssquestionMaster { get; set; }
        public virtual DbSet<CrmCssselection> CrmCssselection { get; set; }
        public virtual DbSet<CrmCustomerFeedbackMailFormat> CrmCustomerFeedbackMailFormat { get; set; }
        public virtual DbSet<CrmDistrictMaster> CrmDistrictMaster { get; set; }
        public virtual DbSet<CrmEnquiryRegister> CrmEnquiryRegister { get; set; }
        public virtual DbSet<CrmExecutiveMaster> CrmExecutiveMaster { get; set; }
        public virtual DbSet<CrmFeedBackCallList> CrmFeedBackCallList { get; set; }
        public virtual DbSet<CrmFutureCallProductDetails> CrmFutureCallProductDetails { get; set; }
        public virtual DbSet<CrmFuturePlan> CrmFuturePlan { get; set; }
        public virtual DbSet<CrmItemClassification> CrmItemClassification { get; set; }
        public virtual DbSet<CrmMailinglistAuthors> CrmMailinglistAuthors { get; set; }
        public virtual DbSet<CrmMailinglistDtl> CrmMailinglistDtl { get; set; }
        public virtual DbSet<CrmMailinglistMaster> CrmMailinglistMaster { get; set; }
        public virtual DbSet<CrmMailinglistViewers> CrmMailinglistViewers { get; set; }
        public virtual DbSet<CrmMaterialMovementMaster> CrmMaterialMovementMaster { get; set; }
        public virtual DbSet<CrmMaterialMovementProductDtls> CrmMaterialMovementProductDtls { get; set; }
        public virtual DbSet<CrmMaterialReceivedDtls> CrmMaterialReceivedDtls { get; set; }
        public virtual DbSet<CrmMaterialReceivedProductDtls> CrmMaterialReceivedProductDtls { get; set; }
        public virtual DbSet<CrmOasheader> CrmOasheader { get; set; }
        public virtual DbSet<CrmOutcome> CrmOutcome { get; set; }
        public virtual DbSet<CrmProductScripts> CrmProductScripts { get; set; }
        public virtual DbSet<CrmPromSchMaster> CrmPromSchMaster { get; set; }
        public virtual DbSet<CrmPromoScheProductDtls> CrmPromoScheProductDtls { get; set; }
        public virtual DbSet<CrmQuotation> CrmQuotation { get; set; }
        public virtual DbSet<CrmReasonCatgryMaster> CrmReasonCatgryMaster { get; set; }
        public virtual DbSet<CrmReasonMaster> CrmReasonMaster { get; set; }
        public virtual DbSet<CrmRgtdtlsForUc> CrmRgtdtlsForUc { get; set; }
        public virtual DbSet<CrmSalesFamilyUsers> CrmSalesFamilyUsers { get; set; }
        public virtual DbSet<CrmStateMaster> CrmStateMaster { get; set; }
        public virtual DbSet<CrmSuspContactDtls> CrmSuspContactDtls { get; set; }
        public virtual DbSet<CrmSuspProdctDtls> CrmSuspProdctDtls { get; set; }
        public virtual DbSet<CrmSuspectFieldDetail> CrmSuspectFieldDetail { get; set; }
        public virtual DbSet<CrmSuspectFieldHeader> CrmSuspectFieldHeader { get; set; }
        public virtual DbSet<CrmTalukaMaster> CrmTalukaMaster { get; set; }
        public virtual DbSet<CrmTargetDetail> CrmTargetDetail { get; set; }
        public virtual DbSet<CrmTargetHead> CrmTargetHead { get; set; }
        public virtual DbSet<CrmTargetTransactionDtls> CrmTargetTransactionDtls { get; set; }
        public virtual DbSet<CrmTenderDetails> CrmTenderDetails { get; set; }
        public virtual DbSet<CrmTerrUserRelation> CrmTerrUserRelation { get; set; }
        public virtual DbSet<CrmTerritoryMaster> CrmTerritoryMaster { get; set; }
        public virtual DbSet<CrmTravelPlan> CrmTravelPlan { get; set; }
        public virtual DbSet<CrmVwbinterface> CrmVwbinterface { get; set; }
        public virtual DbSet<CrmcallAllocation> CrmcallAllocation { get; set; }
        public virtual DbSet<CrtnProdDetail> CrtnProdDetail { get; set; }
        public virtual DbSet<CrtnProdHeader> CrtnProdHeader { get; set; }
        public virtual DbSet<CshDenomEntry> CshDenomEntry { get; set; }
        public virtual DbSet<CsmoduleDetails> CsmoduleDetails { get; set; }
        public virtual DbSet<Cstinfo> Cstinfo { get; set; }
        public virtual DbSet<CurrencyMaster> CurrencyMaster { get; set; }
        public virtual DbSet<Cust> Cust { get; set; }
        public virtual DbSet<CustVendorMaster> CustVendorMaster { get; set; }
        public virtual DbSet<CyearCalculationMaster> CyearCalculationMaster { get; set; }
        public virtual DbSet<DailyTinshedstk> DailyTinshedstk { get; set; }
        public virtual DbSet<DataSheetChartHeader> DataSheetChartHeader { get; set; }
        public virtual DbSet<DataSheetChartSeries> DataSheetChartSeries { get; set; }
        public virtual DbSet<DataSheetScheduler> DataSheetScheduler { get; set; }
        public virtual DbSet<DataUploadLog> DataUploadLog { get; set; }
        public virtual DbSet<DatasheetActivityRelation> DatasheetActivityRelation { get; set; }
        public virtual DbSet<DayType> DayType { get; set; }
        public virtual DbSet<DbMst> DbMst { get; set; }
        public virtual DbSet<DefaultWebPages> DefaultWebPages { get; set; }
        public virtual DbSet<DefectLoggingActivity> DefectLoggingActivity { get; set; }
        public virtual DbSet<DenierMaster> DenierMaster { get; set; }
        public virtual DbSet<DeptHod> DeptHod { get; set; }
        public virtual DbSet<DeptMaster> DeptMaster { get; set; }
        public virtual DbSet<DesgnationSkillsetMaster> DesgnationSkillsetMaster { get; set; }
        public virtual DbSet<DesignationMaster> DesignationMaster { get; set; }
        public virtual DbSet<DeviceMaster> DeviceMaster { get; set; }
        public virtual DbSet<DevicemasterHistory> DevicemasterHistory { get; set; }
        public virtual DbSet<DocApprDtl> DocApprDtl { get; set; }
        public virtual DbSet<DocApprHdr> DocApprHdr { get; set; }
        public virtual DbSet<DocPrintCount> DocPrintCount { get; set; }
        public virtual DbSet<DocProcess> DocProcess { get; set; }
        public virtual DbSet<DocumentTypeMaster> DocumentTypeMaster { get; set; }
        public virtual DbSet<DocumntAttachmnts> DocumntAttachmnts { get; set; }
        public virtual DbSet<DomainExpirySetUp> DomainExpirySetUp { get; set; }
        public virtual DbSet<DsppkgListDetail> DsppkgListDetail { get; set; }
        public virtual DbSet<DsppkgListHeader> DsppkgListHeader { get; set; }
        public virtual DbSet<Dsrdtl> Dsrdtl { get; set; }
        public virtual DbSet<DsrgrpItem> DsrgrpItem { get; set; }
        public virtual DbSet<DsrgrpMst> DsrgrpMst { get; set; }
        public virtual DbSet<Dsrhdr> Dsrhdr { get; set; }
        public virtual DbSet<EdmObjVerChange> EdmObjVerChange { get; set; }
        public virtual DbSet<EdmexecuteHistory> EdmexecuteHistory { get; set; }
        public virtual DbSet<EmailActivityMaster> EmailActivityMaster { get; set; }
        public virtual DbSet<EmailAlert> EmailAlert { get; set; }
        public virtual DbSet<EmailList> EmailList { get; set; }
        public virtual DbSet<EmailListTimesheetExcel> EmailListTimesheetExcel { get; set; }
        public virtual DbSet<EmailSetting> EmailSetting { get; set; }
        public virtual DbSet<Emp> Emp { get; set; }
        public virtual DbSet<EmpDocInfo> EmpDocInfo { get; set; }
        public virtual DbSet<EmpLeaveEncashment> EmpLeaveEncashment { get; set; }
        public virtual DbSet<EmpLeaveInfo> EmpLeaveInfo { get; set; }
        public virtual DbSet<EmpManualShift> EmpManualShift { get; set; }
        public virtual DbSet<EmployeeMaster111> EmployeeMaster111 { get; set; }
        public virtual DbSet<EmployeeSkillSet> EmployeeSkillSet { get; set; }
        public virtual DbSet<EntityContactDeviceMaster> EntityContactDeviceMaster { get; set; }
        public virtual DbSet<EntityContactInfo> EntityContactInfo { get; set; }
        public virtual DbSet<EntityCreationTable> EntityCreationTable { get; set; }
        public virtual DbSet<EntityGroupMaster> EntityGroupMaster { get; set; }
        public virtual DbSet<EntityType> EntityType { get; set; }
        public virtual DbSet<EntityTypeMaster> EntityTypeMaster { get; set; }
        public virtual DbSet<ErpmoduleSetup> ErpmoduleSetup { get; set; }
        public virtual DbSet<ErpsysMods> ErpsysMods { get; set; }
        public virtual DbSet<Error> Error { get; set; }
        public virtual DbSet<EventMaster> EventMaster { get; set; }
        public virtual DbSet<ExPtMaster> ExPtMaster { get; set; }
        public virtual DbSet<ExchRateMaster> ExchRateMaster { get; set; }
        public virtual DbSet<ExciseCenvatable> ExciseCenvatable { get; set; }
        public virtual DbSet<ExciseHeading> ExciseHeading { get; set; }
        public virtual DbSet<ExtPtMaster> ExtPtMaster { get; set; }
        public virtual DbSet<Fadetails> Fadetails { get; set; }
        public virtual DbSet<Famaster> Famaster { get; set; }
        public virtual DbSet<Fatrans> Fatrans { get; set; }
        public virtual DbSet<FbtclassMaster> FbtclassMaster { get; set; }
        public virtual DbSet<Fbtmaster> Fbtmaster { get; set; }
        public virtual DbSet<FileAttachmentMaster> FileAttachmentMaster { get; set; }
        public virtual DbSet<FinPanelMaster> FinPanelMaster { get; set; }
        public virtual DbSet<FolderDeletion> FolderDeletion { get; set; }
        public virtual DbSet<Forecast> Forecast { get; set; }
        public virtual DbSet<ForeignKeyTracker> ForeignKeyTracker { get; set; }
        public virtual DbSet<ForwarderMaster> ForwarderMaster { get; set; }
        public virtual DbSet<FwdCoverEntry> FwdCoverEntry { get; set; }
        public virtual DbSet<Fymaster> Fymaster { get; set; }
        public virtual DbSet<GininvChargeTaxLine> GininvChargeTaxLine { get; set; }
        public virtual DbSet<GininvCharges> GininvCharges { get; set; }
        public virtual DbSet<GininvDetailTaxLine> GininvDetailTaxLine { get; set; }
        public virtual DbSet<GininvDtl> GininvDtl { get; set; }
        public virtual DbSet<GininvHdr> GininvHdr { get; set; }
        public virtual DbSet<GinpacketList> GinpacketList { get; set; }
        public virtual DbSet<GpexciseHeader> GpexciseHeader { get; set; }
        public virtual DbSet<GrnchargeDetail> GrnchargeDetail { get; set; }
        public virtual DbSet<GrnchargeTaxLine> GrnchargeTaxLine { get; set; }
        public virtual DbSet<Grncharges> Grncharges { get; set; }
        public virtual DbSet<Grndetail> Grndetail { get; set; }
        public virtual DbSet<GrndetailTaxLine> GrndetailTaxLine { get; set; }
        public virtual DbSet<Grnheader> Grnheader { get; set; }
        public virtual DbSet<GtaserviceTaxInfo> GtaserviceTaxInfo { get; set; }
        public virtual DbSet<HundiInfo> HundiInfo { get; set; }
        public virtual DbSet<IndentSchedule> IndentSchedule { get; set; }
        public virtual DbSet<InstallationMaster> InstallationMaster { get; set; }
        public virtual DbSet<InsuranceCoMaster> InsuranceCoMaster { get; set; }
        public virtual DbSet<InvOrdTypMst> InvOrdTypMst { get; set; }
        public virtual DbSet<InvoiceDetail> InvoiceDetail { get; set; }
        public virtual DbSet<InvoicePrintingParameter> InvoicePrintingParameter { get; set; }
        public virtual DbSet<InwDocReg> InwDocReg { get; set; }
        public virtual DbSet<ItemAttachments> ItemAttachments { get; set; }
        public virtual DbSet<ItemClassPrefLoc> ItemClassPrefLoc { get; set; }
        public virtual DbSet<ItemClassificationMaster> ItemClassificationMaster { get; set; }
        public virtual DbSet<ItemCodeLogicTrail> ItemCodeLogicTrail { get; set; }
        public virtual DbSet<ItemCredit> ItemCredit { get; set; }
        public virtual DbSet<ItemCustomerRelation> ItemCustomerRelation { get; set; }
        public virtual DbSet<ItemDemand> ItemDemand { get; set; }
        public virtual DbSet<ItemDescPrintPrgm> ItemDescPrintPrgm { get; set; }
        public virtual DbSet<ItemGroupMaster> ItemGroupMaster { get; set; }
        public virtual DbSet<ItemLocType> ItemLocType { get; set; }
        public virtual DbSet<ItemLocationMasterRelation> ItemLocationMasterRelation { get; set; }
        public virtual DbSet<ItemMaster> ItemMaster { get; set; }
        public virtual DbSet<ItemParameter> ItemParameter { get; set; }
        public virtual DbSet<ItemParameterMaster> ItemParameterMaster { get; set; }
        public virtual DbSet<ItemPlant> ItemPlant { get; set; }
        public virtual DbSet<ItemPrizeList> ItemPrizeList { get; set; }
        public virtual DbSet<ItemProcess> ItemProcess { get; set; }
        public virtual DbSet<ItemPurGordetTypeRel> ItemPurGordetTypeRel { get; set; }
        public virtual DbSet<ItemRoutingDetail> ItemRoutingDetail { get; set; }
        public virtual DbSet<ItemRoutingHeader> ItemRoutingHeader { get; set; }
        public virtual DbSet<ItemRoutingToolDetails> ItemRoutingToolDetails { get; set; }
        public virtual DbSet<ItemSalesGroup> ItemSalesGroup { get; set; }
        public virtual DbSet<ItemSpec> ItemSpec { get; set; }
        public virtual DbSet<ItemStockStatus> ItemStockStatus { get; set; }
        public virtual DbSet<ItemTypeMaster> ItemTypeMaster { get; set; }
        public virtual DbSet<ItemUomconversion> ItemUomconversion { get; set; }
        public virtual DbSet<ItemVendorRelation> ItemVendorRelation { get; set; }
        public virtual DbSet<ItemWarehouseRelation> ItemWarehouseRelation { get; set; }
        public virtual DbSet<ItmQcparam> ItmQcparam { get; set; }
        public virtual DbSet<KitchenStockSummary> KitchenStockSummary { get; set; }
        public virtual DbSet<Kotdetail> Kotdetail { get; set; }
        public virtual DbSet<Kotheader> Kotheader { get; set; }
        public virtual DbSet<LandedCostFactor> LandedCostFactor { get; set; }
        public virtual DbSet<LeaveCalculationMaster> LeaveCalculationMaster { get; set; }
        public virtual DbSet<LeaveTransaction> LeaveTransaction { get; set; }
        public virtual DbSet<LeaveTypeMaster> LeaveTypeMaster { get; set; }
        public virtual DbSet<LeftOvrDtl> LeftOvrDtl { get; set; }
        public virtual DbSet<LeftOvrHdr> LeftOvrHdr { get; set; }
        public virtual DbSet<LocalPurchaseRegister> LocalPurchaseRegister { get; set; }
        public virtual DbSet<LocationMaster> LocationMaster { get; set; }
        public virtual DbSet<LocationType> LocationType { get; set; }
        public virtual DbSet<LocationWiseWeeklyOff> LocationWiseWeeklyOff { get; set; }
        public virtual DbSet<Locentry> Locentry { get; set; }
        public virtual DbSet<LogInInfo> LogInInfo { get; set; }
        public virtual DbSet<Login> Login { get; set; }
        public virtual DbSet<MachineAllocation> MachineAllocation { get; set; }
        public virtual DbSet<MachineDownTimeDetail> MachineDownTimeDetail { get; set; }
        public virtual DbSet<MachineGroupDetail> MachineGroupDetail { get; set; }
        public virtual DbSet<MachineGroupMaster> MachineGroupMaster { get; set; }
        public virtual DbSet<MachineMaster> MachineMaster { get; set; }
        public virtual DbSet<MainModule> MainModule { get; set; }
        public virtual DbSet<ManageCompoffLeaveMaster> ManageCompoffLeaveMaster { get; set; }
        public virtual DbSet<Manifest> Manifest { get; set; }
        public virtual DbSet<ManufacturingOrderDetail> ManufacturingOrderDetail { get; set; }
        public virtual DbSet<ManufacturingOrderHeader> ManufacturingOrderHeader { get; set; }
        public virtual DbSet<McnDwnRsnMaster> McnDwnRsnMaster { get; set; }
        public virtual DbSet<MeetingTypes> MeetingTypes { get; set; }
        public virtual DbSet<MemberClassificationMaster> MemberClassificationMaster { get; set; }
        public virtual DbSet<MenuMaster> MenuMaster { get; set; }
        public virtual DbSet<Messages> Messages { get; set; }
        public virtual DbSet<Misdetail> Misdetail { get; set; }
        public virtual DbSet<Misheader> Misheader { get; set; }
        public virtual DbSet<MispacketList> MispacketList { get; set; }
        public virtual DbSet<MmContractDetail> MmContractDetail { get; set; }
        public virtual DbSet<MmContractHeader> MmContractHeader { get; set; }
        public virtual DbSet<MmDinoteReqDetail> MmDinoteReqDetail { get; set; }
        public virtual DbSet<MmDinoteReqHeader> MmDinoteReqHeader { get; set; }
        public virtual DbSet<MmDivisionMaster> MmDivisionMaster { get; set; }
        public virtual DbSet<MmLocationRateCategory> MmLocationRateCategory { get; set; }
        public virtual DbSet<MmPositionCategory> MmPositionCategory { get; set; }
        public virtual DbSet<MmRateCard> MmRateCard { get; set; }
        public virtual DbSet<MmRateCardHeader> MmRateCardHeader { get; set; }
        public virtual DbSet<MmWishListDetail> MmWishListDetail { get; set; }
        public virtual DbSet<MmWishListHeader> MmWishListHeader { get; set; }
        public virtual DbSet<MobileActDact> MobileActDact { get; set; }
        public virtual DbSet<Modetail> Modetail { get; set; }
        public virtual DbSet<ModuleInfo> ModuleInfo { get; set; }
        public virtual DbSet<ModuleMaster> ModuleMaster { get; set; }
        public virtual DbSet<ModuleRoles> ModuleRoles { get; set; }
        public virtual DbSet<ModuleSetup> ModuleSetup { get; set; }
        public virtual DbSet<Modules> Modules { get; set; }
        public virtual DbSet<Moheader> Moheader { get; set; }
        public virtual DbSet<Momactivities> Momactivities { get; set; }
        public virtual DbSet<Momattendes> Momattendes { get; set; }
        public virtual DbSet<Momdefinition> Momdefinition { get; set; }
        public virtual DbSet<Mompoints> Mompoints { get; set; }
        public virtual DbSet<Momreminder> Momreminder { get; set; }
        public virtual DbSet<MomtrlReqDtl> MomtrlReqDtl { get; set; }
        public virtual DbSet<MomtrlReqHeader> MomtrlReqHeader { get; set; }
        public virtual DbSet<MomtrlReqItemDtl> MomtrlReqItemDtl { get; set; }
        public virtual DbSet<MomtrlReqPickList> MomtrlReqPickList { get; set; }
        public virtual DbSet<MomtrlReqSummary> MomtrlReqSummary { get; set; }
        public virtual DbSet<Moqcparam> Moqcparam { get; set; }
        public virtual DbSet<Morouting> Morouting { get; set; }
        public virtual DbSet<Mospec> Mospec { get; set; }
        public virtual DbSet<MostockAlloc> MostockAlloc { get; set; }
        public virtual DbSet<Mrndetail> Mrndetail { get; set; }
        public virtual DbSet<Mrnheader> Mrnheader { get; set; }
        public virtual DbSet<MrnpacketList> MrnpacketList { get; set; }
        public virtual DbSet<Mrp> Mrp { get; set; }
        public virtual DbSet<Mrpmodetail> Mrpmodetail { get; set; }
        public virtual DbSet<Mrpplan> Mrpplan { get; set; }
        public virtual DbSet<MrpplanOrd> MrpplanOrd { get; set; }
        public virtual DbSet<MrpplanStatus> MrpplanStatus { get; set; }
        public virtual DbSet<Mrpprojection> Mrpprojection { get; set; }
        public virtual DbSet<Mrpreq> Mrpreq { get; set; }
        public virtual DbSet<Mrsdetail> Mrsdetail { get; set; }
        public virtual DbSet<Mrsheader> Mrsheader { get; set; }
        public virtual DbSet<MrspickList> MrspickList { get; set; }
        public virtual DbSet<MtrlPutAway> MtrlPutAway { get; set; }
        public virtual DbSet<MtrlTranNote> MtrlTranNote { get; set; }
        public virtual DbSet<NarrationMaster> NarrationMaster { get; set; }
        public virtual DbSet<NotificationDetails> NotificationDetails { get; set; }
        public virtual DbSet<NotificationType> NotificationType { get; set; }
        public virtual DbSet<Notificationmaster> Notificationmaster { get; set; }
        public virtual DbSet<ObMerchantPriceList> ObMerchantPriceList { get; set; }
        public virtual DbSet<ObjVersion> ObjVersion { get; set; }
        public virtual DbSet<ObjVersionDefData> ObjVersionDefData { get; set; }
        public virtual DbSet<Obtradediscount> Obtradediscount { get; set; }
        public virtual DbSet<OfflineOpStk> OfflineOpStk { get; set; }
        public virtual DbSet<OldPassward> OldPassward { get; set; }
        public virtual DbSet<Omdcomment> Omdcomment { get; set; }
        public virtual DbSet<OpeningStock> OpeningStock { get; set; }
        public virtual DbSet<OperationMaster> OperationMaster { get; set; }
        public virtual DbSet<OperationWiplocation> OperationWiplocation { get; set; }
        public virtual DbSet<OrderExecutionDetails> OrderExecutionDetails { get; set; }
        public virtual DbSet<OrderTypeWiseBankAmount> OrderTypeWiseBankAmount { get; set; }
        public virtual DbSet<OrderTypeWiseClassification> OrderTypeWiseClassification { get; set; }
        public virtual DbSet<OrderTypeWisePrintingParameter> OrderTypeWisePrintingParameter { get; set; }
        public virtual DbSet<OutsideUsers> OutsideUsers { get; set; }
        public virtual DbSet<OutwDocReg> OutwDocReg { get; set; }
        public virtual DbSet<OutwordGpdetail> OutwordGpdetail { get; set; }
        public virtual DbSet<OutwordGpheader> OutwordGpheader { get; set; }
        public virtual DbSet<PackageTask> PackageTask { get; set; }
        public virtual DbSet<PacketMaster> PacketMaster { get; set; }
        public virtual DbSet<PairMaster> PairMaster { get; set; }
        public virtual DbSet<PanelField> PanelField { get; set; }
        public virtual DbSet<PanelMaster> PanelMaster { get; set; }
        public virtual DbSet<ParameterGroupMaster> ParameterGroupMaster { get; set; }
        public virtual DbSet<PartnerUserHistory> PartnerUserHistory { get; set; }
        public virtual DbSet<PartnerUserMaster> PartnerUserMaster { get; set; }
        public virtual DbSet<PartnerUserOldPassward> PartnerUserOldPassward { get; set; }
        public virtual DbSet<PartnerUserPhotos> PartnerUserPhotos { get; set; }
        public virtual DbSet<PaymentBatchDetails> PaymentBatchDetails { get; set; }
        public virtual DbSet<PaymentBatchHeader> PaymentBatchHeader { get; set; }
        public virtual DbSet<PaymentSchedule> PaymentSchedule { get; set; }
        public virtual DbSet<PaymentTerms> PaymentTerms { get; set; }
        public virtual DbSet<PccardDetail> PccardDetail { get; set; }
        public virtual DbSet<PccardMaster> PccardMaster { get; set; }
        public virtual DbSet<Pctrans> Pctrans { get; set; }
        public virtual DbSet<PctransHistory> PctransHistory { get; set; }
        public virtual DbSet<PendingStk> PendingStk { get; set; }
        public virtual DbSet<PeriodMaster> PeriodMaster { get; set; }
        public virtual DbSet<PersonalDocumentMaster> PersonalDocumentMaster { get; set; }
        public virtual DbSet<PfepHistoryMaster> PfepHistoryMaster { get; set; }
        public virtual DbSet<PfepMaster> PfepMaster { get; set; }
        public virtual DbSet<PhotAlbum> PhotAlbum { get; set; }
        public virtual DbSet<PickListBuffer> PickListBuffer { get; set; }
        public virtual DbSet<PickedLot> PickedLot { get; set; }
        public virtual DbSet<PickedPacket> PickedPacket { get; set; }
        public virtual DbSet<PicklistDtl> PicklistDtl { get; set; }
        public virtual DbSet<PicklistHdr> PicklistHdr { get; set; }
        public virtual DbSet<PicklistLot> PicklistLot { get; set; }
        public virtual DbSet<Pihdr> Pihdr { get; set; }
        public virtual DbSet<PktOpStkDetail> PktOpStkDetail { get; set; }
        public virtual DbSet<PktOpStkHeader> PktOpStkHeader { get; set; }
        public virtual DbSet<PlantMaster> PlantMaster { get; set; }
        public virtual DbSet<PlantWareHouseMaster> PlantWareHouseMaster { get; set; }
        public virtual DbSet<PochargeTaxLine> PochargeTaxLine { get; set; }
        public virtual DbSet<Podetail> Podetail { get; set; }
        public virtual DbSet<PodetailTaxLine> PodetailTaxLine { get; set; }
        public virtual DbSet<Poheader> Poheader { get; set; }
        public virtual DbSet<Poschedule> Poschedule { get; set; }
        public virtual DbSet<PriceListClassificationMaster> PriceListClassificationMaster { get; set; }
        public virtual DbSet<Priority> Priority { get; set; }
        public virtual DbSet<PrjAppMaster> PrjAppMaster { get; set; }
        public virtual DbSet<PrjCashFlowSummary> PrjCashFlowSummary { get; set; }
        public virtual DbSet<PrjDatasheetMaster> PrjDatasheetMaster { get; set; }
        public virtual DbSet<PrjEmp> PrjEmp { get; set; }
        public virtual DbSet<PrjTech> PrjTech { get; set; }
        public virtual DbSet<ProActionInfo> ProActionInfo { get; set; }
        public virtual DbSet<ProRatingInfo> ProRatingInfo { get; set; }
        public virtual DbSet<ProblemCategoryMaster> ProblemCategoryMaster { get; set; }
        public virtual DbSet<ProdBackFlushLot> ProdBackFlushLot { get; set; }
        public virtual DbSet<ProdDownTimeDetail> ProdDownTimeDetail { get; set; }
        public virtual DbSet<ProdOprtrDetail> ProdOprtrDetail { get; set; }
        public virtual DbSet<Prodetail> Prodetail { get; set; }
        public virtual DbSet<ProdetailTaxLine> ProdetailTaxLine { get; set; }
        public virtual DbSet<ProductionDetail> ProductionDetail { get; set; }
        public virtual DbSet<ProductionHeader> ProductionHeader { get; set; }
        public virtual DbSet<Proheader> Proheader { get; set; }
        public virtual DbSet<ProinputItemDetail> ProinputItemDetail { get; set; }
        public virtual DbSet<ProjCashFlow> ProjCashFlow { get; set; }
        public virtual DbSet<ProjIncoExp> ProjIncoExp { get; set; }
        public virtual DbSet<ProjectAllocation> ProjectAllocation { get; set; }
        public virtual DbSet<ProjectExecutionDetail> ProjectExecutionDetail { get; set; }
        public virtual DbSet<ProjectExecutionHeader> ProjectExecutionHeader { get; set; }
        public virtual DbSet<ProjectMaster> ProjectMaster { get; set; }
        public virtual DbSet<ProjectRateCard> ProjectRateCard { get; set; }
        public virtual DbSet<ProjectRoles> ProjectRoles { get; set; }
        public virtual DbSet<ProjectStatus> ProjectStatus { get; set; }
        public virtual DbSet<ProjectStatusAlias> ProjectStatusAlias { get; set; }
        public virtual DbSet<ProjectTypeMaster> ProjectTypeMaster { get; set; }
        public virtual DbSet<ProjectWidgetMaster> ProjectWidgetMaster { get; set; }
        public virtual DbSet<ProoutputItemBom> ProoutputItemBom { get; set; }
        public virtual DbSet<ProoutputItemDetail> ProoutputItemDetail { get; set; }
        public virtual DbSet<ProoutputItemSchedule> ProoutputItemSchedule { get; set; }
        public virtual DbSet<PropickList> PropickList { get; set; }
        public virtual DbSet<PurchaseRegisterSummary> PurchaseRegisterSummary { get; set; }
        public virtual DbSet<PymtSettTermMaster> PymtSettTermMaster { get; set; }
        public virtual DbSet<PymtSttlTerms> PymtSttlTerms { get; set; }
        public virtual DbSet<Qcbuffer> Qcbuffer { get; set; }
        public virtual DbSet<Qcdetail> Qcdetail { get; set; }
        public virtual DbSet<Qcheader> Qcheader { get; set; }
        public virtual DbSet<QcinProcessDtl> QcinProcessDtl { get; set; }
        public virtual DbSet<QcinProcessHdr> QcinProcessHdr { get; set; }
        public virtual DbSet<QcparameterDtl> QcparameterDtl { get; set; }
        public virtual DbSet<Qtab> Qtab { get; set; }
        public virtual DbSet<QueuingListDetail> QueuingListDetail { get; set; }
        public virtual DbSet<QueuingListHeader> QueuingListHeader { get; set; }
        public virtual DbSet<QuotDetailTaxLine> QuotDetailTaxLine { get; set; }
        public virtual DbSet<QuotItemDetailFeatures> QuotItemDetailFeatures { get; set; }
        public virtual DbSet<QuotSelectedLocations> QuotSelectedLocations { get; set; }
        public virtual DbSet<QuotationBom> QuotationBom { get; set; }
        public virtual DbSet<RecordStatus> RecordStatus { get; set; }
        public virtual DbSet<RecurActDef> RecurActDef { get; set; }
        public virtual DbSet<RemndSch> RemndSch { get; set; }
        public virtual DbSet<ReplyMessages> ReplyMessages { get; set; }
        public virtual DbSet<ReportAuthorization> ReportAuthorization { get; set; }
        public virtual DbSet<ResflDtl> ResflDtl { get; set; }
        public virtual DbSet<ResflHdr> ResflHdr { get; set; }
        public virtual DbSet<ResourceCost> ResourceCost { get; set; }
        public virtual DbSet<Rfmaster> Rfmaster { get; set; }
        public virtual DbSet<Rfqdetail> Rfqdetail { get; set; }
        public virtual DbSet<Rfqvendor> Rfqvendor { get; set; }
        public virtual DbSet<RfqvendorDetails> RfqvendorDetails { get; set; }
        public virtual DbSet<Rfstatus> Rfstatus { get; set; }
        public virtual DbSet<Rights> Rights { get; set; }
        public virtual DbSet<Rmdadetail> Rmdadetail { get; set; }
        public virtual DbSet<Rmdaheader> Rmdaheader { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<RouteMaster> RouteMaster { get; set; }
        public virtual DbSet<RouteMaster1> RouteMaster1 { get; set; }
        public virtual DbSet<Rrf> Rrf { get; set; }
        public virtual DbSet<Rrfskills> Rrfskills { get; set; }
        public virtual DbSet<SaleRetnChargeDtl> SaleRetnChargeDtl { get; set; }
        public virtual DbSet<SaleRetnChargeTaxLine> SaleRetnChargeTaxLine { get; set; }
        public virtual DbSet<SaleRetnDtl> SaleRetnDtl { get; set; }
        public virtual DbSet<SaleRetnDtlTaxLine> SaleRetnDtlTaxLine { get; set; }
        public virtual DbSet<SaleRetnHdr> SaleRetnHdr { get; set; }
        public virtual DbSet<SalesBillDtlTaxLine> SalesBillDtlTaxLine { get; set; }
        public virtual DbSet<SalesCategory> SalesCategory { get; set; }
        public virtual DbSet<SalesDtl> SalesDtl { get; set; }
        public virtual DbSet<SalesDtlLine> SalesDtlLine { get; set; }
        public virtual DbSet<SalesExpenses> SalesExpenses { get; set; }
        public virtual DbSet<SalesFamily> SalesFamily { get; set; }
        public virtual DbSet<SalesFtr> SalesFtr { get; set; }
        public virtual DbSet<SalesHeader> SalesHeader { get; set; }
        public virtual DbSet<SalesOrderDetail> SalesOrderDetail { get; set; }
        public virtual DbSet<SalesOrderLotDetail> SalesOrderLotDetail { get; set; }
        public virtual DbSet<SalesPickList> SalesPickList { get; set; }
        public virtual DbSet<SalesRetnPacketList> SalesRetnPacketList { get; set; }
        public virtual DbSet<SalesWidgetMaster> SalesWidgetMaster { get; set; }
        public virtual DbSet<SalvDetail> SalvDetail { get; set; }
        public virtual DbSet<SalvHeader> SalvHeader { get; set; }
        public virtual DbSet<SalvRejDetail> SalvRejDetail { get; set; }
        public virtual DbSet<SbcmtrlDetail> SbcmtrlDetail { get; set; }
        public virtual DbSet<SchCalcMtd> SchCalcMtd { get; set; }
        public virtual DbSet<Sdrdetail> Sdrdetail { get; set; }
        public virtual DbSet<Sdrheader> Sdrheader { get; set; }
        public virtual DbSet<ServTaxInfo> ServTaxInfo { get; set; }
        public virtual DbSet<ServiceClass> ServiceClass { get; set; }
        public virtual DbSet<ShiftMaster> ShiftMaster { get; set; }
        public virtual DbSet<ShipToMaster> ShipToMaster { get; set; }
        public virtual DbSet<ShipmentTracking> ShipmentTracking { get; set; }
        public virtual DbSet<SixMonthLatemarkData> SixMonthLatemarkData { get; set; }
        public virtual DbSet<SizeMaster> SizeMaster { get; set; }
        public virtual DbSet<SkillGroupMaster> SkillGroupMaster { get; set; }
        public virtual DbSet<SkillRating> SkillRating { get; set; }
        public virtual DbSet<SkillSetMaster> SkillSetMaster { get; set; }
        public virtual DbSet<Socommission> Socommission { get; set; }
        public virtual DbSet<Sodetail> Sodetail { get; set; }
        public virtual DbSet<SodetailTaxLine> SodetailTaxLine { get; set; }
        public virtual DbSet<Soheader> Soheader { get; set; }
        public virtual DbSet<Soheader20190307> Soheader20190307 { get; set; }
        public virtual DbSet<SoitemDetailFeatures> SoitemDetailFeatures { get; set; }
        public virtual DbSet<Sosample> Sosample { get; set; }
        public virtual DbSet<Soschedule> Soschedule { get; set; }
        public virtual DbSet<SoscheduleBom> SoscheduleBom { get; set; }
        public virtual DbSet<SourceType> SourceType { get; set; }
        public virtual DbSet<SpecDetail> SpecDetail { get; set; }
        public virtual DbSet<SpecHeader> SpecHeader { get; set; }
        public virtual DbSet<SqtableForEmail> SqtableForEmail { get; set; }
        public virtual DbSet<StandardCalendarOptions> StandardCalendarOptions { get; set; }
        public virtual DbSet<StateMaster> StateMaster { get; set; }
        public virtual DbSet<StkAdjPacket> StkAdjPacket { get; set; }
        public virtual DbSet<StkQcdtl> StkQcdtl { get; set; }
        public virtual DbSet<StkQchdr> StkQchdr { get; set; }
        public virtual DbSet<StockAdjustment> StockAdjustment { get; set; }
        public virtual DbSet<StockDetails> StockDetails { get; set; }
        public virtual DbSet<StyleCodeMaster> StyleCodeMaster { get; set; }
        public virtual DbSet<StyleMaster> StyleMaster { get; set; }
        public virtual DbSet<SubContractWip> SubContractWip { get; set; }
        public virtual DbSet<SugPickList> SugPickList { get; set; }
        public virtual DbSet<SuggPutAway> SuggPutAway { get; set; }
        public virtual DbSet<SupportMaterialInfo> SupportMaterialInfo { get; set; }
        public virtual DbSet<SupportStaffBankDetails> SupportStaffBankDetails { get; set; }
        public virtual DbSet<SupportTktReopen> SupportTktReopen { get; set; }
        public virtual DbSet<TaskAuthority> TaskAuthority { get; set; }
        public virtual DbSet<TaskAuthorityHistory> TaskAuthorityHistory { get; set; }
        public virtual DbSet<TaskHistory> TaskHistory { get; set; }
        public virtual DbSet<TaskMaster> TaskMaster { get; set; }
        public virtual DbSet<TaskWiseUserMaster> TaskWiseUserMaster { get; set; }
        public virtual DbSet<TaxAuthority> TaxAuthority { get; set; }
        public virtual DbSet<TaxCalculation> TaxCalculation { get; set; }
        public virtual DbSet<TaxCategory> TaxCategory { get; set; }
        public virtual DbSet<TaxClassMaster> TaxClassMaster { get; set; }
        public virtual DbSet<TaxMaster> TaxMaster { get; set; }
        public virtual DbSet<TaxRateTaxClass> TaxRateTaxClass { get; set; }
        public virtual DbSet<TaxSetOffEntryMaster> TaxSetOffEntryMaster { get; set; }
        public virtual DbSet<TblMst> TblMst { get; set; }
        public virtual DbSet<Tds16aemailRecords> Tds16aemailRecords { get; set; }
        public virtual DbSet<TdsclassMaster> TdsclassMaster { get; set; }
        public virtual DbSet<Tdsdetails> Tdsdetails { get; set; }
        public virtual DbSet<Tdsmaster> Tdsmaster { get; set; }
        public virtual DbSet<TempCartonDetail> TempCartonDetail { get; set; }
        public virtual DbSet<TempCartonHeader> TempCartonHeader { get; set; }
        public virtual DbSet<TestCaseMaster> TestCaseMaster { get; set; }
        public virtual DbSet<TestCaseResult> TestCaseResult { get; set; }
        public virtual DbSet<TestLibraryDetail> TestLibraryDetail { get; set; }
        public virtual DbSet<TestLibraryHeader> TestLibraryHeader { get; set; }
        public virtual DbSet<TicketMaterialConsumption> TicketMaterialConsumption { get; set; }
        public virtual DbSet<TimeReqdMaster> TimeReqdMaster { get; set; }
        public virtual DbSet<TimeSheet> TimeSheet { get; set; }
        public virtual DbSet<TimeSlot> TimeSlot { get; set; }
        public virtual DbSet<TimeSlotMaster> TimeSlotMaster { get; set; }
        public virtual DbSet<TimesheetReimbursement> TimesheetReimbursement { get; set; }
        public virtual DbSet<ToolReturnDetail> ToolReturnDetail { get; set; }
        public virtual DbSet<ToolReturnHeader> ToolReturnHeader { get; set; }
        public virtual DbSet<Top10WidgetMaster> Top10WidgetMaster { get; set; }
        public virtual DbSet<TrackNotification> TrackNotification { get; set; }
        public virtual DbSet<TransAllocationLines> TransAllocationLines { get; set; }
        public virtual DbSet<TransAppntLines> TransAppntLines { get; set; }
        public virtual DbSet<TransApprovalLines> TransApprovalLines { get; set; }
        public virtual DbSet<TransCashLines> TransCashLines { get; set; }
        public virtual DbSet<TransChargeLine> TransChargeLine { get; set; }
        public virtual DbSet<TransErrLog> TransErrLog { get; set; }
        public virtual DbSet<TransGllines> TransGllines { get; set; }
        public virtual DbSet<TransHeader> TransHeader { get; set; }
        public virtual DbSet<TransHistory> TransHistory { get; set; }
        public virtual DbSet<TransSettlementLines> TransSettlementLines { get; set; }
        public virtual DbSet<TransTaxLines> TransTaxLines { get; set; }
        public virtual DbSet<TransTypeList> TransTypeList { get; set; }
        public virtual DbSet<TransporterCall> TransporterCall { get; set; }
        public virtual DbSet<TransporterMaster> TransporterMaster { get; set; }
        public virtual DbSet<TrnwiseDocAppr> TrnwiseDocAppr { get; set; }
        public virtual DbSet<Udfmaster> Udfmaster { get; set; }
        public virtual DbSet<UnitMaster> UnitMaster { get; set; }
        public virtual DbSet<UnitTypeMaster> UnitTypeMaster { get; set; }
        public virtual DbSet<Uomconversion> Uomconversion { get; set; }
        public virtual DbSet<Uommaster> Uommaster { get; set; }
        public virtual DbSet<UserCategoryMaster> UserCategoryMaster { get; set; }
        public virtual DbSet<UserClass> UserClass { get; set; }
        public virtual DbSet<UserClassRelation> UserClassRelation { get; set; }
        public virtual DbSet<UserContactInfo> UserContactInfo { get; set; }
        public virtual DbSet<UserGroup> UserGroup { get; set; }
        public virtual DbSet<UserGroupOld> UserGroupOld { get; set; }
        public virtual DbSet<UserGroupRelation> UserGroupRelation { get; set; }
        public virtual DbSet<UserGroupRelationOld> UserGroupRelationOld { get; set; }
        public virtual DbSet<UserHistory> UserHistory { get; set; }
        public virtual DbSet<UserLeaveSetting> UserLeaveSetting { get; set; }
        public virtual DbSet<UserMaster> UserMaster { get; set; }
        public virtual DbSet<UserPhotos> UserPhotos { get; set; }
        public virtual DbSet<UserSetUp> UserSetUp { get; set; }
        public virtual DbSet<UserSetting> UserSetting { get; set; }
        public virtual DbSet<UserSettingTrail> UserSettingTrail { get; set; }
        public virtual DbSet<UserSkillApproval> UserSkillApproval { get; set; }
        public virtual DbSet<UserSkillTransaction> UserSkillTransaction { get; set; }
        public virtual DbSet<UserTarget> UserTarget { get; set; }
        public virtual DbSet<UserWidgetCombination> UserWidgetCombination { get; set; }
        public virtual DbSet<UserWiseActivityPlanner> UserWiseActivityPlanner { get; set; }
        public virtual DbSet<UserWiseSkillSet> UserWiseSkillSet { get; set; }
        public virtual DbSet<UserWiseWeeklyOff> UserWiseWeeklyOff { get; set; }
        public virtual DbSet<UsrCtrlMaster> UsrCtrlMaster { get; set; }
        public virtual DbSet<UsrCtrlProp> UsrCtrlProp { get; set; }
        public virtual DbSet<VatretentionEntry> VatretentionEntry { get; set; }
        public virtual DbSet<VehicleMaster> VehicleMaster { get; set; }
        public virtual DbSet<VehicleTypeMaster> VehicleTypeMaster { get; set; }
        public virtual DbSet<VendorContractChargeDetail> VendorContractChargeDetail { get; set; }
        public virtual DbSet<VendorContractDetail> VendorContractDetail { get; set; }
        public virtual DbSet<VendorContractHeader> VendorContractHeader { get; set; }
        public virtual DbSet<VendorContractQtyRateBreakUp> VendorContractQtyRateBreakUp { get; set; }
        public virtual DbSet<VenueMaster> VenueMaster { get; set; }
        public virtual DbSet<VersionMaster> VersionMaster { get; set; }
        public virtual DbSet<ViConfiguration> ViConfiguration { get; set; }
        public virtual DbSet<ViRequestLogMaster> ViRequestLogMaster { get; set; }
        public virtual DbSet<VouExPt> VouExPt { get; set; }
        public virtual DbSet<VouMaster> VouMaster { get; set; }
        public virtual DbSet<VouPanel> VouPanel { get; set; }
        public virtual DbSet<VouPanelField> VouPanelField { get; set; }
        public virtual DbSet<VouPanelFieldValue> VouPanelFieldValue { get; set; }
        public virtual DbSet<VouPeriodDetail> VouPeriodDetail { get; set; }
        public virtual DbSet<VouPrintProg> VouPrintProg { get; set; }
        public virtual DbSet<VouRecuReq> VouRecuReq { get; set; }
        public virtual DbSet<VouTransHist> VouTransHist { get; set; }
        public virtual DbSet<VouUcprop> VouUcprop { get; set; }
        public virtual DbSet<VsApplErpmenu1> VsApplErpmenu1 { get; set; }
        public virtual DbSet<VsApplMenu> VsApplMenu { get; set; }
        public virtual DbSet<VsDitab> VsDitab { get; set; }
        public virtual DbSet<Vskeys> Vskeys { get; set; }
        public virtual DbSet<VslDailyScheduleCreation> VslDailyScheduleCreation { get; set; }
        public virtual DbSet<VslPaCalendarExceptions> VslPaCalendarExceptions { get; set; }
        public virtual DbSet<VslPaCalendarMaster> VslPaCalendarMaster { get; set; }
        public virtual DbSet<VslPaDayType> VslPaDayType { get; set; }
        public virtual DbSet<VslPaExceptionTypes> VslPaExceptionTypes { get; set; }
        public virtual DbSet<VslPaResourceType> VslPaResourceType { get; set; }
        public virtual DbSet<VslPaStandardCalendarOptions> VslPaStandardCalendarOptions { get; set; }
        public virtual DbSet<VslRptGridStyle> VslRptGridStyle { get; set; }
        public virtual DbSet<VslRptScheduleXml> VslRptScheduleXml { get; set; }
        public virtual DbSet<VslSchedulerInfo> VslSchedulerInfo { get; set; }
        public virtual DbSet<VslSchedulerReportDefinitions> VslSchedulerReportDefinitions { get; set; }
        public virtual DbSet<VslSchedulerType> VslSchedulerType { get; set; }
        public virtual DbSet<VslSourceType> VslSourceType { get; set; }
        public virtual DbSet<VslVcAttachmentMaster> VslVcAttachmentMaster { get; set; }
        public virtual DbSet<VslVcFtpcredentials> VslVcFtpcredentials { get; set; }
        public virtual DbSet<VslVcMailDataMaster> VslVcMailDataMaster { get; set; }
        public virtual DbSet<VsnxtNos> VsnxtNos { get; set; }
        public virtual DbSet<VwbDesignationMaster> VwbDesignationMaster { get; set; }
        public virtual DbSet<VwbEmpLeaveMaintenance> VwbEmpLeaveMaintenance { get; set; }
        public virtual DbSet<VwbPeriodMaster> VwbPeriodMaster { get; set; }
        public virtual DbSet<VwbUserMaster> VwbUserMaster { get; set; }
        public virtual DbSet<VwbYearMaster> VwbYearMaster { get; set; }
        public virtual DbSet<WareHouseMaster> WareHouseMaster { get; set; }
        public virtual DbSet<WarehourseStockMgmt> WarehourseStockMgmt { get; set; }
        public virtual DbSet<WarrantyItems> WarrantyItems { get; set; }
        public virtual DbSet<WarrantyMaster> WarrantyMaster { get; set; }
        public virtual DbSet<WarrantyRegisterMaster> WarrantyRegisterMaster { get; set; }
        public virtual DbSet<WidgetMaster> WidgetMaster { get; set; }
        public virtual DbSet<WiplocationMaster> WiplocationMaster { get; set; }
        public virtual DbSet<WorkFlowStgActivity> WorkFlowStgActivity { get; set; }
        public virtual DbSet<WorkerMaster> WorkerMaster { get; set; }
        public virtual DbSet<WorkflowMaster> WorkflowMaster { get; set; }
        public virtual DbSet<WorkflowStage> WorkflowStage { get; set; }
        public virtual DbSet<YarnMaster> YarnMaster { get; set; }
        public virtual DbSet<ZoneMaster> ZoneMaster { get; set; }

        // Unable to generate entity type for table 'dbo.CRM_GradeSlab'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.BnkSwftMst'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CollectionReceiptMasterBk'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TransFinDivUptdate'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.AgencyInvoice'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CustVendorMaster_Bkp2019'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_SuspContactDtls1'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Shiptomaster_Bkp2019'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_ExecutiveActivitySummary_BKP2019'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.AmndOrderExecutionDetails'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.PaymentAdviceHdr08Jul'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.PaymentAdviceDtl08Jul'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.GPSLocation'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.fymasterBk'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_CallList_09_08_16'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.BQM_TimeSlotMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.EDMExecuteLog'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.PrimaryContact'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_CallList_Backup'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TempEntity'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TaxRule'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ProjectBudget'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.MeetingReminder'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SMSGateway'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TrackSolution'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_AllCounts'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.BackupSoschedule'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.BQT_CustomerFeedBack'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CommonWordSupport'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TaxPriority'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CommProcDtl_06June'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.BQM_BanquetOrderTypes'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.BillingType'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.QueuingListMODetail'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TARGET_Bkp'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SpamMailList'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.RRF_CVStages'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CommSummary_06June'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SOFtr'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.RRF_CVSkills'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.BQT_CommunicationTrail'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.PeriodicBill'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CVStage'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.QueuingListBuffer'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ActivityBKP'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CommProcHdr_06June'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CustVendorPayeeName'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.RRF_CVList'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.DocumentPrintingParameter'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.GRNFrghtDtls'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_MailinglistDtl_Rule'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SalesChargeDetail'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TargetGroupMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.RRF_Stage'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.FGRejHeader'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_DistrictMAster_BKP'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TargetHeadMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.BiometricDownloadSettings'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_TalukaMaster_BKP'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CostCentreMaster_Bksep2018'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TargetGroups'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CashLine_Backup'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CustVendorMaster_BKK'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.EnvAssociation'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SalesChargeTaxLine'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SOShortCloseHdr'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TransBk'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SOShortCloseDtl'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.PIDtl'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ShiftedMIS'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TransBKK'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TDS26AS'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Transse'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TDS26Summ'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SalesChalanList'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_Lead_MsgHeader'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.GSTR2'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.AmndPaymentTerms'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_Lead_MailAttachment'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.GSTR2AMatches'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.GSTR2AProcessedSummary'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.InsuranceProd'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TINShedPC'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.GSTR2Summary'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.backupordertypemaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.InsuranceProdCountry'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.AppDBProjectList'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.DocApprSourceType'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.backupCodeMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.InsuranceProdSegment'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.AppProjectVssPaths'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.backupCodePartMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ProjectwiseActivityType'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CollectionDiscount'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SampleType'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.AppStartUpScripts'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TicketRequestCheck'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CommPercentStructure'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.WorkSpaceStructure'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ShipPkgDtls'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ActivityAssignmentHistory'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.EDMExecuteHdr'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.DesignationMst'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRMCategoryMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.AllocationLines'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.DailyNxtNos'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.FinCodeMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_Priority'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.backupTargetValue'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.FinNxtNos'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CashLines'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.DocApprLevel'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Enquiry_MsgHeader'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Transallocationlines2603'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.backupTargetValue1'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.HeaderAllocIssue'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.EdmObjVerChangeDefData'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SetUpInfo'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.MailNotReceivedNew'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.AllocGLLines'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ByProductsDetail'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.sch_ReportDefinition_bkp'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.DocApprMthd'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.MstDetailInfoForQC'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Cash15Jan18'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.sch_ReportDefinition'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.HSNMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Enquiry_MailAttachment'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TransCashLines18May2018'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_CountryMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.NotificationRead'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.InvoiceHeader_Bk10Jul'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.DocApprValRng'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_SuspectSource'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.EntitySERelation'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SalesHeader_Bk10Jul'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.InvoiceHeader'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.StockDetails20170221'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.DateTable'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.IOUReminderDtl'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.MM_RegionalMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ERPParameters'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.NxtNos2016'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.PutAwayBuffer'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.OrderTypeWiseDLL'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.AssetHistory'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CommissionStructure'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_ExecutiveActivitySummaryStartDate'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Client_Conveyance_Master'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TrgChart'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SundryPurAdvance'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CustVendorMaster_BK'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.PLFrghtDtls'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SOReimbursementMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.tab_DeptWiseQualityPerf'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CompanyDetails'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.rfqheader_BKP'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Proposal_MsgHeader'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.DtScripts'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.POAdvance'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.RFQDetail_BKP'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Tab_ProdSE1'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.rfqheader'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.GRNPacketList'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TransPeriodicBill'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TDS26AS_BK'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ROWLocalAuthPermissionDtl'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ProdEntry'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ItemDescLogic'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.EnquiryHeader'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TargetValueBkp'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_ExecutiveActivitySummary_BKP2805'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.VI_EmailMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_ExecutiveActivitySummary_BKP'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ShpFrghtDtls'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.EventDetails'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.PanelControlsInfo'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.MM_PaymentDetail'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Sessionmaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.PanelDetails'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.AccountMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CashLines_BankRecpt16Jan'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_ExecutiveActivitySummaryBkp2019'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.OrderTypeMilestone'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_ExecutiveActivitySummaryPractice2019'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_CallListMilestone'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.stockdetails1'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.VsApplERPMenu1_temp'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_SuspectMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.NxtNos_1'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.RptDBInfo'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Tab_ProdSE'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_ExecutiveActivitySummary_BackUP3108'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ProjectActCharges'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.FIRMLIST'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CreditNoteMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.NxtNos_1201'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.bksalesdtltaxline'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CallListRequest'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.EmpShft'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.PriceListwiseSpotIncentive'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ScheduleLine'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ActivityStatus'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ScheduleLineDtl'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CycleHeaderMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ActivityTypeMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ScheduleMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.call_Associates'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.UserWiseRating'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Appointments'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.VehicleType'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SurveyQuestion'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_SuspectMasterBkp'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.mobileActHistory'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SurveyAnswer'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ShareDetails'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.VersionInfo'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SurveyDetail'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ShareMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_ExecutiveActivitySummaryBAckUP109'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Temp8JWI'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SurveyType'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.PaymentAdviceDtlTest'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ShipToMaster_BK'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.VI_RequestLogActivities'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.QuestionType'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.IndentDetail'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.RemndSchLog'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ShiftCh'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_ExecutiveActivitySummary1SepNew'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.VMSBestPractices'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_ExpertiseDetails'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_CSSQuestionMaster_BKP'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SalesWidgetMasterbK'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.VMSEntry'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.DocApprSourceType230419'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_ExecutiveActivitySummaryMonaliFinal'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ASNHeader'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.AssetHeader'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SoContractdtltaxline'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TransGLLineskk'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TargerGroups'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TicketRouteInfo'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.App_ReleaseDetails'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.OpenconnCount'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.PaymentAdviceDtl'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.PaymentAdviceHdr'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.BioMetricINOut'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ASNDetail'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_OrderDetails'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_PaymentDetails'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TDS26Summ_BK'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.cdm_temp'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TblViewDependency'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.EmployeeAdvance'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ChkOpnCalUpdt'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.VoucherRepeat'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.PriceListHdr'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.UserMobileCallRecord'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Call_Comments'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TargetValue'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.sch_SourceType'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.LendProd'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ForgotPassword'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CreditMRADetails'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TrgGrpVal'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.sch_SchedulerSettings'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.LendProdCountry'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.OrderTypeMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ReleasePathTestToProd'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.DocApprMthd1'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ChequeMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.FIFOBreakage'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.FamilyMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CodeMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TrgFieldVal'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.sch_SetCombineReportCode'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.LendProdSegment'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ChatRoomDetails_bkp'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.DocApprValRng1'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.sch_SetCombineReportSubject'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.MRPProjectionConstraints'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ChatRoomMaster_bkp'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.DocApprLevel1'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.DBPatchRunner'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.VSL_VC_MailCredential'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Codes'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.sch_ScheduleXml'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.PriceListDtl'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ChatMessages_bkp'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SalesWidgetMasterBkp10sept19'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.VSL_VSMS_SMSGateway'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TransModes'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.sch_SchedulerType'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Soheader7march'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.VATPurchaseDtls'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Sch_DailyCreation'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Dailycallstatusummary'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.VATSalesDtls'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Email_ApprovalResponse'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Sch_Info'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CalendarMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TransRectAllocToSE'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SOContractHeader'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.PRDCalendarMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ProspectTerritoryMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SOContractDetails'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.KOTHeaderHistory'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.KOTDetailHistory'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ComProOct'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ASNFrghtDtls'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.Venodor_GroupRelation'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.PerSonalDocument_Attachments'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ActionMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TreeCode'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.BankLedger'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ProductionLineMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.BiometricMachineConfig'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.EmailPrjHoursBooked'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ToolIssueHeader'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.temp'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.AmendLogHistory'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_CallProductDetails'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ATS_MailAttachmant'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.GRNEntryReference'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SOHeader_BKPMar2019'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ATS_MsgHeader'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ToolIssueDetail'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.VendPurGroupRela'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SOChargeDetail'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.LftOvrPCtoMOHdr'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.WRTemp14Ju'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.VatSummaryInfo'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.WRTemp14Ju2'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.LftOvrPCtoMODtl'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.AmndPOHeader'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.tempcomm'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.EmployeeMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ActivityTrail'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_ExecutiveActivitySummary_BKP1'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.IndentHeader'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.MOMUSERWISENOTES'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_CSSQuestionMaster_bk'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ChatMessagesbkp'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_ExecutiveActivitySummary_BKP111'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.AssetMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_ExecutiveActivitySummary'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.AmndPODetail'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.backupsodetail'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.RG23Header'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.AmndPODetailTaxLine'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.dateloginnew'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ExpenseMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.AssetTypeMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.RG23Details'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.AmndPOSchedule'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.HolidayInfo'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.RPTUSERTHEME'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.IntTab'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SERelation'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SODetailPeriodic'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.POChargeDetail'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TimeShift'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.LicenseInfo'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.BOBST_TextConversion'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_CSSHeaderBK'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ItemPurchaseGroup'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CommProcHdr_bk'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TSQLLog'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_CSSdetailBK'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_CallSystemRating'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.QuotationChargeDetail'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ExternalLinks'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CommProcDtl_bk'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CRM_CSSdetailBK1'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ResourceDetails'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ManageLeaveMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.OverDueCalls'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ItemLOTAdditionalInfo'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SOHeaderbkp1'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TDS26Summ_bkk'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.VoucherListDefinition'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.NxtNos'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.UserLog'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.datelogin'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TDS26AS_bkk'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.QuotationChargeTaxLine'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SOChargeTaxLine'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.DocTabInfo'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ActivityAffectedCustomer'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CollectionReceiptMaster'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SalesDtlTaxLine'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.StockDetails20170223'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.cycylefortes'. Please see the warning messages.

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
           //     optionsBuilder.UseSqlServer("Data Source=192.168.1.207\\vsltest;Initial Catalog=EkatmERP;User Id=developer;password=devl@per#2019;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity<AcGroupMaster>(entity =>
            {
                entity.Property(e => e.AcGroupMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AcGroupName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AcGroupNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AcGroupType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AltGroupAcNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Credit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Debit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Lora)
                    .HasColumnName("LORA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PL)
                    .HasColumnName("P_L")
                    .HasColumnType("numeric(1, 0)");

                entity.Property(e => e.ParentGr)
                    .HasColumnName("ParentGR")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<AccessHistory>(entity =>
            {
                entity.Property(e => e.AccessHistoryId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccessDt).HasColumnType("datetime");

                entity.Property(e => e.ModuleName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TaskName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AccountGroupMaster>(entity =>
            {
                entity.HasKey(e => e.AccGrpMasterId);

                entity.HasIndex(e => e.AccGrpMasterId)
                    .HasName("UQ__AccountGroupMast__66F53242")
                    .IsUnique();

                entity.HasIndex(e => e.RecId)
                    .HasName("UQ__AccountGroupMast__67E9567B")
                    .IsUnique();

                entity.Property(e => e.AccGrpMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccGrpCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AccGrpDesc)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AccGrpType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AlternateGrp)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Credit).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Debit).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Lora)
                    .HasColumnName("LORA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ParentGrp)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SchMstRefId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityAllocationMaster>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK_ActivityAllocationMaster_1");

                entity.HasIndex(e => new { e.UserMasterId, e.IssuedTo, e.SourceId })
                    .HasName("SourceId");

                entity.HasIndex(e => new { e.UnitId, e.IssuedTo, e.IsApproval, e.IsApproved, e.Status })
                    .HasName("Isapproval");

                entity.HasIndex(e => new { e.UnitId, e.IssuedTo, e.Status, e.EndDate, e.PriorityId })
                    .HasName("priorityid");

                entity.HasIndex(e => new { e.UnitId, e.IssuedTo, e.Status, e.PriorityId, e.EndDate })
                    .HasName("<Name of Missing Index, sysname,>");

                entity.HasIndex(e => new { e.ActivityId, e.UnitId, e.ActivityTypeId, e.StartDate, e.EndDate, e.DueDate, e.IssuedTo, e.Status, e.IsDeleted, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.HoursRequired, e.ProposedUserId, e.PriorityId, e.ActualStartDate, e.ActualEndDate, e.IsApproval, e.IsApproved, e.ChargedAmount, e.ApprovedAmount, e.IsChargable, e.ApprovalDt, e.PeriodicBillId, e.CompletionIntimate, e.AssignedCount, e.AttachmentName, e.SourceType, e.SourceId, e.UserMasterId })
                    .HasName("UserMasterId");

                entity.HasIndex(e => new { e.ActivityId, e.ActivityName, e.UserMasterId, e.ActivityTypeId, e.StartDate, e.EndDate, e.DueDate, e.IssuedTo, e.Status, e.Remarks, e.IsDeleted, e.AddedBy, e.AddedDt, e.ModifiedDt, e.HoursRequired, e.PriorityId, e.ActualStartDate, e.ActualEndDate, e.IsApproval, e.IsApproved, e.ChargedAmount, e.ApprovedAmount, e.IsChargable, e.Reason, e.ApprovalDt, e.CompletionIntimate, e.AssignedCount, e.SourceType, e.SourceId, e.ExpectedCompleteDate, e.ActivityCode, e.ExecutionAmount, e.ReassignedBy, e.ReassignedDt, e.UnitId })
                    .HasName("UnitId");

                entity.HasIndex(e => new { e.ActivityName, e.UserMasterId, e.UnitId, e.ActivityTypeId, e.StartDate, e.EndDate, e.DueDate, e.IssuedTo, e.Status, e.Remarks, e.IsDeleted, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.HoursRequired, e.ProposedUserId, e.PriorityId, e.ActualStartDate, e.ActualEndDate, e.IsApproval, e.IsApproved, e.ChargedAmount, e.ApprovedAmount, e.IsChargable, e.Reason, e.ApprovalDt, e.PeriodicBillId, e.CompletionIntimate, e.AssignedCount, e.AttachmentName, e.SourceType, e.SourceId, e.ExpectedCompleteDate, e.ActivityCode, e.ExecutionAmount, e.ActualCompletionDate, e.ReassignedBy, e.ReassignedDt, e.PksubActivityId, e.ParentActId, e.IsSubActivity, e.TicketCategory, e.WarrantyCode, e.IsCompActPresent, e.CompletionActId, e.TktCustReportedBy, e.TktCustApprovedBy, e.WarrantyId, e.IsFromContract, e.ActivityRecId, e.ActivityId })
                    .HasName("ActivityId");

                entity.HasIndex(e => new { e.ActivityId, e.ActivityName, e.UserMasterId, e.UnitId, e.ActivityTypeId, e.StartDate, e.EndDate, e.DueDate, e.IssuedTo, e.Remarks, e.IsDeleted, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.HoursRequired, e.ProposedUserId, e.PriorityId, e.ActualStartDate, e.ActualEndDate, e.IsApproval, e.IsApproved, e.ChargedAmount, e.ApprovedAmount, e.IsChargable, e.Reason, e.ApprovalDt, e.PeriodicBillId, e.CompletionIntimate, e.AssignedCount, e.AttachmentName, e.SourceType, e.SourceId, e.ExpectedCompleteDate, e.ActivityCode, e.ExecutionAmount, e.ActualCompletionDate, e.ReassignedBy, e.ReassignedDt, e.PksubActivityId, e.IsSubActivity, e.TicketCategory, e.WarrantyCode, e.IsCompActPresent, e.CompletionActId, e.TktCustReportedBy, e.TktCustApprovedBy, e.WarrantyId, e.IsFromContract, e.ActivityRecId, e.LastReminderDt, e.ClosureReminderCount, e.DateOfResumtion, e.StatusAliasId, e.AttachmentContent, e.IsUnplanned, e.ServiceChargetoCust, e.ProjectMasterId, e.Rating, e.ReasonForowRating, e.Fyyear, e.ParentActId, e.Status })
                    .HasName("ParentActId");

                entity.HasIndex(e => new { e.ActivityId, e.ActivityName, e.UserMasterId, e.UnitId, e.ActivityTypeId, e.StartDate, e.EndDate, e.DueDate, e.Remarks, e.IsDeleted, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.HoursRequired, e.ProposedUserId, e.ActualStartDate, e.ActualEndDate, e.IsApproval, e.IsApproved, e.ChargedAmount, e.ApprovedAmount, e.IsChargable, e.Reason, e.ApprovalDt, e.PeriodicBillId, e.CompletionIntimate, e.AssignedCount, e.AttachmentName, e.SourceType, e.SourceId, e.ExpectedCompleteDate, e.ActivityCode, e.ExecutionAmount, e.ActualCompletionDate, e.ReassignedBy, e.ReassignedDt, e.PksubActivityId, e.ParentActId, e.IsSubActivity, e.TicketCategory, e.WarrantyCode, e.IsCompActPresent, e.CompletionActId, e.TktCustReportedBy, e.TktCustApprovedBy, e.WarrantyId, e.IsFromContract, e.ActivityRecId, e.LastReminderDt, e.ClosureReminderCount, e.DateOfResumtion, e.StatusAliasId, e.AttachmentContent, e.IsUnplanned, e.ServiceChargetoCust, e.ProjectMasterId, e.Rating, e.ReasonForowRating, e.Fyyear, e.IssuedTo, e.Status, e.PriorityId })
                    .HasName("IssuedTo");

                entity.HasIndex(e => new { e.ActivityId, e.ProjectMasterId, e.ActivityName, e.UserMasterId, e.UnitId, e.ActivityTypeId, e.StartDate, e.DueDate, e.Remarks, e.IsDeleted, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.HoursRequired, e.ProposedUserId, e.PriorityId, e.ActualStartDate, e.ActualEndDate, e.IsApproval, e.IsApproved, e.ChargedAmount, e.ApprovedAmount, e.IsChargable, e.Reason, e.ApprovalDt, e.PeriodicBillId, e.CompletionIntimate, e.AssignedCount, e.AttachmentName, e.SourceType, e.SourceId, e.ExpectedCompleteDate, e.ActivityCode, e.ExecutionAmount, e.ActualCompletionDate, e.ReassignedBy, e.ReassignedDt, e.PksubActivityId, e.ParentActId, e.IsSubActivity, e.TicketCategory, e.WarrantyCode, e.IsCompActPresent, e.CompletionActId, e.TktCustReportedBy, e.TktCustApprovedBy, e.WarrantyId, e.IsFromContract, e.ActivityRecId, e.LastReminderDt, e.ClosureReminderCount, e.DateOfResumtion, e.StatusAliasId, e.AttachmentContent, e.IsUnplanned, e.ServiceChargetoCust, e.Rating, e.ReasonForowRating, e.Fyyear, e.Status, e.IssuedTo, e.EndDate })
                    .HasName("Status");

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityName).HasColumnType("nvarchar(max)");

                entity.Property(e => e.ActivityRecId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ActualCompletionDate).HasColumnType("datetime");

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApprovalDt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AssignedCount)
                    .HasColumnName("Assigned_Count")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.AttachmentContent).HasColumnType("varchar(max)");

                entity.Property(e => e.AttachmentName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChargedAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ClosureReminderCount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompletionActId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CompletionIntimate)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DateOfResumtion).HasColumnType("datetime");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExecutionAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ExpectedCompleteDate)
                    .HasColumnName("ExpectedComplete_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fyyear)
                    .HasColumnName("FYYear")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HoursRequired)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsApproved)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsCompActPresent)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsFromContract).HasMaxLength(1);

                entity.Property(e => e.IsSubActivity)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsUnplanned)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IssuedTo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LastReminderDt).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ParentActId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodicBillId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PksubActivityId)
                    .HasColumnName("PKSubActivityId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PriorityId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ProposedUserId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Rating).HasColumnName("rating");

                entity.Property(e => e.Reason).HasMaxLength(250);

                entity.Property(e => e.ReasonForowRating)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReassignedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReassignedDt).HasColumnType("datetime");

                entity.Property(e => e.Remarks).HasColumnType("nvarchar(max)");

                entity.Property(e => e.ServiceId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SourceType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.StatusAliasId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TicketCategory)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TktCustApprovedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TktCustReportedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UnitId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.WarrantyCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.WarrantyId).HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityAllocationMaster1>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK_ActivityAllocationMaster_2");

                entity.HasIndex(e => new { e.ActivityId, e.Status })
                    .HasName("NonClusteredIndex-20160404-195908");

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityRecId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityTypeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ActualCompletionDate).HasColumnType("datetime");

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApprovalDt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AssignedCount)
                    .HasColumnName("Assigned_Count")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.AttachmentContent).HasColumnType("image");

                entity.Property(e => e.AttachmentName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChargedAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompletionActId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CompletionIntimate)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExecutionAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ExpectedCompleteDate)
                    .HasColumnName("ExpectedComplete_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.HoursRequired)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsApproved)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsCompActPresent)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsFromContract).HasMaxLength(1);

                entity.Property(e => e.IsSubActivity)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IssuedTo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ParentActId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodicBillId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PksubActivityId)
                    .HasColumnName("PKSubActivityId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PriorityId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProposedUserId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Reason).HasMaxLength(250);

                entity.Property(e => e.ReassignedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReassignedDt).HasColumnType("datetime");

                entity.Property(e => e.SourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SourceType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TicketCategory)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TktCustApprovedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TktCustReportedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UnitId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.WarrantyCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.WarrantyId).HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityAttachements>(entity =>
            {
                entity.HasKey(e => e.PkAttachId);

                entity.HasIndex(e => new { e.PkAttachId, e.AttachGuid, e.AttachFilename, e.Path, e.ActivityId, e.AddedBy, e.ModifiedBy, e.ModifiedDt, e.AddedDt, e.Gpsid, e.AttachmentType, e.Sourcetype, e.SourceId, e.IsDeleted })
                    .HasName("Source");

                entity.Property(e => e.PkAttachId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AttachFilename).HasColumnType("varchar(max)");

                entity.Property(e => e.AttachGuid)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AttachmentCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AttachmentDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AttachmentType)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Gpsid)
                    .HasColumnName("GPSId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Latitude)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Longitude)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Path).HasColumnType("varchar(max)");

                entity.Property(e => e.SourceId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sourcetype)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ActivityMaster>(entity =>
            {
                entity.Property(e => e.ActivityMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExeResponsibility)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ActivityPlanner>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.Property(e => e.RecordId).ValueGeneratedNever();

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");

                entity.Property(e => e.ActivityEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityStartDate).HasColumnType("datetime");

                entity.Property(e => e.AssignTo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateRemark)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IssuedTo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LocationName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PassCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Album>(entity =>
            {
                entity.Property(e => e.AlbumId)
                    .HasColumnName("AlbumID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AlbumName).HasMaxLength(500);

                entity.Property(e => e.DefaultPhotId).HasColumnName("DefaultPhotID");
            });

            modelBuilder.Entity<AlertHistory>(entity =>
            {
                entity.HasKey(e => e.PkAlertHistoryId)
                    .HasName("PK__Alert_Hi__0945846CBE8B995E");

                entity.ToTable("Alert_History");

                entity.Property(e => e.PkAlertHistoryId)
                    .HasColumnName("PkAlert_HistoryId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Addeddate)
                    .HasColumnName("addeddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeviceId)
                    .HasColumnName("deviceId")
                    .HasMaxLength(240)
                    .IsUnicode(false);

                entity.Property(e => e.FromUserId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Message)
                    .HasColumnName("message")
                    .IsUnicode(false);

                entity.Property(e => e.SenderId)
                    .HasColumnName("SENDER_ID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServerApiKey)
                    .HasColumnName("SERVER_API_KEY")
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ToUserId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmndPaymentSchedule>(entity =>
            {
                entity.Property(e => e.AmndPaymentScheduleId)
                    .HasColumnName("AmndPaymentScheduleID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AmndSoheaderId)
                    .HasColumnName("AmndSOHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BankName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Branch)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ChequeDate).HasColumnType("datetime");

                entity.Property(e => e.ChequeNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClearanceDate).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmndSocommission>(entity =>
            {
                entity.ToTable("AmndSOCommission");

                entity.Property(e => e.AmndSocommissionId)
                    .HasColumnName("AmndSOCommissionId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AgentId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AmndSoheaderId)
                    .HasColumnName("AmndSOHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Commision).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CommisionOn)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CommisionPer).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Lcno)
                    .HasColumnName("LCNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Lcvalue)
                    .HasColumnName("LCValue")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<AmndSodetail>(entity =>
            {
                entity.ToTable("AmndSODetail");

                entity.Property(e => e.AmndSodetailId)
                    .HasColumnName("AmndSODetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AmndSoheaderId)
                    .HasColumnName("AmndSOHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ConsigneeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeliveryDt).HasColumnType("datetime");

                entity.Property(e => e.DeliveryTerms)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Destination)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FlineAmt)
                    .HasColumnName("FLineAmt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FlineCharges)
                    .HasColumnName("FLineCharges")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FlineTaxes)
                    .HasColumnName("FLineTaxes")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FlineTotal)
                    .HasColumnName("FLineTotal")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Forwarder)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InsuranceCompany)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LineAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineCharges).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineTaxes).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineTotal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NoOfPack).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NoOfPairs).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Phone)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Rate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SeqNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SodetailStatus)
                    .HasColumnName("SODetailStatus")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxClassMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Transporter)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransporterAddress)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WareHouseId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AmndSodetailTaxLine>(entity =>
            {
                entity.ToTable("AmndSODetailTaxLine");

                entity.Property(e => e.AmndSodetailTaxLineId)
                    .HasColumnName("AmndSODetailTaxLineId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AmndSodetailId)
                    .HasColumnName("AmndSODetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.BaseAmntPercForTaxCalc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BaseAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BaseAmountType)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LineNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SeqNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxPc)
                    .HasColumnName("TaxPC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<AmndSoheader>(entity =>
            {
                entity.ToTable("AmndSOHeader");

                entity.Property(e => e.AmndSoheaderId)
                    .HasColumnName("AmndSOHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Approver)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Awbno)
                    .HasColumnName("AWBNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConsigneeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreditDays).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreditTerm)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CurrencyMasterId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CustOrderPodt)
                    .HasColumnName("CustOrderPODt")
                    .HasColumnType("datetime");

                entity.Property(e => e.CustOrderPono)
                    .HasColumnName("CustOrderPONo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerRfpno)
                    .HasColumnName("CustomerRFPNO")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryTerms)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Destination)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EventFrmDt).HasColumnType("datetime");

                entity.Property(e => e.EventToDt).HasColumnType("datetime");

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Forwarder)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InsuranceCompany)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsReqMo).HasColumnName("IsReqMO");

                entity.Property(e => e.MachineGroupMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mocreated).HasColumnName("MOCreated");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NoOfPersons).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NotifyId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.OrderTypeMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Program)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RatePerPerson).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RefRecId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RevisionNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SalesEngg)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Sodate)
                    .HasColumnName("SODate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SoheaderStatus)
                    .HasColumnName("SOHeaderStatus")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Sono)
                    .HasColumnName("SONo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Sotype)
                    .HasColumnName("SOtype")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TimeSlotId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TotalOrderQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotalOrderValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Transporter)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransporterAddress)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<AmndSoschedule>(entity =>
            {
                entity.ToTable("AmndSOSchedule");

                entity.Property(e => e.AmndSoscheduleId)
                    .HasColumnName("AmndSOScheduleId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActualMoqty)
                    .HasColumnName("ActualMOQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AmndSodetailId)
                    .HasColumnName("AmndSODetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CrtnAlloctdQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ItemProcessId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Moqty)
                    .HasColumnName("MOQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NoOfPack).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.PlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.QtyWithYield).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SailingDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleDate).HasColumnType("datetime");

                entity.Property(e => e.ShipmentQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SoscheduleStatus)
                    .HasColumnName("SOScheduleStatus")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppLevel>(entity =>
            {
                entity.Property(e => e.AppLevelId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AppLoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AppMethodId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AppName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AppRole)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppMaster>(entity =>
            {
                entity.HasKey(e => e.AppId)
                    .HasName("PK__AppMaste__8E2CF7F927458CD8");

                entity.Property(e => e.AppId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Appname).HasMaxLength(50);

                entity.Property(e => e.IconFile).HasMaxLength(50);

                entity.Property(e => e.Isdeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.WebUrl).HasColumnName("WebURL");
            });

            modelBuilder.Entity<AppMethod>(entity =>
            {
                entity.Property(e => e.AppMethodId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.MethodCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValueFrom).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValueTo).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<AppReleaseHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId)
                    .HasName("PK_ReleaseHistory");

                entity.ToTable("App_ReleaseHistory");

                entity.Property(e => e.HistoryId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.Condition)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Designelement).HasMaxLength(50);

                entity.Property(e => e.Isdeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Precaution)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Prerequistes).IsUnicode(false);

                entity.Property(e => e.ReviewedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ReviewedDt).HasColumnType("datetime");

                entity.Property(e => e.ReviewedRemark).IsUnicode(false);

                entity.Property(e => e.Steps).IsUnicode(false);

                entity.Property(e => e.SyncInfo).IsUnicode(false);

                entity.Property(e => e.UploadFtp).HasColumnName("UploadFTP");

                entity.Property(e => e.Userlevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Version).HasMaxLength(50);
            });

            modelBuilder.Entity<AppRootCauseAnalysis>(entity =>
            {
                entity.HasKey(e => e.RootCauseId)
                    .HasName("PK_RootCauseAnalysis");

                entity.ToTable("App_RootCauseAnalysis");

                entity.Property(e => e.RootCauseId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.Attachment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Isdeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RootCause)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Solution)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SyncInfo).IsUnicode(false);

                entity.Property(e => e.Userlevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ApplicationMaster>(entity =>
            {
                entity.HasKey(e => e.PkappMaster)
                    .HasName("PK__Applicat__09B25803883D83B2");

                entity.Property(e => e.PkappMaster)
                    .HasColumnName("PKAppMaster")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AppDesc)
                    .HasColumnName("App_Desc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApplicationName)
                    .HasColumnName("Application_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SenderId)
                    .HasColumnName("SENDER_ID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServerApiKey)
                    .HasColumnName("SERVER_API_KEY")
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ApplicationSetUp>(entity =>
            {
                entity.HasKey(e => e.PkappSetUpId);

                entity.Property(e => e.PkappSetUpId)
                    .HasColumnName("PKAppSetUpId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AdnimMail)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BranchNameAs)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ChangePassDays).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DisableAccNotLog).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DisableAccWrongPass).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsMaxGroupRights)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsUserMailCompl)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LstPassCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PassCharacters)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PassMaxLength).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.PassMinLength).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.PhotoType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Photosize)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ApportionmentClass>(entity =>
            {
                entity.Property(e => e.ApportionmentClassId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AppntCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AppntDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ApportionmentDetail>(entity =>
            {
                entity.Property(e => e.ApportionmentDetailId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApportionmentMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CostCentreId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Percentage).HasColumnType("numeric(9, 3)");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ApportionmentDtl>(entity =>
            {
                entity.Property(e => e.ApportionmentDtlId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApportionmentMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CostCentreId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Percentage).HasColumnType("numeric(9, 3)");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ApportionmentMaster>(entity =>
            {
                entity.Property(e => e.ApportionmentMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApportionmentClassId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EffFrom).HasColumnType("datetime");

                entity.Property(e => e.EffTo).HasColumnType("datetime");

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArchActivityAllocationMaster>(entity =>
            {
                entity.HasKey(e => e.ActivityArchiveId)
                    .HasName("PK__ArchActi__6B7903410C78E2BC");

                entity.Property(e => e.ActivityArchiveId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityRecId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ActualCompletionDate).HasColumnType("datetime");

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApprovalDt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ArchiveHistoryId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedCount)
                    .HasColumnName("Assigned_Count")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.AttachmentContent).IsUnicode(false);

                entity.Property(e => e.AttachmentName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChargedAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ClosureReminderCount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompletionActId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CompletionIntimate)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DateOfResumtion).HasColumnType("datetime");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExecutionAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ExpectedCompleteDate)
                    .HasColumnName("ExpectedComplete_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.HoursRequired)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsApproved)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsCompActPresent)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsFromContract).HasMaxLength(1);

                entity.Property(e => e.IsSubActivity)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsUnplanned)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IssuedTo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LastReminderDt).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ParentActId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodicBillId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PksubActivityId)
                    .HasColumnName("PKSubActivityId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PriorityId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ProposedUserId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Rating).HasColumnName("rating");

                entity.Property(e => e.Reason).HasMaxLength(250);

                entity.Property(e => e.ReasonForowRating)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ReassignedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReassignedDt).HasColumnType("datetime");

                entity.Property(e => e.SourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SourceType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.StatusAliasId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TicketCategory)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TktCustApprovedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TktCustReportedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UnitId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.WarrantyCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.WarrantyId).HasMaxLength(50);
            });

            modelBuilder.Entity<ArchActivityAssignmentHistory>(entity =>
            {
                entity.HasKey(e => e.ActivityAssignmentArchiveId)
                    .HasName("PK__ArchActi__CE6E42824D38A728");

                entity.Property(e => e.ActivityAssignmentArchiveId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityAssignmentHistoryId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityRecId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ActualCompletionDate).HasColumnType("datetime");

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApprovalDt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ArchiveHistoryId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedCount)
                    .HasColumnName("Assigned_Count")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ChargedAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompletionActId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CompletionIntimate)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DateOfResumtion).HasColumnType("datetime");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ExecutionAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ExpectedCompleteDate)
                    .HasColumnName("ExpectedComplete_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.HoursRequired)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsApproved)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsCompActPresent)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsFromContract).HasMaxLength(1);

                entity.Property(e => e.IsSubActivity)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsUnplanned)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IssuedTo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ParentActId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodicBillId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PksubActivityId)
                    .HasColumnName("PKSubActivityId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PriorityId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ProposedUserId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Reason).HasMaxLength(250);

                entity.Property(e => e.ReassignedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReassignedDt).HasColumnType("datetime");

                entity.Property(e => e.SourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SourceType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.StatusAliasId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TicketCategory)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TktCustApprovedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TktCustReportedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UnitId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.WarrantyCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.WarrantyId).HasMaxLength(50);
            });

            modelBuilder.Entity<ArchActivityAttachements>(entity =>
            {
                entity.HasKey(e => e.ArchAttachmentId)
                    .HasName("PK__ArchActi__65CE8C9B8924074B");

                entity.Property(e => e.ArchAttachmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ArchiveHistoryId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AttachFilename).IsUnicode(false);

                entity.Property(e => e.AttachGuid)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AttachmentType)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Gpsid)
                    .HasColumnName("GPSId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Path).IsUnicode(false);

                entity.Property(e => e.PkAttachId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sourcetype)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArchActivityTrail>(entity =>
            {
                entity.HasKey(e => e.ArchiveTrailId)
                    .HasName("PK__ArchActi__31031D36A2F1BC26");

                entity.Property(e => e.ArchiveTrailId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Action)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityTrailId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ArchiveHistoryId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedCount)
                    .HasColumnName("Assigned_Count")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ForUserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Narration).IsUnicode(false);

                entity.Property(e => e.NxtActivityStatus).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PreActivityStatus).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PrecedingActivityTrailId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SourceType)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Status).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<ArchCrmCallList>(entity =>
            {
                entity.HasKey(e => e.ArchCallId)
                    .HasName("PK__Arch_CRM__2C17F49A2C1711E9");

                entity.ToTable("Arch_CRM_CallList");

                entity.Property(e => e.ArchCallId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Alias)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AppoinmentTransferReasonId).HasMaxLength(36);

                entity.Property(e => e.ArchiveHistoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AssignToChannelId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.BackOfficeExecutiveId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Boeid)
                    .HasColumnName("BOEID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Borrowings).HasColumnType("numeric(38, 0)");

                entity.Property(e => e.CallAgainReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallCloseApprover)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallCloseDetails)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CallCloseReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallId)
                    .IsRequired()
                    .HasMaxLength(36);

                entity.Property(e => e.CallRatingChangeReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallRescheduleReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallStart).HasColumnType("datetime");

                entity.Property(e => e.CallStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallTransferReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Campaign)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelSeid)
                    .HasColumnName("ChannelSEId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Compaign)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactId).HasMaxLength(36);

                entity.Property(e => e.ContractDocIdurl)
                    .HasColumnName("ContractDocIDUrl")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ContractResponsibility)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContractReviewRequired)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ContractStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false);

                entity.Property(e => e.CurrencyValue)
                    .HasMaxLength(38)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentCallOwner)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerBudget).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CustomerBudgetSanctioned)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerVisitAssignedTo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerVisitDateTime).HasColumnType("datetime");

                entity.Property(e => e.DateHotCallChanged).HasColumnType("datetime");

                entity.Property(e => e.DateWarmCallChanged).HasColumnType("datetime");

                entity.Property(e => e.DemoAssignedTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DemoCompleteDatetime).HasColumnType("datetime");

                entity.Property(e => e.DemoCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DemoDatetime).HasColumnType("datetime");

                entity.Property(e => e.DemoReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DemoRequired)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DemoStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DueDays).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.DurationOfClass)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmailMsgId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.EmpReferenceId).HasMaxLength(50);

                entity.Property(e => e.ExpectedCloserDate).HasColumnType("datetime");

                entity.Property(e => e.ExpectedPrize).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ExpectedValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FkplantId)
                    .IsRequired()
                    .HasColumnName("FKPlantId")
                    .HasMaxLength(36);

                entity.Property(e => e.Icp)
                    .HasColumnName("ICP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdeaAboutPayment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ipfb)
                    .HasColumnName("IPFB")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsNoGstin)
                    .HasColumnName("IsNoGSTIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Isclose)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LatestRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ManagementComments)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.MeetingCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Network).HasColumnType("numeric(38, 0)");

                entity.Property(e => e.NextAction)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NextActionDateTime).HasColumnType("datetime");

                entity.Property(e => e.NoOfDaysInWeek)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OrderLostApprover)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderLostDetails)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OrderLostReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderPono)
                    .HasColumnName("OrderPONo")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderPovalue)
                    .HasColumnName("OrderPOValue")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrderReceivedDate).HasColumnType("datetime");

                entity.Property(e => e.OrderRecievedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderReferenceId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderRegradeReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderRegradeReasonDetails)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OrderRegrteApprover)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderTypeMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.OrderValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OutcomeCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OverdueDays).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ParticipateInSyndications)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pat)
                    .HasColumnName("PAT")
                    .HasColumnType("numeric(38, 0)");

                entity.Property(e => e.Pbt)
                    .HasColumnName("PBT")
                    .HasColumnType("numeric(38, 0)");

                entity.Property(e => e.PrebidAssignedTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PrebidCompleteDatetime).HasColumnType("datetime");

                entity.Property(e => e.PrebidDocId)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PrebidRequired)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PrebidStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PrefferedTime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PrefferedTutor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PrepaymentSecuterization)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PresalesExecutiveId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PresalesSupportDetails)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PresalesSupportDocId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PresalesSupportDueDate).HasColumnType("datetime");

                entity.Property(e => e.PresalesSupportRequired)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PresalesSupportStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PresalesSupportedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProspectId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PscompletedDatetime)
                    .HasColumnName("PSCompletedDatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.QuotationAssignedTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.QuotationDate).HasColumnType("datetime");

                entity.Property(e => e.QuotationDoc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationRequest)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Rating)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false);

                entity.Property(e => e.ReshedulingVerified)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Seid)
                    .HasColumnName("SEId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SoheaderId)
                    .HasColumnName("SOHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SouceId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Source)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SpecialPrizeApprover)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SpecialPrizeRequest)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SpecialPrizeStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TeleCallCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TotalHoursSpent)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArchCrmCollectionCallList>(entity =>
            {
                entity.HasKey(e => e.ArchCollectionCallId)
                    .HasName("PK__Arch_CRM__DA646882952F12B7");

                entity.ToTable("Arch_CRM_CollectionCallList");

                entity.Property(e => e.ArchCollectionCallId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ArchiveHistoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.BranchName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CallRescheduleReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallStart).HasColumnType("datetime");

                entity.Property(e => e.CallStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallTransferReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Campaign)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CollectMode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CollectionCallId)
                    .IsRequired()
                    .HasMaxLength(36);

                entity.Property(e => e.ContactId).HasMaxLength(36);

                entity.Property(e => e.CurrentCallOwner)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DifferenceAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DifferenceReason).IsUnicode(false);

                entity.Property(e => e.FkplantId)
                    .IsRequired()
                    .HasColumnName("FKPlantId")
                    .HasMaxLength(36);

                entity.Property(e => e.InstrNo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Instrdate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsBalTds)
                    .HasColumnName("IsBalTDS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Isclose)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LatestRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NextAction)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NextActionDateTime).HasColumnType("datetime");

                entity.Property(e => e.OutcomeCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PresalesExecutiveId)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PresalesSupportDetails)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PresalesSupportDueDate).HasColumnType("datetime");

                entity.Property(e => e.PresalesSupportRequired)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PromiseChangeReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PromiseDate).HasColumnType("date");

                entity.Property(e => e.ProspectId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Seid)
                    .HasColumnName("SEId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SouceId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Source)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tdsamount)
                    .HasColumnName("TDSAmount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalHoursSpent)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArchCrmFeedBackCallList>(entity =>
            {
                entity.HasKey(e => e.ArchFeedbackCallId)
                    .HasName("PK__Arch_CRM__3F77C41BDDADF265");

                entity.ToTable("Arch_CRM_FeedBackCallList");

                entity.Property(e => e.ArchFeedbackCallId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ArchiveHistoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.BackOfficeExecutiveId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallAgainReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallCloseDetails).IsUnicode(false);

                entity.Property(e => e.CallCloseReason).HasMaxLength(36);

                entity.Property(e => e.CallRescheduleReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallStart).HasColumnType("datetime");

                entity.Property(e => e.CallTransferReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Campaign)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactId).HasMaxLength(36);

                entity.Property(e => e.CurrentCallOwner)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FeedBackCallId)
                    .IsRequired()
                    .HasMaxLength(36);

                entity.Property(e => e.FeedbackCompletedDateTime).HasColumnType("datetime");

                entity.Property(e => e.FkCssFormsId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkFamilyId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkplantId)
                    .IsRequired()
                    .HasColumnName("FKPlantId")
                    .HasMaxLength(36);

                entity.Property(e => e.Isclose)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LatestRemark).IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NextAction)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NextActionDateTime).HasColumnType("datetime");

                entity.Property(e => e.OutcomeCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ProspectId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Seid)
                    .HasColumnName("SEId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SouceId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Source)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalHoursSpent)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArchCrmSuspContactDtls>(entity =>
            {
                entity.HasKey(e => e.ArchSuspContactDtlsId)
                    .HasName("PK__Arch_CRM__E189BD5A57C614FE");

                entity.ToTable("Arch_CRM_SuspContactDtls");

                entity.Property(e => e.ArchSuspContactDtlsId)
                    .HasColumnName("ArchSuspContactDtlsID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AnniversaryDate).HasColumnType("datetime");

                entity.Property(e => e.ArchiveHistoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.BuyPlan)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPersonDept)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DateofBirth).HasColumnType("datetime");

                entity.Property(e => e.Designation)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmailId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FksuspectId)
                    .HasColumnName("FKSuspectId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MaritalStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PksuspContactDtlsId)
                    .IsRequired()
                    .HasColumnName("PKSuspContactDtlsID")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Qualification)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SpouseName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Telephone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.WhatsAppNo)
                    .HasMaxLength(13)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArchCrmSuspProdctDtls>(entity =>
            {
                entity.HasKey(e => e.ArchProspectProductDtlsId)
                    .HasName("PK__Arch_CRM__C4EC2CAD2E175C8D");

                entity.ToTable("Arch_CRM_SuspProdctDtls");

                entity.Property(e => e.ArchProspectProductDtlsId)
                    .HasColumnName("ArchProspectProductDtlsID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ArchiveHistoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkproductId)
                    .HasColumnName("FKProductId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FksuspectId)
                    .HasColumnName("FKSuspectId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PkprospectProductDtlsId)
                    .IsRequired()
                    .HasColumnName("PKProspectProductDtlsID")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PurchaseMode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Uomid)
                    .HasColumnName("UOMId")
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArchCrmSuspectMaster>(entity =>
            {
                entity.HasKey(e => e.ArchSuspectId)
                    .HasName("PK__Arch_CRM__C0300286D9F62D87");

                entity.ToTable("Arch_CRM_SuspectMaster");

                entity.Property(e => e.ArchSuspectId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ArchiveHistoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Borrowings).HasColumnType("numeric(38, 0)");

                entity.Property(e => e.BusinessDetails)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyUrl)
                    .HasColumnName("CompanyURL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CurrencyDesc)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CurrencyMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.District)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.EdjQualificationSales)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EdjQualificationTech)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailMsgId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FirmAlias)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirmName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FirmTitle)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FkbusiSegmentId)
                    .HasColumnName("FKBusiSegmentId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkcityId)
                    .HasColumnName("FKCityId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkconsigneeId)
                    .HasColumnName("FKConsigneeId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkcountryId)
                    .HasColumnName("FKCountryId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkcustomerId)
                    .HasColumnName("FKCustomerId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkenqSourceId)
                    .HasColumnName("FKEnqSourceId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkplantId)
                    .IsRequired()
                    .HasColumnName("FKPlantId")
                    .HasMaxLength(36);

                entity.Property(e => e.FkshipToMasterId)
                    .HasColumnName("FKShipToMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkstateId)
                    .HasColumnName("FKStateId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkterritoryId)
                    .HasColumnName("FKTerritoryId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FuturePlanDate).HasColumnType("datetime");

                entity.Property(e => e.Gstcode)
                    .HasColumnName("GSTCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Gststate)
                    .HasColumnName("GSTState")
                    .HasMaxLength(36);

                entity.Property(e => e.IsLocked)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LastCssdate)
                    .HasColumnName("LastCSSDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastCssrating)
                    .HasColumnName("LastCSSRating")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.LastShipmentDate).HasColumnType("datetime");

                entity.Property(e => e.LastSodate)
                    .HasColumnName("LastSODate")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastSoscheduleDate)
                    .HasColumnName("LastSOScheduleDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.LeadGivenByid)
                    .HasColumnName("LeadGivenBYId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LeadStatusChangedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LeadStatusChangedDate).HasColumnType("datetime");

                entity.Property(e => e.LockFor)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LockTillDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MoveToArchieveBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MoveToArchieveDt).HasColumnType("datetime");

                entity.Property(e => e.MoveToArchieveNotes)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MoveToArchieveReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Network).HasColumnType("numeric(38, 0)");

                entity.Property(e => e.NoOfEmployees).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.NoOfOffices).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.OrderStatusChangedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderStatusChangedDate).HasColumnType("datetime");

                entity.Property(e => e.Panno)
                    .HasColumnName("PANNo")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pat)
                    .HasColumnName("PAT")
                    .HasColumnType("numeric(38, 0)");

                entity.Property(e => e.Pbt)
                    .HasColumnName("PBT")
                    .HasColumnType("numeric(38, 0)");

                entity.Property(e => e.PksuspectId)
                    .IsRequired()
                    .HasColumnName("PKSuspectId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ProspectStatusChangedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProspectStatusChangedDate).HasColumnType("datetime");

                entity.Property(e => e.ProspectType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Rating)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Sex)
                    .HasColumnName("sex")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SuspectCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SuspectReferenceId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Tanno)
                    .HasColumnName("TANNo")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TannoName)
                    .HasColumnName("TANNoName")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Tinno)
                    .HasColumnName("TINNo")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Turnover).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Val1)
                    .HasColumnName("val1")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Val10)
                    .HasColumnName("val10")
                    .IsUnicode(false);

                entity.Property(e => e.Val2)
                    .HasColumnName("val2")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Val3)
                    .HasColumnName("val3")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Val4)
                    .HasColumnName("val4")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Val5)
                    .HasColumnName("val5")
                    .IsUnicode(false);

                entity.Property(e => e.Val6)
                    .HasColumnName("val6")
                    .IsUnicode(false);

                entity.Property(e => e.Val7)
                    .HasColumnName("val7")
                    .IsUnicode(false);

                entity.Property(e => e.Val8)
                    .HasColumnName("val8")
                    .IsUnicode(false);

                entity.Property(e => e.Val9)
                    .HasColumnName("val9")
                    .IsUnicode(false);

                entity.Property(e => e.Vatno)
                    .HasColumnName("VATNo")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Village)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArchiveHistory>(entity =>
            {
                entity.Property(e => e.ArchiveHistoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Addeddt).HasColumnType("datetime");

                entity.Property(e => e.Count)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.HistoryStatus).IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.StartTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<AsnchargeDetail>(entity =>
            {
                entity.ToTable("ASNChargeDetail");

                entity.Property(e => e.AsnchargeDetailId)
                    .HasColumnName("ASNChargeDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AsndetailId)
                    .HasColumnName("ASNDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AsnheaderId)
                    .HasColumnName("ASNHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CalcMethod)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ChargeAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ChrgMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PochargeDetailId)
                    .HasColumnName("POChargeDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PoheaderId)
                    .HasColumnName("POHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxClassMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AsnchargeTaxLine>(entity =>
            {
                entity.ToTable("ASNChargeTaxLine");

                entity.Property(e => e.AsnchargeTaxLineId)
                    .HasColumnName("ASNChargeTaxLineId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AsnchargeDetailId)
                    .HasColumnName("ASNChargeDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AsndetailId)
                    .HasColumnName("ASNDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AsnheaderId)
                    .HasColumnName("ASNHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.BaseAmntPercForTaxCalc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BaseAmount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MinAmntAllowedForTaxCalc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OppositeInvoicedGl)
                    .HasColumnName("OppositeInvoicedGL")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PayableAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PochargeDetailId)
                    .HasColumnName("POChargeDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PoheaderId)
                    .HasColumnName("POHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivableAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SeqNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxCalcId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxPc)
                    .HasColumnName("TaxPC")
                    .HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<Asncharges>(entity =>
            {
                entity.HasKey(e => e.AsnchargeId);

                entity.ToTable("ASNCharges");

                entity.Property(e => e.AsnchargeId)
                    .HasColumnName("ASNChargeId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Amt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AsnheaderId)
                    .HasColumnName("ASNHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ChargeMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Per).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<AsndetailTaxLine>(entity =>
            {
                entity.ToTable("ASNDetailTaxLine");

                entity.Property(e => e.AsndetailTaxLineId)
                    .HasColumnName("ASNDetailTaxLineId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AsndetailId)
                    .HasColumnName("ASNDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.BaseAmntPercForTaxCalc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BaseAmount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LineNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SeqNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxPc)
                    .HasColumnName("TaxPC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<AssetDetail>(entity =>
            {
                entity.Property(e => e.AssetDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AcquisitionValue)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AssetHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AssetNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DepreciationValue)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LocationDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Rate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ReturnedValue)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");
            });

            modelBuilder.Entity<AssetRegister>(entity =>
            {
                entity.Property(e => e.AssetRegisterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AsOfDate).HasColumnType("datetime");

                entity.Property(e => e.AssetAccNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AssetGroup)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AssetNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CapitalizationDate).HasColumnType("datetime");

                entity.Property(e => e.ErprefNo)
                    .HasColumnName("ERPRefNo")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsCapitalized)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LocationDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LotNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LotQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PurchaseDate).HasColumnType("datetime");

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Rate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AttachementPath>(entity =>
            {
                entity.HasKey(e => e.DirectoryId);

                entity.Property(e => e.Foldername).IsUnicode(false);

                entity.Property(e => e.Path).IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AttandanceApprovalLog>(entity =>
            {
                entity.HasKey(e => e.PkattendanceApprovalLogId);

                entity.HasIndex(e => e.FkAttendanceMasterId)
                    .HasName("IDX_FKAttMstId");

                entity.Property(e => e.PkattendanceApprovalLogId)
                    .HasColumnName("PKAttendanceApprovalLogId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AttendanceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkAttendanceMasterId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AttendanceCodeMaster>(entity =>
            {
                entity.HasKey(e => e.PkattendanceCodeMasterId)
                    .HasName("PKAttendanceCodeMasterId");

                entity.Property(e => e.PkattendanceCodeMasterId)
                    .HasColumnName("PKAttendanceCodeMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AttendanceCodeDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AttendanceCodeValue)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsPresentInAttendanceApproval)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.IsPresentInUserManagement)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");
            });

            modelBuilder.Entity<AttendanceMaster>(entity =>
            {
                entity.HasKey(e => e.PkattendanceId);

                entity.HasIndex(e => new { e.Date, e.FkemployeeId, e.IsApproved })
                    .HasName("IDX_FKEmpIdIsAppr");

                entity.Property(e => e.PkattendanceId)
                    .HasColumnName("PKAttendanceId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AbsentDay).HasColumnType("numeric(9, 2)");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AttendanceCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.FkemployeeId)
                    .HasColumnName("FKEmployeeId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsAutomated).HasDefaultValueSql("('True')");

                entity.Property(e => e.LeaveCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LeaveDay).HasColumnType("numeric(9, 2)");

                entity.Property(e => e.OtMin).HasColumnName("OT_MIN");

                entity.Property(e => e.OtMinoffDay)
                    .HasColumnName("OT_MINoffDay")
                    .HasColumnType("numeric(9, 2)");

                entity.Property(e => e.PresentDay).HasColumnType("numeric(9, 2)");
            });

            modelBuilder.Entity<AuditActivityAllocation>(entity =>
            {
                entity.HasKey(e => e.AuditActAllocId);

                entity.Property(e => e.AuditActAllocId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityAllocMstId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AuditFindingId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AuditPlanId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AuditFindings>(entity =>
            {
                entity.HasKey(e => e.AuditFindingId);

                entity.Property(e => e.AuditFindingId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AuditPlanId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AuditPointId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Nctype)
                    .HasColumnName("NCType")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RootCause)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AuditParticipants>(entity =>
            {
                entity.HasKey(e => e.AuditParticipantId)
                    .HasName("PK_AuditPlanAuditees");

                entity.Property(e => e.AuditParticipantId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AuditPlanId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsAuditee)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId).HasMaxLength(50);
            });

            modelBuilder.Entity<AuditPlanMaster>(entity =>
            {
                entity.HasKey(e => e.AuditPlanId);

                entity.Property(e => e.AuditPlanId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AuditProcessId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ToDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<AuditPointsMaster>(entity =>
            {
                entity.HasKey(e => e.AuditPointId);

                entity.Property(e => e.AuditPointId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AuditPointDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AuditProcessId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AuditProcessMaster>(entity =>
            {
                entity.HasKey(e => e.AuditProcessId);

                entity.Property(e => e.AuditProcessId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AuditProcessDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<AuthRequest>(entity =>
            {
                entity.HasKey(e => e.PkauthRquestId);

                entity.Property(e => e.PkauthRquestId)
                    .HasColumnName("PKAuthRquestId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FkapproverId)
                    .HasColumnName("FKApproverId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FktaskId)
                    .HasColumnName("FKTaskId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkuserMastId)
                    .HasColumnName("FKUserMastId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RequStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Authentication>(entity =>
            {
                entity.HasIndex(e => new { e.AccessorType, e.AccessorId, e.FunctionId })
                    .HasName("IX_Authentication_1");

                entity.Property(e => e.AuthenticationId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccessRole)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AccessorId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AccessorType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt)
                    .HasColumnName("addedDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FunctionId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<BankDetails>(entity =>
            {
                entity.Property(e => e.BankDetailsId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BankMasterId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ChequeBookEndNo).HasColumnType("numeric(12, 0)");

                entity.Property(e => e.ChequeBookLeaf).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.ChequeBookStartNo).HasColumnType("numeric(12, 0)");

                entity.Property(e => e.InUse)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IssueDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BankMaster>(entity =>
            {
                entity.Property(e => e.BankMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccountMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AccountName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Balance)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BankCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BnkAccountNo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Branch)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChequeBookPrintProgram)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ChkClrDtColumn)
                    .HasColumnType("numeric(9, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ChkNoColumn)
                    .HasColumnType("numeric(9, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ContactNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreditNo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CtDtNo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DateColumn1)
                    .HasMaxLength(23)
                    .IsUnicode(false);

                entity.Property(e => e.DateColumn2)
                    .HasMaxLength(23)
                    .IsUnicode(false);

                entity.Property(e => e.DateFormat)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DebitNo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EndLine)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Ifsccode)
                    .HasColumnName("IFSCCode")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InstrumentColumn)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InterestRate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsBank)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MaxBal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.MinBal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Narration)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Pin)
                    .HasColumnName("PIN")
                    .HasColumnType("numeric(10, 0)");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.RecordOrder)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.RemarkColumn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StartLine)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StrtRw)
                    .HasColumnType("numeric(9, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TransactionType)
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BillHeader>(entity =>
            {
                entity.Property(e => e.BillHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BillAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BillDate).HasColumnType("datetime");

                entity.Property(e => e.BillNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.VouRefId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BinAcrcyDtl>(entity =>
            {
                entity.Property(e => e.BinAcrcyDtlId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BinAcrcyHdrId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Confirmed)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Fifo)
                    .HasColumnName("FIFO")
                    .HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LocationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Lotno)
                    .HasColumnName("LOTNo")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NewLocId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Qty)
                    .HasColumnName("qty")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.StockDetailsId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(9, 0)");
            });

            modelBuilder.Entity<BinAcrcyHdr>(entity =>
            {
                entity.Property(e => e.BinAcrcyHdrId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.ForMthYr).HasColumnType("datetime");

                entity.Property(e => e.FrmLoc)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LocCount).HasColumnType("numeric(5, 0)");

                entity.Property(e => e.LocSummerised)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ToLoc)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.WrkDays).HasColumnType("numeric(4, 0)");
            });

            modelBuilder.Entity<BioMetricData>(entity =>
            {
                entity.Property(e => e.BioMetricDataId)
                    .HasColumnName("BioMetricDataID")
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.InOutStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IsVerified)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Latitude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Location)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Longitude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MachineNo)
                    .HasColumnName("MachineNO")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PresentDate).HasColumnType("datetime");

                entity.Property(e => e.PresentTime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Bomdetail>(entity =>
            {
                entity.ToTable("BOMDetail");

                entity.Property(e => e.BomdetailId)
                    .HasColumnName("BOMDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AllowMultiple)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.BomheaderId)
                    .HasColumnName("BOMHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Bomsequence)
                    .HasColumnName("BOMSequence")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComponentId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CummuYeildAtOperationSeq)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.EffectiveFrom).HasColumnType("datetime");

                entity.Property(e => e.EffectiveTo).HasColumnType("datetime");

                entity.Property(e => e.FutureMatlCostLower).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FutureMatlCostThis).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemClassificationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Mandatory)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Margin)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PositionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.QtyPer).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QtyReqd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StdMatlCostLower).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdMatlCostThis).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UsedAtOperationSeq)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Variable)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Bomheader>(entity =>
            {
                entity.ToTable("BOMHeader");

                entity.Property(e => e.BomheaderId)
                    .HasColumnName("BOMHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Bomcode)
                    .HasColumnName("BOMCode")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Bomcontains)
                    .HasColumnName("BOMContains")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BomonClass).HasColumnName("BOMonClass");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FutureMfgMtrlCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FuturePurMtrlCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FutureScrapRealization).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.HeaderDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemClassificationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.QtyPer).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdMfgMtrlCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdPurMtrlCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdScrapRealization).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<BoxTypeMaster>(entity =>
            {
                entity.Property(e => e.BoxTypeMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Box)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BoxCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.BoxName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BoxWeight).HasColumnType("numeric(10, 0)");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(10, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Lbhbreadth)
                    .HasColumnName("LBHBreadth")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Lbhheight)
                    .HasColumnName("LBHHeight")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Lbhlength)
                    .HasColumnName("LBHLength")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(10, 0)");
            });

            modelBuilder.Entity<BqmAddressMaster>(entity =>
            {
                entity.ToTable("BQM_AddressMaster");

                entity.Property(e => e.BqmAddressMasterId)
                    .HasColumnName("BQM_AddressMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FaxNo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MobileNo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OfficeNo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Pincode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ResidentialNo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BqmBanquetClientMaster>(entity =>
            {
                entity.HasKey(e => e.BqmBanquetClientId);

                entity.ToTable("BQM_BanquetClientMaster");

                entity.Property(e => e.BqmBanquetClientId)
                    .HasColumnName("BQM_BanquetClientId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Address)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ContactNo)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.CustVendorMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ToBeDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TypeOfClient)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BqmBanquetContactInfo>(entity =>
            {
                entity.ToTable("BQM_BanquetContactInfo");

                entity.Property(e => e.BqmBanquetContactInfoId)
                    .HasColumnName("BQM_BanquetContactInfoId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BqmBanquetClientId)
                    .HasColumnName("BQM_BanquetClientId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ContPerName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactNo)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.ContactType)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Designation)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InfluentialLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDefault)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsVwbloginAllowed)
                    .HasColumnName("IsVWBLoginAllowed")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LoginId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BqmEventMaster>(entity =>
            {
                entity.ToTable("BQM_EventMaster");

                entity.Property(e => e.BqmEventMasterId)
                    .HasColumnName("BQM_EventMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ContactLines)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EventName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EventTypeMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.InstructionMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<BqmInstructionMaster>(entity =>
            {
                entity.ToTable("BQM_InstructionMaster");

                entity.Property(e => e.BqmInstructionMasterId)
                    .HasColumnName("BQM_InstructionMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.InstructionDetails).IsUnicode(false);

                entity.Property(e => e.InstructionName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDefault)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OrderTypeMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<BqmSectionItemClass>(entity =>
            {
                entity.ToTable("BQM_SectionItemClass");

                entity.Property(e => e.BqmSectionItemClassId)
                    .HasColumnName("BQM_SectionItemClassId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BqmSectionMasterId)
                    .HasColumnName("BQM_SectionMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemClassificationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<BqmSectionMaster>(entity =>
            {
                entity.ToTable("BQM_SectionMaster");

                entity.Property(e => e.BqmSectionMasterId)
                    .HasColumnName("BQM_SectionMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SectionName)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SectionSeq)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<BqtEnquiry>(entity =>
            {
                entity.ToTable("BQT_Enquiry");

                entity.Property(e => e.BqtEnquiryId)
                    .HasColumnName("BQT_EnquiryId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.BanquentClientId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EnquiryNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EventFromDate).HasColumnType("datetime");

                entity.Property(e => e.EventToDate).HasColumnType("datetime");

                entity.Property(e => e.EventType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.HandledBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MobileNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NoOfPersons).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Potential)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TimeSlot)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.VenueMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BqtQuotationDtl>(entity =>
            {
                entity.ToTable("BQT_QuotationDtl");

                entity.Property(e => e.BqtQuotationDtlId)
                    .HasColumnName("BQT_QuotationDtlId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AdditionalDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BalQty)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BqtQuotationHeaderId)
                    .HasColumnName("BQT_QuotationHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DiscAmount)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.DiscPc)
                    .HasColumnName("DiscPC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.FdiscAmount)
                    .HasColumnName("FDiscAmount")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.FlineAmt)
                    .HasColumnName("FLineAmt")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FlineCharges)
                    .HasColumnName("FLineCharges")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FlineTaxes)
                    .HasColumnName("FLineTaxes")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FlineTotal)
                    .HasColumnName("FLineTotal")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPurchaseGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LineAmt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.LineCharges).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.LineTaxes).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.LineTotal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MachineGroupMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.QuotStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationType)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Rate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SeqNo).HasColumnType("numeric(5, 0)");

                entity.Property(e => e.TaxClassMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TimeSlot)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.WareHouseId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BqtQuotationDtlMedia>(entity =>
            {
                entity.ToTable("BQT_QuotationDtlMedia");

                entity.Property(e => e.BqtQuotationDtlMediaId)
                    .HasColumnName("BQT_QuotationDtlMediaId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BqtQuotationDtlId)
                    .IsRequired()
                    .HasColumnName("BQT_QuotationDtlId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BqtQuotationHeaderId)
                    .HasColumnName("BQT_QuotationHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DurationUnit)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(1900))");

                entity.Property(e => e.FfinalPkgCostForDuration)
                    .HasColumnName("FFinalPkgCostForDuration")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FfinalPkgCostMonth)
                    .HasColumnName("FFinalPkgCostMonth")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FinalPkgCostForDuration).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FinalPkgCostMonth).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FtotalPkgCost)
                    .HasColumnName("FTotalPkgCost")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.JingleLength).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NoOfJingles)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OfferedRate).HasColumnType("numeric(5, 0)");

                entity.Property(e => e.ReleaseCustEndTime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseCustStartTime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseStdEndTime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseStdStartTime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Repetations)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RepetitionsEveryMinutes).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SpecialComments).IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1)/(1))/(1900))");

                entity.Property(e => e.TotalPkgCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalRepetitionsForSelectedLoc).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalRepetitionsForSelectedLocForCamp).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<BqtQuotationFtr>(entity =>
            {
                entity.ToTable("BQT_QuotationFtr");

                entity.Property(e => e.BqtQuotationFtrId)
                    .HasColumnName("BQT_QuotationFtrId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BomdetailId)
                    .HasColumnName("BOMDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.BqtQuotationDtlId)
                    .HasColumnName("BQT_QuotationDtlId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Rate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<BqtQuotationHeader>(entity =>
            {
                entity.ToTable("BQT_QuotationHeader");

                entity.Property(e => e.BqtQuotationHeaderId)
                    .HasColumnName("BQT_QuotationHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.BanquentClientId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.BasicAmt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BasicAmtFc)
                    .HasColumnName("BasicAmtFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.BqtEnquiryId)
                    .HasColumnName("BQT_EnquiryId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CallId).HasMaxLength(36);

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactMobile)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Costpermonth).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Costperspot).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Currency)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryTerms)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocType)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EnqStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EnquiryNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EventFromDate).HasColumnType("datetime");

                entity.Property(e => e.EventToDate).HasColumnType("datetime");

                entity.Property(e => e.EventType)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ExRate)
                    .HasColumnType("numeric(9, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.Freight)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GrossAmount)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.GrossAmountFc)
                    .HasColumnName("GrossAmountFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.HandledBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MachineGroupMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.MobileNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NetAmt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NetAmtFc)
                    .HasColumnName("NetAmtFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.NextVersion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NoOfPersons).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PriceListId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.QuotValid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.QuotationDate).HasColumnType("datetime");

                entity.Property(e => e.QuotationNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RatePerPerson).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Reference)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks).IsUnicode(false);

                entity.Property(e => e.RequisitionerId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SourceType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TermsConditions)
                    .HasColumnType("ntext")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TimeSlot)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TotChargeAmt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotChargeAmtFc)
                    .HasColumnName("TotChargeAmtFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.TotDiscAmt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotDiscAmtFc)
                    .HasColumnName("TotDiscAmtFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.TotTaxAmt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotTaxAmtFc)
                    .HasColumnName("TotTaxAmtFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.TotalCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WayOfCommunication)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BranchMaster>(entity =>
            {
                entity.HasKey(e => e.PkbranchId)
                    .HasName("PK_BranchMaster_1");

                entity.Property(e => e.PkbranchId)
                    .HasColumnName("PKBranchId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BranchCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BranchName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Equota).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FkPlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkparentBranch)
                    .HasColumnName("FKParentBranch")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InstallationId)
                    .HasColumnName("InstallationID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LongLeavQuata).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.MinConductorReq).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MinDriCumConduReq).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MinDriverReq).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MinEmpRequired).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Quota)
                    .HasColumnName("quota")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TotalEmployee).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<BrandMaster>(entity =>
            {
                entity.HasKey(e => e.BrandCode);

                entity.Property(e => e.BrandCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BrandDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<BusinessTripAdvanceDetail>(entity =>
            {
                entity.HasKey(e => e.PkadvanceDetailId);

                entity.ToTable("BusinessTrip_AdvanceDetail");

                entity.Property(e => e.PkadvanceDetailId)
                    .HasColumnName("PKAdvanceDetailId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PkadvanceId)
                    .IsRequired()
                    .HasColumnName("PKAdvanceId")
                    .HasMaxLength(36);

                entity.Property(e => e.TripOth)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TripPurpose)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TripRect)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TripTraining)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<BusinessTripAdvanceMaster>(entity =>
            {
                entity.HasKey(e => e.PkadvanceId);

                entity.ToTable("BusinessTrip_AdvanceMaster");

                entity.Property(e => e.PkadvanceId)
                    .HasColumnName("PKAdvanceId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Approved)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.AuthorisedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmpId)
                    .IsRequired()
                    .HasColumnName("Emp_Id")
                    .HasMaxLength(10);

                entity.Property(e => e.FromPlace)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.JourneyMode)
                    .IsRequired()
                    .HasColumnName("Journey_Mode")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ToPlace)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TripAdvCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TripDate)
                    .HasColumnName("Trip_Date")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<CalendarWorkingHours>(entity =>
            {
                entity.HasKey(e => e.WorkingHoursId);

                entity.Property(e => e.WorkingHoursId)
                    .HasMaxLength(32)
                    .ValueGeneratedNever();

                entity.Property(e => e.CalendarId).HasMaxLength(32);

                entity.Property(e => e.FromTime).HasColumnType("smalldatetime");

                entity.Property(e => e.ToTime).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<CalibrationPrintingParameter>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReportNm)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RptDllname)
                    .HasColumnName("RptDLLName")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RptNmHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ValidDateDesc)
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<CapexFormMaster>(entity =>
            {
                entity.HasIndex(e => e.RecId)
                    .HasName("UQ__CapexFormMaster__61FB72FB")
                    .IsUnique();

                entity.Property(e => e.CapexFormMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Amount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.AmountFc)
                    .HasColumnName("AmountFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.CapexNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CurrencyMasterId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EffFrom).HasColumnType("datetime");

                entity.Property(e => e.ExRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FormNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GeneratedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsBudgeted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProcAmnt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ValidUpto).HasColumnType("datetime");
            });

            modelBuilder.Entity<CarActivities>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("CAR_Activities");

                entity.Property(e => e.RecId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt)
                    .HasColumnName("addedDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.Addedby)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MsgHeaderId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CarDetails>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("CAR_Details");

                entity.Property(e => e.RecId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Car)
                    .HasColumnName("CAR")
                    .HasColumnType("image");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MsgAttachmentId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MsgHeaderId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CarrierMaster>(entity =>
            {
                entity.HasKey(e => e.PkcarrierId);

                entity.Property(e => e.PkcarrierId)
                    .HasColumnName("PKCarrierId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.City)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<CartonDetail>(entity =>
            {
                entity.Property(e => e.CartonDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CartonHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MoheaderId)
                    .HasColumnName("MOHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.NoOfPackperCarton).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SodetailId)
                    .HasColumnName("SODetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<CartonHeader>(entity =>
            {
                entity.Property(e => e.CartonHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CartonCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CartonDate).HasColumnType("datetime");

                entity.Property(e => e.CartonDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CustOrderPono)
                    .HasColumnName("CustOrderPONo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchQty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsSomoqty)
                    .HasColumnName("IsSOMOQty")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NoOfPack).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NoPackType).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ProdQty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RefId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RefType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShortingUnitNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<CartonStockDetail>(entity =>
            {
                entity.Property(e => e.CartonStockDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BalQty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CartonHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MovedQty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RecvdQty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TransCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CartonTransHistory>(entity =>
            {
                entity.Property(e => e.CartonTransHistoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CartonHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CartonProdDate).HasColumnType("datetime");

                entity.Property(e => e.CartonProdNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CartonStockDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsTransWithPackItemPost)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NewQty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RefId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RefType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<CenvatServiceTaxInfo>(entity =>
            {
                entity.HasKey(e => e.CenvatServTaxInfoId);

                entity.Property(e => e.CenvatServTaxInfoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BillInvDt).HasColumnType("datetime");

                entity.Property(e => e.BillInvNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EffDate).HasColumnType("datetime");

                entity.Property(e => e.ExciseNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsCreditTaken)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsPaid)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Narration)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PaidAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PartyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PersonalLdgrValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PymtTransNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.RefTransHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RefTransNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefundClaimNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SecId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ServTaxAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TransHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TransNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChargeMaster>(entity =>
            {
                entity.HasKey(e => e.ChrgMasterId)
                    .HasName("PK__ChargeMaster__4C413C06");

                entity.Property(e => e.ChrgMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ChrgCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ChrgDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Hsnsaccode)
                    .HasColumnName("HSNSACCode")
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsBank)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LoadToInv)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SeperateAcc)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChatMessage>(entity =>
            {
                entity.Property(e => e.ChatMessageId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ChatRoomId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.MsgDateTime).HasColumnType("datetime");

                entity.Property(e => e.MsgType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SenderId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.HasOne(d => d.ChatRoom)
                    .WithMany(p => p.ChatMessage)
                    .HasForeignKey(d => d.ChatRoomId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChatMessage_ChatRoomMaster");

                entity.HasOne(d => d.Sender)
                    .WithMany(p => p.ChatMessage)
                    .HasForeignKey(d => d.SenderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChatMessage_ChatUserMaster");
            });

            modelBuilder.Entity<ChatMessages>(entity =>
            {
                entity.HasKey(e => e.MessageId);

                entity.Property(e => e.MessageId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ChatAttachment).IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MessageDate).HasColumnType("datetime");

                entity.Property(e => e.MessageType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RoomId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChatRoomDetails>(entity =>
            {
                entity.Property(e => e.ChatRoomDetailsId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ChatRoomId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.EntryTime).HasColumnType("datetime");

                entity.Property(e => e.ExitTime).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChatRoomMaster>(entity =>
            {
                entity.HasKey(e => e.ChatRoomId);

                entity.Property(e => e.ChatRoomId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApplicationCode)
                    .HasColumnName("Application_code")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ChatRoomName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ChatSource)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('ACTIVITY')");

                entity.Property(e => e.ChatSourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ChatSourceType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChatType)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.InitiatorId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChatUserMaster>(entity =>
            {
                entity.HasKey(e => e.UserMasterId);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<ChqPrintProg>(entity =>
            {
                entity.Property(e => e.ChqPrintProgId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProgName)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ChqSetup>(entity =>
            {
                entity.Property(e => e.ChqSetupId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Format)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProgName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Xpos)
                    .HasColumnName("XPos")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Ypos)
                    .HasColumnName("YPos")
                    .HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ClaimDetailMaster>(entity =>
            {
                entity.HasKey(e => e.ClaimDetailId)
                    .HasName("PK__ClaimDetailMaste__66F53242");

                entity.HasIndex(e => new { e.Total, e.ClaimHeaderId })
                    .HasName("ClaimHeaderId");

                entity.HasIndex(e => new { e.ClaimDetailId, e.ClaimHeaderId, e.Mode, e.Dt, e.FromLocation, e.ToLocation, e.Exp1, e.Exp2, e.Exp3, e.Exp4, e.Exp5, e.Exp6, e.Exp7, e.Exp8, e.Exp9, e.Exp10, e.Total, e.IsDeleted, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.CreationLevel, e.UserLevel, e.SyncInfo, e.Remark, e.ProjectId, e.MainGroupId, e.SubGroupId })
                    .HasName("ProjectId");

                entity.HasIndex(e => new { e.ClaimDetailId, e.Mode, e.FromLocation, e.ToLocation, e.Exp1, e.Exp2, e.Exp3, e.Exp4, e.Exp5, e.Exp6, e.Exp7, e.Exp8, e.Exp9, e.Exp10, e.Total, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.CreationLevel, e.UserLevel, e.SyncInfo, e.MainGroupId, e.SubGroupId, e.Remark, e.ProjectId, e.IsDeleted, e.Dt, e.ClaimHeaderId })
                    .HasName("IsDeleted");

                entity.Property(e => e.ClaimDetailId).ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Distance)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Dt).HasColumnType("datetime");

                entity.Property(e => e.Exp1).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Exp10).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Exp2).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Exp3).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Exp4).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Exp5).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Exp6).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Exp7).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Exp8).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Exp9).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FromLocation).HasMaxLength(100);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MainGroupId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SubGroupId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SyncInfo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ToLocation).HasMaxLength(100);

                entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.VehicleType)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClaimHeaderMaster>(entity =>
            {
                entity.HasKey(e => e.ClaimHeaderId)
                    .HasName("PK__ClaimHeaderMaste__68DD7AB4");

                entity.HasIndex(e => new { e.ClaimHeaderId, e.ClaimCode, e.PlantId, e.AuthorizedById, e.Purpose, e.Date, e.TotalAmt, e.AdvanceTaken, e.Balance, e.PaidAmount, e.IsDeleted, e.AddedDt, e.Approved, e.ActivityId, e.ProjectId, e.ClaimReimburse, e.CallId, e.Type, e.IsReimbursed, e.Empid, e.Status })
                    .HasName("EmpId");

                entity.Property(e => e.ClaimHeaderId).ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AdvanceTaken)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Approved)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AuthorizedById).HasMaxLength(100);

                entity.Property(e => e.Balance).HasMaxLength(200);

                entity.Property(e => e.CallId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimCode).HasMaxLength(50);

                entity.Property(e => e.CostCtrMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Empid)
                    .HasColumnName("EMPID")
                    .HasMaxLength(100);

                entity.Property(e => e.IsClient)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsReimbursed).HasMaxLength(1);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PaidAmount)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PlantId)
                    .HasColumnName("PlantID")
                    .HasMaxLength(100);

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Purpose).HasColumnType("varchar(max)");

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SyncInfo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TotalAmt).HasMaxLength(200);

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ClassSpec>(entity =>
            {
                entity.Property(e => e.ClassSpecId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ClassificationId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ComponentId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsMandetory)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SpecDetailId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SpecHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ClassificationMaster>(entity =>
            {
                entity.HasKey(e => e.ClassificationId);

                entity.Property(e => e.ClassificationId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemClassificationId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ParentItemClassificationId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClientInfo>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ClientId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClientLicenseDetails>(entity =>
            {
                entity.HasKey(e => e.PklicenceId);

                entity.Property(e => e.PklicenceId)
                    .HasColumnName("PKLicenceId")
                    .HasMaxLength(30)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivationDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ActualUsersAllowed)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.BillingInfo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClientName).HasMaxLength(200);

                entity.Property(e => e.ContactName).HasMaxLength(200);

                entity.Property(e => e.ContactNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EkatmInstalled)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.EmailId)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Environment)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExpiryDate)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LicenseExpires)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LogoFile)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MobileNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Server)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UsersAllowed)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VwbdbcnnString)
                    .HasColumnName("VWBDBCnnString")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.VwbrptDbconnString)
                    .HasColumnName("VWBRptDBConnString")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.WebUrl)
                    .HasColumnName("WebURL")
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClientMachineInfo>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.MachineName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Nipaddress)
                    .IsRequired()
                    .HasColumnName("NIPAddress")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClientVersionDtl>(entity =>
            {
                entity.Property(e => e.ClientVersionDtlId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.InstallDt).HasColumnType("datetime");

                entity.Property(e => e.InstallerId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Notes)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.VersionMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CodePartMaster>(entity =>
            {
                entity.Property(e => e.CodePartMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AppendedBy)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CodeForMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CodeLength).HasColumnType("numeric(10, 0)");

                entity.Property(e => e.CodeSeqNo).HasColumnType("numeric(10, 0)");

                entity.Property(e => e.CodeTableName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodeType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ConstantValue)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DisplayFieldName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValueFieldName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ColorMaster>(entity =>
            {
                entity.HasKey(e => e.ColorCode);

                entity.Property(e => e.ColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ColorDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<CommProcDtl>(entity =>
            {
                entity.HasIndex(e => new { e.CommProcHdrId, e.IsDeleted })
                    .HasName("CommProcHdrId");

                entity.Property(e => e.CommProcDtlId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AgentId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ApprDt).HasColumnType("datetime");

                entity.Property(e => e.CommProcHdrId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CommSummaryId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CommTypeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CommisionPer).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CommissionAmt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Cpstatus)
                    .HasColumnName("CPStatus")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreditAmt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CreditPer).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DocAmt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Glid)
                    .HasColumnName("GLId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.InvDiv).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.InvoiceHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ReceiptId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SocommissionId)
                    .HasColumnName("SOCommissionId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.VouId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VouMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CommProcHdr>(entity =>
            {
                entity.Property(e => e.CommProcHdrId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CommApprover)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CommNo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CommTypeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PeriodFrom).HasColumnType("datetime");

                entity.Property(e => e.PeriodTo).HasColumnType("datetime");

                entity.Property(e => e.SecondApprover)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<CommProcessed>(entity =>
            {
                entity.Property(e => e.CommProcessedId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AgentId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ApprDt).HasColumnType("datetime");

                entity.Property(e => e.CommProcessingId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CommTypeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CommisionPer).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CommissionAmt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Cpstatus)
                    .HasColumnName("CPStatus")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreditAmt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CreditPer).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Glid)
                    .HasColumnName("GLId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SocommissionId)
                    .HasColumnName("SOCommissionId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TotalAmt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VouId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VouMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CommProcessing>(entity =>
            {
                entity.Property(e => e.CommProcessingId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AgentId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ApprDt).HasColumnType("datetime");

                entity.Property(e => e.CommissionAmt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Cpstatus)
                    .HasColumnName("CPStatus")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SocommissionId)
                    .HasColumnName("SOCommissionId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VouId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CommSummary>(entity =>
            {
                entity.Property(e => e.CommSummaryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AgentId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CommProcHdrId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.VouAmt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VouDate).HasColumnType("datetime");

                entity.Property(e => e.VouId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CommType>(entity =>
            {
                entity.Property(e => e.CommTypeId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CommOn)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FinanceStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Glid)
                    .HasColumnName("GLId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TypeCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TypeDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VouMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CompanyLogo>(entity =>
            {
                entity.HasKey(e => e.ImageId);

                entity.Property(e => e.ImageId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Clogo)
                    .HasColumnName("CLogo")
                    .HasColumnType("image");
            });

            modelBuilder.Entity<CompanyMaster>(entity =>
            {
                entity.HasKey(e => e.CompanyId);

                entity.Property(e => e.CompanyId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActiveImage).HasMaxLength(1);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CompanyLogo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ConfigurationDetail>(entity =>
            {
                entity.Property(e => e.ConfigurationDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Configuration)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ConfigurationMasterId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NoOfDays).HasColumnType("numeric(5, 0)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ConfigurationMaster>(entity =>
            {
                entity.Property(e => e.ConfigurationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ConfigurationDesc)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ConfigurationName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ContractInfo>(entity =>
            {
                entity.Property(e => e.ContractInfoId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CapexFormMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ContractAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ContractAmtFc)
                    .HasColumnName("ContractAmtFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ContractDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ContractDt).HasColumnType("datetime");

                entity.Property(e => e.ContractNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CurrCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Entity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExRate).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ValidFm).HasColumnType("datetime");

                entity.Property(e => e.ValidTo).HasColumnType("datetime");
            });

            modelBuilder.Entity<ConveyanceDetails>(entity =>
            {
                entity.HasKey(e => e.ConveyanceDetailId);

                entity.ToTable("Conveyance_Details");

                entity.Property(e => e.ConveyanceDetailId).ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Dt).HasColumnType("datetime");

                entity.Property(e => e.Exp1).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ModuleMastId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ToLocation).HasMaxLength(100);

                entity.Property(e => e.Total).HasColumnType("numeric(18, 3)");
            });

            modelBuilder.Entity<ConveyanceMaster>(entity =>
            {
                entity.HasKey(e => e.ConveyanceHeaderId);

                entity.ToTable("Conveyance_Master");

                entity.Property(e => e.ConveyanceHeaderId).ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AdvanceTaken).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Balance).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ConveyanceCode).HasMaxLength(50);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Empid)
                    .HasColumnName("EMPID")
                    .HasMaxLength(100);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PaidAmount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TotalAmount).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<CostBatchCalcDtl>(entity =>
            {
                entity.Property(e => e.CostBatchCalcDtlId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ActFtrCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ActStdCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CompId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CostBatchHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CostRateId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FtrCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ItemsId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RoutId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Status).HasColumnType("numeric(2, 0)");

                entity.Property(e => e.StdCost).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<CostBatchComp>(entity =>
            {
                entity.Property(e => e.CostBatchCompId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BomdetailId)
                    .HasColumnName("BOMDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Bomuomid)
                    .HasColumnName("BOMUOMId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CompId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ComponentId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CostBatchHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FtrCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.HqtyPer)
                    .HasColumnName("HQtyPer")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ItemsId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.QtyPer).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QtyReqd).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.RoutingSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Status).HasColumnType("numeric(2, 0)");

                entity.Property(e => e.StdCost).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<CostBatchError>(entity =>
            {
                entity.Property(e => e.CostBatchErrorId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CompId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CostBatchHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CostRateId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Error)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemsId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RoutId).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<CostBatchHeader>(entity =>
            {
                entity.Property(e => e.CostBatchHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CostBatchCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CostBatchDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CostBatchRunBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CostBatchRunDt).HasColumnType("datetime");

                entity.Property(e => e.CostRateUpToDt).HasColumnType("datetime");

                entity.Property(e => e.LatestCost)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PresTillDt).HasColumnType("datetime");

                entity.Property(e => e.ReleaseDt).HasColumnType("datetime");

                entity.Property(e => e.ReleaseYear)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Released)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ReleasedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Run)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CostBatchItems>(entity =>
            {
                entity.Property(e => e.CostBatchItemsId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CostBatchHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FinalCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FtrCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ItemProcessId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ItemsId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Status).HasColumnType("numeric(2, 0)");

                entity.Property(e => e.StdCost).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<CostBatchRout>(entity =>
            {
                entity.Property(e => e.CostBatchRoutId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CostBatchHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FtrCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ItemQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ItemRoutingDetailId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemsId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MachineGroupId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MtrlCostWaste).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NoOfLabour).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NoOfMcnGrp).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OprCostWaste).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RoutId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RoutSeq).HasColumnType("numeric(2, 0)");

                entity.Property(e => e.Status).HasColumnType("numeric(2, 0)");

                entity.Property(e => e.StdCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ThisMtrlCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ThisOprCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TillMtrlCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TillOprCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TimeReqdForLabour).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TimeReqdForrMcnGrp).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TimeUnitForLablor).HasColumnType("numeric(2, 0)");

                entity.Property(e => e.TimeUnitForMcnGrp).HasColumnType("numeric(2, 0)");

                entity.Property(e => e.TotalCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotalMtrlCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotalOprCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotalWasteCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Waste).HasColumnType("numeric(5, 2)");
            });

            modelBuilder.Entity<CostCenterData>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK__CostCenterData__164452B1");

                entity.Property(e => e.RecId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CostCenterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OrderTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PartyTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CostCentreMaster>(entity =>
            {
                entity.HasKey(e => e.CostCtrMasterId)
                    .HasName("PK__CostCentreMaster__224B023A");

                entity.HasIndex(e => e.RecId)
                    .HasName("UQ__CostCentreMaster__233F2673")
                    .IsUnique();

                entity.Property(e => e.CostCtrMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CostCtrCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CostCtrDesc)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CostHeadMaster>(entity =>
            {
                entity.Property(e => e.CostHeadMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CostHeadCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CostHeadDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CostHeadType)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Formating)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InputLevel)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IplvlOrder)
                    .HasColumnName("IPLvlOrder")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UdfmasterId)
                    .IsRequired()
                    .HasColumnName("UDFMasterId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.Udfmaster)
                    .WithMany(p => p.CostHeadMaster)
                    .HasForeignKey(d => d.UdfmasterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CostHeadMaster_UDFMaster");
            });

            modelBuilder.Entity<CostRate>(entity =>
            {
                entity.HasIndex(e => new { e.RecType, e.RefRecType, e.RefRecId, e.CostHeadMasterId, e.EffFrom })
                    .HasName("UK_CostRate")
                    .IsUnique();

                entity.Property(e => e.CostRateId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CostHeadMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EffFrom).HasColumnType("datetime");

                entity.Property(e => e.FtrValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RecType).HasColumnType("numeric(2, 0)");

                entity.Property(e => e.RefRecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecType).HasColumnType("numeric(2, 0)");

                entity.Property(e => e.StdValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TimePeriod).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TimeUnit).HasColumnType("numeric(2, 0)");

                entity.HasOne(d => d.CostHeadMaster)
                    .WithMany(p => p.CostRate)
                    .HasForeignKey(d => d.CostHeadMasterId)
                    .HasConstraintName("FK_CostRate_CostHeadMaster");
            });

            modelBuilder.Entity<CreditTermsMaster>(entity =>
            {
                entity.Property(e => e.CreditTermsMasterId)
                    .HasColumnName("CreditTermsMasterID")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreditTermsCode)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CreditTermsDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<CrmAppoinment>(entity =>
            {
                entity.HasKey(e => e.PkappointmentId);

                entity.ToTable("CRM_Appoinment");

                entity.HasIndex(e => e.CallId)
                    .HasName("CallId");

                entity.HasIndex(e => new { e.CallId, e.ExecutiveId, e.AppoinmentDatetime, e.StatusFlag, e.AddedBy, e.AddedDt, e.IsTransfer, e.AppoinmentTransferReasonId, e.ModifiedBy, e.ModifiedDt })
                    .HasName("ModifiedBy");

                entity.HasIndex(e => new { e.PkappointmentId, e.StatusFlag, e.AddedBy, e.AddedDt, e.IsTransfer, e.AppoinmentTransferReasonId, e.ModifiedBy, e.ModifiedDt, e.CallId, e.ExecutiveId, e.AppoinmentDatetime })
                    .HasName("ExecutiveId");

                entity.Property(e => e.PkappointmentId)
                    .HasColumnName("PKAppointmentId")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AppoinmentDatetime).HasColumnType("datetime");

                entity.Property(e => e.AppoinmentTransferReasonId).HasMaxLength(36);

                entity.Property(e => e.CallId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExecutiveId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<CrmAttachments>(entity =>
            {
                entity.HasKey(e => e.PkcallAttachmentId);

                entity.ToTable("CRM_Attachments");

                entity.Property(e => e.PkcallAttachmentId)
                    .HasColumnName("PKCallAttachmentId")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CallId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Docpath)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FileName).IsUnicode(false);
            });

            modelBuilder.Entity<CrmBlackList>(entity =>
            {
                entity.ToTable("CRM_BlackList");

                entity.Property(e => e.EmailId)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CrmBusSegUserRelatn>(entity =>
            {
                entity.HasKey(e => e.PkbusUserId);

                entity.ToTable("CRM_BusSegUserRelatn");

                entity.HasIndex(e => new { e.PkbusUserId, e.FkbusiSegmentId, e.IsDeleted, e.FkuserMasterId })
                    .HasName("FKUserMasterID");

                entity.HasIndex(e => new { e.PkbusUserId, e.FkuserMasterId, e.IsDeleted, e.FkbusiSegmentId })
                    .HasName("FKBusiSegmentID");

                entity.Property(e => e.PkbusUserId)
                    .HasColumnName("PKBusUserId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.FkbusiSegmentId)
                    .HasColumnName("FKBusiSegmentID")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkuserMasterId)
                    .HasColumnName("FKUserMasterID")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmBusiSegmentMaster>(entity =>
            {
                entity.HasKey(e => e.PkbusiSegmentId);

                entity.ToTable("CRM_BusiSegmentMaster");

                entity.HasIndex(e => new { e.PkbusiSegmentId, e.SegmentCode, e.SegmentDescription, e.IsDeleted, e.FkparentBusiSegmentId })
                    .HasName("FKParentBusiSegmentID");

                entity.Property(e => e.PkbusiSegmentId)
                    .HasColumnName("PKBusiSegmentID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FkparentBusiSegmentId)
                    .HasColumnName("FKParentBusiSegmentID")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SegmentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SegmentDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmCallAssignment>(entity =>
            {
                entity.HasKey(e => e.PkcallAssignId);

                entity.ToTable("CRM_CallAssignment");

                entity.HasIndex(e => new { e.PkcallAssignId, e.FkcallStatusId, e.FkissuedToId, e.Comments, e.ScheduledDate, e.ScheduledTime, e.IsDemoRequired, e.FksuspectId })
                    .HasName("FKSuspectId");

                entity.HasIndex(e => new { e.PkcallAssignId, e.FksuspectId, e.FkcallStatusId, e.Comments, e.ScheduledDate, e.ScheduledTime, e.IsDemoRequired, e.FkissuedToId })
                    .HasName("FKIssuedToId");

                entity.Property(e => e.PkcallAssignId)
                    .HasColumnName("PKCallAssignId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Comments)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FkcallStatusId)
                    .HasColumnName("FKCallStatusId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkissuedToId)
                    .HasColumnName("FKIssuedToId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FksuspectId)
                    .HasColumnName("FKSuspectId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDemoRequired)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ScheduledDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduledTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<CrmCallFollowup>(entity =>
            {
                entity.HasKey(e => e.CallFollowupId);

                entity.ToTable("CRM_CallFollowup");

                entity.HasIndex(e => new { e.ActionType, e.FollowupById, e.CallId })
                    .HasName("CallId");

                entity.HasIndex(e => new { e.CallId, e.CallFollowupId, e.FollowupDate })
                    .HasName("FollowupDate");

                entity.HasIndex(e => new { e.CallFollowupId, e.ActionType, e.FollowupComment, e.CallStatusOld, e.CallStatusNew, e.FollowupById, e.FollowupDate, e.StartTime, e.EndTime, e.TimeSpent, e.ExpectedCloserDate, e.Reason, e.Review, e.ContactId })
                    .HasName("ContactId");

                entity.HasIndex(e => new { e.CallFollowupId, e.ActionType, e.FollowupComment, e.CallStatusOld, e.CallStatusNew, e.FollowupById, e.FollowupDate, e.StartTime, e.EndTime, e.TimeSpent, e.ExpectedCloserDate, e.Reason, e.Review, e.PurpoesId })
                    .HasName("PurposeId");

                entity.HasIndex(e => new { e.CallFollowupId, e.ActionType, e.FollowupComment, e.CallStatusOld, e.CallStatusNew, e.FollowupById, e.FollowupDate, e.StartTime, e.EndTime, e.TimeSpent, e.PurpoesId, e.ExpectedCloserDate, e.Reason, e.Review, e.ContactId, e.CallHistoryId })
                    .HasName("CallHistoryId");

                entity.HasIndex(e => new { e.CallFollowupId, e.FollowupComment, e.CallStatusOld, e.CallStatusNew, e.FollowupDate, e.StartTime, e.EndTime, e.TimeSpent, e.CallHistoryId, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.PurpoesId, e.ExpectedCloserDate, e.Reason, e.Review, e.ContactId, e.CallId, e.StatusFlag, e.StartCount, e.InitiatedBy, e.FollowupById, e.ActionType })
                    .HasName("FollowupById");

                entity.Property(e => e.CallFollowupId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActionType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CallHistoryId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallStatusNew)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallStatusOld)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndTime)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ExpectedCloserDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FollowupById)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FollowupComment)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FollowupDate).HasColumnType("datetime");

                entity.Property(e => e.InitiatedBy).HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PurpoesId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Reason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Review)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.StartTime)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TimeSpent)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmCallHistory>(entity =>
            {
                entity.HasKey(e => e.CallHistoryId);

                entity.ToTable("CRM_CallHistory");

                entity.HasIndex(e => e.CallStart)
                    .HasName("CallStart");

                entity.HasIndex(e => e.DemoAssignedTo)
                    .HasName("DemoAssignedTo");

                entity.HasIndex(e => e.PrebidAssignedTo)
                    .HasName("PrebidAssignedTo");

                entity.HasIndex(e => new { e.ProspectId, e.OutcomeCode })
                    .HasName("OutcomeCode_non");

                entity.HasIndex(e => new { e.CallHistoryId, e.CallId, e.CallStart, e.Seid, e.BackOfficeExecutiveId, e.CurrentCallOwner, e.LatestRemark, e.ProspectId })
                    .HasName("ProspectId");

                entity.HasIndex(e => new { e.CallHistoryId, e.ProspectId, e.CallStart, e.Seid, e.BackOfficeExecutiveId, e.CurrentCallOwner, e.LatestRemark, e.CallId })
                    .HasName("CallId");

                entity.HasIndex(e => new { e.CallHistoryId, e.CallId, e.ProspectId, e.CallStart, e.CallStatus, e.BackOfficeExecutiveId, e.CurrentCallOwner, e.LatestRemark, e.Seid })
                    .HasName("SEId");

                entity.HasIndex(e => new { e.CallHistoryId, e.CallId, e.ProspectId, e.CallStart, e.Seid, e.CallStatus, e.CurrentCallOwner, e.LatestRemark, e.BackOfficeExecutiveId })
                    .HasName("BackOfficeExecutiveId");

                entity.HasIndex(e => new { e.CallHistoryId, e.CallId, e.ProspectId, e.CallStart, e.Seid, e.CallStatus, e.BackOfficeExecutiveId, e.CurrentCallOwner, e.LatestRemark, e.ActivityId })
                    .HasName("ActivityId");

                entity.HasIndex(e => new { e.CallHistoryId, e.CallId, e.ProspectId, e.CallStart, e.Seid, e.CallStatus, e.BackOfficeExecutiveId, e.CurrentCallOwner, e.LatestRemark, e.ProductId })
                    .HasName("ProductId");

                entity.HasIndex(e => new { e.CallHistoryId, e.CallId, e.ProspectId, e.CallStart, e.Seid, e.CallStatus, e.BackOfficeExecutiveId, e.LatestRemark, e.CurrentCallOwner, e.OutcomeCode, e.Isclose })
                    .HasName("OutcomeCode");

                entity.HasIndex(e => new { e.CallHistoryId, e.CallId, e.ProspectId, e.CallStart, e.Seid, e.CallStatus, e.BackOfficeExecutiveId, e.LatestRemark, e.Isclose, e.OutcomeCode, e.CurrentCallOwner })
                    .HasName("CurrentCallOwner");

                entity.HasIndex(e => new { e.CallHistoryId, e.CallId, e.ProspectId, e.CallStart, e.Seid, e.CallStatus, e.BackOfficeExecutiveId, e.CurrentCallOwner, e.LatestRemark, e.SpecialPrizeRequest, e.SpecialPrizeStatus, e.SpecialPrizeApprover })
                    .HasName("SpecialPrizeApprover");

                entity.HasIndex(e => new { e.CallHistoryId, e.CallId, e.ProspectId, e.CallStart, e.Seid, e.CallStatus, e.BackOfficeExecutiveId, e.CurrentCallOwner, e.LatestRemark, e.PresalesSupportRequired, e.PresalesSupportDetails, e.PresalesSupportDueDate, e.PresalesExecutiveId })
                    .HasName("PresalesExecutiveId");

                entity.Property(e => e.CallHistoryId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApplicationNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AssignToChannelId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.BackOfficeExecutiveId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallAgainReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallCloseDetails)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CallCloseReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallRatingChangeReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallRescheduleReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallStart).HasColumnType("datetime");

                entity.Property(e => e.CallStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallTransferReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelSeid)
                    .HasColumnName("ChannelSEId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ContractDocIdurl)
                    .HasColumnName("ContractDocIDUrl")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ContractResponsibility)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContractReviewRequired)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ContractStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentCallOwner)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerVisitAssignedTo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerVisitDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateHotCallChanged).HasColumnType("datetime");

                entity.Property(e => e.DateWarmCallChanged).HasColumnType("datetime");

                entity.Property(e => e.DemoAssignedTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DemoCompleteDatetime).HasColumnType("datetime");

                entity.Property(e => e.DemoDatetime).HasColumnType("datetime");

                entity.Property(e => e.DemoReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DemoRequired)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DemoStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursedVal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DocHouserId)
                    .HasColumnName("DocHOUserId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailMsgId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ExgsavAcno)
                    .HasColumnName("EXGSavACNo")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExpectedCloserDate).HasColumnType("datetime");

                entity.Property(e => e.ExpectedPrize).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ExpectedValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Fdrdacno)
                    .HasColumnName("FDRDACNo")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Isclose)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Justification)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LatestRemark).HasColumnType("nvarchar(max)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NextAction)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NextActionDateTime).HasColumnType("datetime");

                entity.Property(e => e.OrderLostDetails)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OrderLostReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderPono)
                    .HasColumnName("OrderPONo")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderPovalue)
                    .HasColumnName("OrderPOValue")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrderReceivedDate).HasColumnType("datetime");

                entity.Property(e => e.OrderRecievedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderReferenceId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderRegradeReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderRegradeReasonDetails)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderTypeMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.OrderValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OutcomeCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PrebidAssignedTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PrebidCompleteDatetime).HasColumnType("datetime");

                entity.Property(e => e.PrebidDocId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PrebidRequired)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PrebidStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PresalesExecutiveId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PresalesSupportDetails)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PresalesSupportDueDate).HasColumnType("datetime");

                entity.Property(e => e.PresalesSupportRequired)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessedAs)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProposalNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProspectId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationAssignedTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationDate).HasColumnType("datetime");

                entity.Property(e => e.QuotationDoc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationRequest)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ReshedulingVerified)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Seid)
                    .HasColumnName("SEId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SouceId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Source)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SpecialPrizeApprover)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SpecialPrizeRequest)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SpecialPrizeStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tenure)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmCallList>(entity =>
            {
                entity.HasKey(e => e.CallId);

                entity.ToTable("CRM_CallList");

                entity.HasIndex(e => new { e.CallId, e.CallStart })
                    .HasName("CallStart");

                entity.HasIndex(e => new { e.CallId, e.ProspectId })
                    .HasName("CallId");

                entity.HasIndex(e => new { e.CallId, e.ProspectId, e.Isclose })
                    .HasName("Isclose");

                entity.HasIndex(e => new { e.CallStatus, e.CurrentCallOwner, e.Isclose })
                    .HasName("CallStatus1");

                entity.HasIndex(e => new { e.CurrentCallOwner, e.AddedDt, e.Isclose })
                    .HasName("CurrentCallOwner_non");

                entity.HasIndex(e => new { e.NextActionDateTime, e.NextAction, e.CurrentCallOwner })
                    .HasName("NextActionDateTime");

                entity.HasIndex(e => new { e.ProspectId, e.CurrentCallOwner, e.FkplantId })
                    .HasName("CallOwnerPlant");

                entity.HasIndex(e => new { e.CallId, e.CurrentCallOwner, e.NextActionDateTime, e.Isclose })
                    .HasName("NextActionDateTime_non");

                entity.HasIndex(e => new { e.CallId, e.ProspectId, e.CurrentCallOwner, e.Isclose })
                    .HasName("Isclose_non");

                entity.HasIndex(e => new { e.CallStart, e.CurrentCallOwner, e.Isclose, e.OutcomeCode })
                    .HasName("CallOwnerCloseOtcome");

                entity.HasIndex(e => new { e.CurrentCallOwner, e.Isclose, e.NextActionDateTime, e.CallStatus })
                    .HasName("CallStatus");

                entity.HasIndex(e => new { e.CallId, e.CurrentCallOwner, e.ExpectedValue, e.CallStatus, e.Isclose })
                    .HasName("CallId_non");

                entity.HasIndex(e => new { e.CallId, e.ProspectId, e.CallStart, e.CallStatus, e.BackOfficeExecutiveId, e.CurrentCallOwner, e.LatestRemark, e.Seid })
                    .HasName("SEId");

                entity.HasIndex(e => new { e.CallId, e.ProspectId, e.CallStart, e.Seid, e.CallStatus, e.CurrentCallOwner, e.LatestRemark, e.BackOfficeExecutiveId })
                    .HasName("BackOfficeExecutiveId");

                entity.HasIndex(e => new { e.CallId, e.ProspectId, e.LatestRemark, e.NextAction, e.FkplantId, e.CurrentCallOwner, e.Isclose, e.NextActionDateTime })
                    .HasName("IDX_CRMCallListCallOwnerIsCloseNxtActDT");

                entity.HasIndex(e => new { e.CallId, e.ProspectId, e.CallStart, e.Seid, e.CallStatus, e.BackOfficeExecutiveId, e.CurrentCallOwner, e.LatestRemark, e.ActivityId })
                    .HasName("ActivityId");

                entity.HasIndex(e => new { e.CallId, e.ProspectId, e.CallStart, e.Seid, e.CallStatus, e.BackOfficeExecutiveId, e.CurrentCallOwner, e.LatestRemark, e.OutcomeCode })
                    .HasName("OutcomeCode");

                entity.HasIndex(e => new { e.CallId, e.ProspectId, e.CallStart, e.Seid, e.CallStatus, e.BackOfficeExecutiveId, e.CurrentCallOwner, e.LatestRemark, e.ProductId })
                    .HasName("ProductId");

                entity.HasIndex(e => new { e.CallId, e.ProspectId, e.CallStart, e.Seid, e.CallStatus, e.BackOfficeExecutiveId, e.CurrentCallOwner, e.LatestRemark, e.SpecialPrizeRequest, e.SpecialPrizeStatus, e.SpecialPrizeApprover })
                    .HasName("SpecialPrizeApprover");

                entity.HasIndex(e => new { e.CallId, e.ProspectId, e.CallStart, e.Seid, e.CallStatus, e.BackOfficeExecutiveId, e.CurrentCallOwner, e.LatestRemark, e.DemoRequired, e.DemoDatetime, e.DemoStatus, e.DemoAssignedTo })
                    .HasName("DemoAssignedTo");

                entity.HasIndex(e => new { e.CallId, e.ProspectId, e.CallStart, e.Seid, e.CallStatus, e.BackOfficeExecutiveId, e.CurrentCallOwner, e.LatestRemark, e.PrebidRequired, e.PrebidStatus, e.PrebidDocId, e.PrebidAssignedTo })
                    .HasName("PrebidAssignedTo");

                entity.HasIndex(e => new { e.CallId, e.ProspectId, e.CallStart, e.Seid, e.CallStatus, e.BackOfficeExecutiveId, e.CurrentCallOwner, e.LatestRemark, e.PresalesSupportRequired, e.PresalesSupportDetails, e.PresalesSupportDueDate, e.PresalesExecutiveId })
                    .HasName("PresalesExecutiveId");

                entity.HasIndex(e => new { e.CallId, e.CallStart, e.Seid, e.CallStatus, e.BackOfficeExecutiveId, e.CurrentCallOwner, e.LatestRemark, e.ActivityId, e.ProductId, e.Source, e.SouceId, e.SpecialPrizeRequest, e.SpecialPrizeApprover, e.SpecialPrizeStatus, e.PresalesSupportRequired, e.PresalesExecutiveId, e.PresalesSupportDetails, e.PresalesSupportDueDate, e.DemoRequired, e.DemoDatetime, e.DemoStatus, e.PrebidRequired, e.PrebidStatus, e.PrebidDocId, e.QuotationNo, e.QuotationDate, e.QuotationValue, e.QuotationDoc, e.OrderStatus, e.OrderReferenceId, e.OrderReceivedDate, e.OrderValue, e.OrderLostReasonCode, e.OrderLostDetails, e.TeleCallCount, e.MeetingCount, e.DemoCount, e.QuotationCount, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.CallTransferReasonCode, e.DemoAssignedTo, e.ExpectedPrize, e.Justification, e.ContractReviewRequired, e.ContractResponsibility, e.ContractStatus, e.ContractDocIdurl, e.DateHotCallChanged, e.DateWarmCallChanged, e.ReshedulingVerified, e.OrderRecievedBy, e.OrderPono, e.OrderPovalue, e.DemoReasonCode, e.NextAction, e.NextActionDateTime, e.OutcomeCode, e.EmailCount, e.VisitCount, e.TotalHoursSpent, e.PrebidAssignedTo, e.CallCloseReason, e.CallCloseDetails, e.OrderRegradeReason, e.OrderRegradeReasonDetails, e.QuotationAssignedTo, e.QuotationStatus, e.QuotationRequest, e.CallRatingChangeReason, e.ExpectedValue, e.ExpectedCloserDate, e.DemoCompleteDatetime, e.PrebidCompleteDatetime, e.OverdueDays, e.EmailMsgId, e.CallAgainReason, e.CallRescheduleReason, e.SoheaderId, e.CustomerBudget, e.CustomerBudgetSanctioned, e.Points, e.Alias, e.OrderLostFlag, e.OrderRegretFlag, e.CallCloseWihoutOrderFlag, e.CallLife, e.CallType, e.PresalesSupportDocId, e.PresalesSupportStatus, e.PscompletedDatetime, e.PresalesSupportedBy, e.OrderRegrteApprover, e.OrderLostApprover, e.CallCloseApprover, e.DueDays, e.RescheduleCount, e.Compaign, e.MaxDaysReschedule, e.ExpectedClosureDaysRescheduled, e.IsReminderSent, e.AppoinmentTransferReasonId, e.FkplantId, e.ChannelId, e.AssignToChannelId, e.ChannelSeid, e.PriviousRating, e.HighestRating, e.AssignTochannel, e.CustomerVisitAssignedTo, e.CustomerVisitDateTime, e.OrderTypeMasterId, e.ContactId, e.EmpReferenceId, e.ProspectId, e.Isclose })
                    .HasName("ProspectId");

                entity.HasIndex(e => new { e.CallId, e.CallStart, e.Source, e.SouceId, e.Seid, e.CallStatus, e.BackOfficeExecutiveId, e.LatestRemark, e.SpecialPrizeRequest, e.SpecialPrizeApprover, e.SpecialPrizeStatus, e.PresalesSupportRequired, e.PresalesExecutiveId, e.PresalesSupportDetails, e.PresalesSupportDueDate, e.DemoRequired, e.DemoDatetime, e.DemoStatus, e.PrebidRequired, e.PrebidStatus, e.PrebidDocId, e.QuotationNo, e.QuotationDate, e.QuotationValue, e.QuotationDoc, e.OrderStatus, e.OrderReferenceId, e.OrderReceivedDate, e.OrderValue, e.OrderLostReasonCode, e.OrderLostDetails, e.ActivityId, e.TeleCallCount, e.MeetingCount, e.DemoCount, e.QuotationCount, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.ProductId, e.CallTransferReasonCode, e.DemoAssignedTo, e.ExpectedPrize, e.Justification, e.ContractReviewRequired, e.ContractResponsibility, e.ContractStatus, e.ContractDocIdurl, e.DateHotCallChanged, e.DateWarmCallChanged, e.ReshedulingVerified, e.OrderRecievedBy, e.OrderPono, e.OrderPovalue, e.DemoReasonCode, e.NextAction, e.NextActionDateTime, e.OutcomeCode, e.EmailCount, e.VisitCount, e.TotalHoursSpent, e.PrebidAssignedTo, e.CallCloseReason, e.CallCloseDetails, e.OrderRegradeReason, e.OrderRegradeReasonDetails, e.QuotationAssignedTo, e.QuotationStatus, e.QuotationRequest, e.CallRatingChangeReason, e.ExpectedValue, e.ExpectedCloserDate, e.DemoCompleteDatetime, e.PrebidCompleteDatetime, e.OverdueDays, e.EmailMsgId, e.CallAgainReason, e.CallRescheduleReason, e.SoheaderId, e.CustomerBudget, e.CustomerBudgetSanctioned, e.Points, e.Alias, e.OrderLostFlag, e.OrderRegretFlag, e.CallCloseWihoutOrderFlag, e.CallLife, e.CallType, e.PresalesSupportDocId, e.PresalesSupportStatus, e.PscompletedDatetime, e.PresalesSupportedBy, e.OrderRegrteApprover, e.OrderLostApprover, e.CallCloseApprover, e.DueDays, e.RescheduleCount, e.Compaign, e.MaxDaysReschedule, e.ExpectedClosureDaysRescheduled, e.IsReminderSent, e.AppoinmentTransferReasonId, e.FkplantId, e.ChannelId, e.AssignToChannelId, e.ChannelSeid, e.PriviousRating, e.HighestRating, e.CustomerVisitAssignedTo, e.CustomerVisitDateTime, e.OrderTypeMasterId, e.ContactId, e.EmpReferenceId, e.ProspectId, e.CurrentCallOwner, e.Isclose, e.AssignTochannel })
                    .HasName("AssignToChannel");

                entity.HasIndex(e => new { e.CallId, e.ProspectId, e.CallStart, e.Source, e.SouceId, e.Seid, e.CallStatus, e.BackOfficeExecutiveId, e.LatestRemark, e.SpecialPrizeRequest, e.SpecialPrizeApprover, e.SpecialPrizeStatus, e.PresalesSupportRequired, e.PresalesExecutiveId, e.PresalesSupportDetails, e.PresalesSupportDueDate, e.DemoRequired, e.DemoDatetime, e.DemoStatus, e.PrebidRequired, e.PrebidStatus, e.PrebidDocId, e.QuotationNo, e.QuotationDate, e.QuotationValue, e.QuotationDoc, e.OrderStatus, e.OrderReferenceId, e.OrderReceivedDate, e.OrderValue, e.OrderLostReasonCode, e.OrderLostDetails, e.ActivityId, e.TeleCallCount, e.MeetingCount, e.DemoCount, e.QuotationCount, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.ProductId, e.CallTransferReasonCode, e.DemoAssignedTo, e.ExpectedPrize, e.Justification, e.ContractReviewRequired, e.ContractResponsibility, e.ContractStatus, e.ContractDocIdurl, e.DateHotCallChanged, e.DateWarmCallChanged, e.ReshedulingVerified, e.OrderRecievedBy, e.OrderPono, e.OrderPovalue, e.DemoReasonCode, e.NextAction, e.NextActionDateTime, e.OutcomeCode, e.EmailCount, e.VisitCount, e.TotalHoursSpent, e.PrebidAssignedTo, e.CallCloseReason, e.CallCloseDetails, e.OrderRegradeReason, e.OrderRegradeReasonDetails, e.QuotationAssignedTo, e.QuotationStatus, e.QuotationRequest, e.CallRatingChangeReason, e.ExpectedValue, e.ExpectedCloserDate, e.DemoCompleteDatetime, e.PrebidCompleteDatetime, e.OverdueDays, e.EmailMsgId, e.CallAgainReason, e.CallRescheduleReason, e.SoheaderId, e.CustomerBudget, e.CustomerBudgetSanctioned, e.Points, e.Alias, e.OrderLostFlag, e.OrderRegretFlag, e.CallCloseWihoutOrderFlag, e.CallLife, e.CallType, e.PresalesSupportDocId, e.PresalesSupportStatus, e.PscompletedDatetime, e.PresalesSupportedBy, e.OrderRegrteApprover, e.OrderLostApprover, e.CallCloseApprover, e.DueDays, e.RescheduleCount, e.Compaign, e.MaxDaysReschedule, e.ExpectedClosureDaysRescheduled, e.IsReminderSent, e.AppoinmentTransferReasonId, e.FkplantId, e.ChannelId, e.AssignToChannelId, e.ChannelSeid, e.PriviousRating, e.HighestRating, e.AssignTochannel, e.CustomerVisitAssignedTo, e.CustomerVisitDateTime, e.EmpReferenceId, e.OrderTypeMasterId, e.ContactId, e.CurrentCallOwner, e.Isclose })
                    .HasName("CurrentCallOwner");

                entity.HasIndex(e => new { e.CallId, e.ProspectId, e.CallStart, e.Source, e.SouceId, e.Seid, e.CallStatus, e.BackOfficeExecutiveId, e.LatestRemark, e.SpecialPrizeRequest, e.SpecialPrizeApprover, e.SpecialPrizeStatus, e.PresalesSupportRequired, e.PresalesExecutiveId, e.PresalesSupportDetails, e.PresalesSupportDueDate, e.DemoRequired, e.DemoDatetime, e.DemoStatus, e.PrebidRequired, e.PrebidStatus, e.PrebidDocId, e.QuotationNo, e.QuotationDate, e.QuotationValue, e.QuotationDoc, e.OrderStatus, e.OrderReferenceId, e.OrderValue, e.OrderLostReasonCode, e.OrderLostDetails, e.ActivityId, e.TeleCallCount, e.MeetingCount, e.DemoCount, e.QuotationCount, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.ProductId, e.CallTransferReasonCode, e.DemoAssignedTo, e.ExpectedPrize, e.Justification, e.ContractReviewRequired, e.ContractResponsibility, e.ContractStatus, e.ContractDocIdurl, e.DateHotCallChanged, e.DateWarmCallChanged, e.ReshedulingVerified, e.OrderRecievedBy, e.OrderPono, e.OrderPovalue, e.Isclose, e.DemoReasonCode, e.NextAction, e.NextActionDateTime, e.EmailCount, e.VisitCount, e.TotalHoursSpent, e.PrebidAssignedTo, e.CallCloseReason, e.CallCloseDetails, e.OrderRegradeReason, e.OrderRegradeReasonDetails, e.QuotationAssignedTo, e.QuotationStatus, e.QuotationRequest, e.CallRatingChangeReason, e.ExpectedValue, e.ExpectedCloserDate, e.DemoCompleteDatetime, e.PrebidCompleteDatetime, e.OverdueDays, e.EmailMsgId, e.CallAgainReason, e.CallRescheduleReason, e.SoheaderId, e.CustomerBudget, e.CustomerBudgetSanctioned, e.Points, e.Alias, e.OrderLostFlag, e.OrderRegretFlag, e.CallCloseWihoutOrderFlag, e.CallLife, e.CallType, e.PresalesSupportDocId, e.PresalesSupportStatus, e.PscompletedDatetime, e.PresalesSupportedBy, e.ContactId, e.OrderRegrteApprover, e.OrderLostApprover, e.CallCloseApprover, e.DueDays, e.RescheduleCount, e.Compaign, e.MaxDaysReschedule, e.ExpectedClosureDaysRescheduled, e.IsReminderSent, e.AppoinmentTransferReasonId, e.FkplantId, e.ChannelId, e.AssignToChannelId, e.ChannelSeid, e.PriviousRating, e.HighestRating, e.AssignTochannel, e.CustomerVisitAssignedTo, e.CustomerVisitDateTime, e.EmpReferenceId, e.OrderTypeMasterId, e.Boeid, e.Currency, e.Pbt, e.Pat, e.Network, e.Borrowings, e.Rating, e.ParticipateInSyndications, e.PrepaymentSecuterization, e.Ipfb, e.Icp, e.ManagementComments, e.CurrencyValue, e.CurrentCallOwner, e.OrderReceivedDate, e.OutcomeCode })
                    .HasName("CallOwnerOrderRecdOutcome");

                entity.Property(e => e.CallId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Alias)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApplicationNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AppoinmentTransferReasonId).HasMaxLength(36);

                entity.Property(e => e.AssignToChannelId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.BackOfficeExecutiveId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Boeid)
                    .HasColumnName("BOEID")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Borrowings).HasColumnType("numeric(38, 0)");

                entity.Property(e => e.CallAgainReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallCloseApprover)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallCloseDetails)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CallCloseReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallRatingChangeReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallRescheduleReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallReviewDate).HasColumnType("datetime");

                entity.Property(e => e.CallStart).HasColumnType("datetime");

                entity.Property(e => e.CallStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallTransferReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallType).HasDefaultValueSql("((1))");

                entity.Property(e => e.Campaign)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ChannelSeid)
                    .HasColumnName("ChannelSEId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Compaign)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactId).HasMaxLength(36);

                entity.Property(e => e.ContractDocIdurl)
                    .HasColumnName("ContractDocIDUrl")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ContractResponsibility)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContractReviewRequired)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ContractStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CurrencyValue)
                    .HasMaxLength(38)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentCallOwner)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerBudget).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CustomerBudgetSanctioned)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerVisitAssignedTo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerVisitDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateHotCallChanged).HasColumnType("datetime");

                entity.Property(e => e.DateWarmCallChanged).HasColumnType("datetime");

                entity.Property(e => e.DemoAssignedTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DemoCompleteDatetime).HasColumnType("datetime");

                entity.Property(e => e.DemoCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DemoDatetime).HasColumnType("datetime");

                entity.Property(e => e.DemoReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DemoRequired)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DemoStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisbursedVal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DocHouserId)
                    .HasColumnName("DocHOUserId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DueDays).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.DurationOfClass)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmailMsgId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.EmpReferenceId).HasMaxLength(50);

                entity.Property(e => e.ExgsavAcno)
                    .HasColumnName("EXGSavACNo")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExpectedCloserDate).HasColumnType("datetime");

                entity.Property(e => e.ExpectedPrize).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ExpectedValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Fdrdacno)
                    .HasColumnName("FDRDACNo")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkplantId)
                    .IsRequired()
                    .HasColumnName("FKPlantId")
                    .HasMaxLength(36)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Icp)
                    .HasColumnName("ICP")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdeaAboutPayment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ipfb)
                    .HasColumnName("IPFB")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IsNoGstin)
                    .HasColumnName("IsNoGSTIN")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsReminderSent).HasDefaultValueSql("((0))");

                entity.Property(e => e.Isclose)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Justification).HasColumnType("nvarchar(max)");

                entity.Property(e => e.LatestRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ManagementComments)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.MeetingCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Network).HasColumnType("numeric(38, 0)");

                entity.Property(e => e.NextAction)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NextActionDateTime).HasColumnType("datetime");

                entity.Property(e => e.NoOfDaysInWeek)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OrderLostApprover)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderLostDetails)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OrderLostReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderPono)
                    .HasColumnName("OrderPONo")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderPovalue)
                    .HasColumnName("OrderPOValue")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrderReceivedDate).HasColumnType("datetime");

                entity.Property(e => e.OrderRecievedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderReferenceId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderRegradeReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderRegradeReasonDetails)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OrderRegrteApprover)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderTypeMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.OrderValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OutcomeCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OverdueDays).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ParticipateInSyndications)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Pat)
                    .HasColumnName("PAT")
                    .HasColumnType("numeric(38, 0)");

                entity.Property(e => e.Pbt)
                    .HasColumnName("PBT")
                    .HasColumnType("numeric(38, 0)");

                entity.Property(e => e.PrebidAssignedTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PrebidCompleteDatetime).HasColumnType("datetime");

                entity.Property(e => e.PrebidDocId)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PrebidRequired)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PrebidStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PrefferedTime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PrefferedTimeTo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PrefferedTutor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PrepaymentSecuterization)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.PresalesExecutiveId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PresalesSupportDetails)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PresalesSupportDocId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PresalesSupportDueDate).HasColumnType("datetime");

                entity.Property(e => e.PresalesSupportRequired)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PresalesSupportStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PresalesSupportedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessedAs)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProposalNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProspectId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PscompletedDatetime)
                    .HasColumnName("PSCompletedDatetime")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1900)-(1))-(1))");

                entity.Property(e => e.QuotationAssignedTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.QuotationDate).HasColumnType("datetime");

                entity.Property(e => e.QuotationDoc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationRequest)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationStatus)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Rating)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ReshedulingVerified)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Seid)
                    .HasColumnName("SEId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SoheaderId)
                    .HasColumnName("SOHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SouceId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Source)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SpecialPrizeApprover)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SpecialPrizeRequest)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SpecialPrizeStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TeleCallCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Tenure)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalHoursSpent)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmCallPurposeMaster>(entity =>
            {
                entity.HasKey(e => e.PkcallPurposeId);

                entity.ToTable("CRM_CallPurposeMaster");

                entity.Property(e => e.PkcallPurposeId)
                    .HasColumnName("PKCallPurposeId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CallPurposeDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmCallReminders>(entity =>
            {
                entity.HasKey(e => e.PkReminderId)
                    .HasName("PkReminderId");

                entity.ToTable("CRM_CallReminders");

                entity.Property(e => e.PkReminderId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CallId)
                    .IsRequired()
                    .HasMaxLength(36);

                entity.Property(e => e.DateTime).HasColumnType("datetime");

                entity.Property(e => e.ExecutiveId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.ReminderType)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmCallStatusChart>(entity =>
            {
                entity.ToTable("CRM_CallStatusChart");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CheckList)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Point1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Point2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Point3)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmCallStatusMaster>(entity =>
            {
                entity.HasKey(e => e.PkcallStatusId);

                entity.ToTable("CRM_CallStatusMaster");

                entity.Property(e => e.PkcallStatusId)
                    .HasColumnName("PKCallStatusID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CallStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallStatusCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CallStatusColorCode).HasMaxLength(30);

                entity.Property(e => e.CallStatusDesc).IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<CrmCallSupportingActivities>(entity =>
            {
                entity.HasKey(e => e.PkcallSupportId);

                entity.ToTable("CRM_CallSupportingActivities");

                entity.HasIndex(e => new { e.PkcallSupportId, e.Code, e.ActivityId, e.FkcallId })
                    .HasName("FKCallId");

                entity.HasIndex(e => new { e.PkcallSupportId, e.FkcallId, e.Code, e.ActivityId })
                    .HasName("ActivityId");

                entity.Property(e => e.PkcallSupportId)
                    .HasColumnName("PKCallSupportId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkcallId)
                    .HasColumnName("FKCallId")
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmCampaignMaster>(entity =>
            {
                entity.HasKey(e => e.PkcampaignId);

                entity.ToTable("CRM_CampaignMaster");

                entity.Property(e => e.PkcampaignId)
                    .HasColumnName("PKCampaignId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CampaignCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CampaignManager)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CampaignName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CampaignType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CrmChannelSuspContactDtls>(entity =>
            {
                entity.HasKey(e => e.PksuspContactDtlsId);

                entity.ToTable("CRM_ChannelSuspContactDtls");

                entity.Property(e => e.PksuspContactDtlsId)
                    .HasColumnName("PKSuspContactDtlsID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPersonDept)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DateofBirth).HasColumnType("datetime");

                entity.Property(e => e.Designation)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmailId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FksuspectId)
                    .HasColumnName("FKSuspectId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Telephone)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmChannelSuspProdctDtls>(entity =>
            {
                entity.HasKey(e => e.PkprospectProductDtlsId);

                entity.ToTable("CRM_ChannelSuspProdctDtls");

                entity.Property(e => e.PkprospectProductDtlsId)
                    .HasColumnName("PKProspectProductDtlsID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.FkchannSuspectId)
                    .HasColumnName("FKChannSuspectId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkproductId)
                    .HasColumnName("FKProductId")
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmChannelSuspectMaster>(entity =>
            {
                entity.HasKey(e => e.PksuspectId);

                entity.ToTable("CRM_ChannelSuspectMaster");

                entity.Property(e => e.PksuspectId)
                    .HasColumnName("PKSuspectId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessDetails)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ByChannelId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyUrl)
                    .HasColumnName("CompanyURL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailMsgId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FirmAlias)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirmName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.FkbusiSegmentId)
                    .HasColumnName("FKBusiSegmentId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkcityId)
                    .HasColumnName("FKCityId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkconsigneeId)
                    .HasColumnName("FKConsigneeId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkcustomerId)
                    .HasColumnName("FKCustomerId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkenqSourceId)
                    .HasColumnName("FKEnqSourceId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkplantId)
                    .HasColumnName("FKPlantId")
                    .HasMaxLength(36)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FkterritoryId)
                    .HasColumnName("FKTerritoryId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FuturePlanDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1901-01-01')");

                entity.Property(e => e.IsLocked)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LastCssdate)
                    .HasColumnName("LastCSSDate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1901-01-01')");

                entity.Property(e => e.LastCssrating)
                    .HasColumnName("LastCSSRating")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.LastShipmentDate).HasColumnType("datetime");

                entity.Property(e => e.LastSodate)
                    .HasColumnName("LastSODate")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastSoscheduleDate)
                    .HasColumnName("LastSOScheduleDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.LeadGivenByid)
                    .HasColumnName("LeadGivenBYId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LeadStatusChangedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LeadStatusChangedDate).HasColumnType("datetime");

                entity.Property(e => e.LockFor)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LockTillDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1900)-(1))-(1))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MoveToArchieveBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MoveToArchieveDt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('01-01-1900')");

                entity.Property(e => e.MoveToArchieveNotes)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MoveToArchieveReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoOfEmployees).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.NoOfOffices).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.OrderStatusChangedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderStatusChangedDate).HasColumnType("datetime");

                entity.Property(e => e.ProspectStatusChangedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProspectStatusChangedDate).HasColumnType("datetime");

                entity.Property(e => e.ReasonCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RejectionReason)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SuspectCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Turnover).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<CrmCityMaster>(entity =>
            {
                entity.HasKey(e => e.PkcityId);

                entity.ToTable("CRM_CityMaster");

                entity.HasIndex(e => new { e.CityName, e.FktalukaId, e.FkdistrictId, e.FkterritoryId })
                    .HasName("FKTerritoryId");

                entity.HasIndex(e => new { e.PkcityId, e.CityName, e.FkdistrictId, e.FkstateId, e.FkcountryId, e.PinCode, e.FkterritoryId, e.FktalukaId })
                    .HasName("FKTalukaId");

                entity.HasIndex(e => new { e.PkcityId, e.CityName, e.FktalukaId, e.FkdistrictId, e.FkcountryId, e.PinCode, e.FkterritoryId, e.FkstateId })
                    .HasName("FKStateId");

                entity.HasIndex(e => new { e.PkcityId, e.CityName, e.FktalukaId, e.FkdistrictId, e.FkstateId, e.PinCode, e.FkterritoryId, e.FkcountryId })
                    .HasName("FKCountryId");

                entity.HasIndex(e => new { e.PkcityId, e.CityName, e.FktalukaId, e.FkstateId, e.FkcountryId, e.PinCode, e.FkterritoryId, e.FkdistrictId })
                    .HasName("FKDistrictId");

                entity.Property(e => e.PkcityId)
                    .HasColumnName("PKCityID")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CityName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkcountryId)
                    .HasColumnName("FKCountryId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkdistrictId)
                    .HasColumnName("FKDistrictId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkstateId)
                    .HasColumnName("FKStateId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FktalukaId)
                    .HasColumnName("FKTalukaId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkterritoryId)
                    .HasColumnName("FKTerritoryId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PinCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmCollectionCallErrLog>(entity =>
            {
                entity.HasKey(e => e.CollectionErrId)
                    .HasName("PK__CollectionErrId");

                entity.ToTable("CRM_CollectionCallErrLog");

                entity.Property(e => e.CollectionErrId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Isclose)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NextActionDateTime).HasColumnType("datetime");

                entity.Property(e => e.PartyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Reason)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Seid)
                    .HasColumnName("SEId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SouceId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmCollectionCallList>(entity =>
            {
                entity.HasKey(e => e.CollectionCallId)
                    .HasName("PK_CRM_ColectionCallList");

                entity.ToTable("CRM_CollectionCallList");

                entity.HasIndex(e => new { e.CurrentCallOwner, e.CallType, e.Isclose, e.NextActionDateTime, e.CallStatus })
                    .HasName("CallStatus");

                entity.Property(e => e.CollectionCallId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BankName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.BranchName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CallRescheduleReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallStart).HasColumnType("datetime");

                entity.Property(e => e.CallStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallTransferReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Campaign)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CollectMode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ContactId).HasMaxLength(36);

                entity.Property(e => e.CurrentCallOwner)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DifferenceAmount)
                    .HasColumnType("numeric(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DifferenceReason)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FkplantId)
                    .IsRequired()
                    .HasColumnName("FKPlantId")
                    .HasMaxLength(36)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.InstrNo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Instrdate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsBalTds)
                    .HasColumnName("IsBalTDS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Isclose)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LatestRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NextAction)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NextActionDateTime).HasColumnType("datetime");

                entity.Property(e => e.OutcomeCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PresalesExecutiveId)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PresalesSupportDetails)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PresalesSupportDueDate).HasColumnType("datetime");

                entity.Property(e => e.PresalesSupportRequired)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PromiseChangeCount).HasDefaultValueSql("((0))");

                entity.Property(e => e.PromiseChangeReason)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PromiseDate).HasColumnType("date");

                entity.Property(e => e.ProspectId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Seid)
                    .HasColumnName("SEId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SouceId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Source)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tdsamount)
                    .HasColumnName("TDSAmount")
                    .HasColumnType("numeric(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalHoursSpent)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmCommonWordMaster>(entity =>
            {
                entity.HasKey(e => e.PkwordId);

                entity.ToTable("CRM_CommonWordMaster");

                entity.Property(e => e.PkwordId)
                    .HasColumnName("PKWordId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.WordDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmCompetitorAgainstCall>(entity =>
            {
                entity.HasKey(e => e.Pkid)
                    .HasName("PKId");

                entity.ToTable("CRM_CompetitorAgainstCall");

                entity.Property(e => e.Pkid)
                    .HasColumnName("PKId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.CallId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkcompetitorId)
                    .IsRequired()
                    .HasColumnName("FKCompetitorId")
                    .HasMaxLength(36);

                entity.Property(e => e.IsDeleted)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");
            });

            modelBuilder.Entity<CrmCompetitorDealerMaster>(entity =>
            {
                entity.HasKey(e => e.PkcompetitorDealerId);

                entity.ToTable("CRM_CompetitorDealerMaster");

                entity.Property(e => e.PkcompetitorDealerId)
                    .HasColumnName("PKCompetitorDealerId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DealerName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<CrmCompetitorMaster>(entity =>
            {
                entity.HasKey(e => e.PkcompetitorId)
                    .HasName("PKCompetitorId");

                entity.ToTable("CRM_CompetitorMaster");

                entity.Property(e => e.PkcompetitorId)
                    .HasColumnName("PKCompetitorId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.CompetitorName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MarketPosition)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Realations)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Website)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmCompetitorProductMaster>(entity =>
            {
                entity.HasKey(e => e.PkcompetitorProductId)
                    .HasName("PKCompetitorProductId");

                entity.ToTable("CRM_CompetitorProductMaster");

                entity.Property(e => e.PkcompetitorProductId)
                    .HasColumnName("PKCompetitorProductId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.Feature)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FkcompetitorId)
                    .IsRequired()
                    .HasColumnName("FKCompetitorId")
                    .HasMaxLength(36);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.OurProduct)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Product)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmCssdetail>(entity =>
            {
                entity.HasKey(e => e.PkcssDtlsId)
                    .HasName("PKCssDtlsID");

                entity.ToTable("CRM_CSSDetail");

                entity.HasIndex(e => new { e.FkcssHeaderId, e.FkquesId })
                    .HasName("FKQuesId");

                entity.Property(e => e.PkcssDtlsId)
                    .HasColumnName("PKCssDtlsID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FkcssHeaderId)
                    .HasColumnName("FKCssHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkquesId)
                    .HasColumnName("FKQuesId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ResponseByCustomer).IsUnicode(false);

                entity.Property(e => e.SelectionValue)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmCssformQuesDtls>(entity =>
            {
                entity.HasKey(e => e.PkformQuesDtls);

                entity.ToTable("CRM_CSSFormQuesDtls");

                entity.Property(e => e.PkformQuesDtls)
                    .HasColumnName("PKFormQuesDtls")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.FkcssFormsQuesId)
                    .HasColumnName("FKCssFormsQuesID")
                    .HasMaxLength(50);

                entity.Property(e => e.FkformId)
                    .HasColumnName("FKFormId")
                    .HasMaxLength(50);

                entity.Property(e => e.FkprimaryQuesId)
                    .HasColumnName("FKPrimaryQuesId")
                    .HasMaxLength(50);

                entity.Property(e => e.FksecondaryQuesId)
                    .HasColumnName("FKSecondaryQuesId")
                    .HasMaxLength(50);

                entity.Property(e => e.IfResponseId).HasMaxLength(50);
            });

            modelBuilder.Entity<CrmCssformsMaster>(entity =>
            {
                entity.HasKey(e => e.PkcssFormsId)
                    .HasName("PKCssFormsId");

                entity.ToTable("CRM_CSSFormsMaster");

                entity.Property(e => e.PkcssFormsId)
                    .HasColumnName("PKCssFormsId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CoordinatorId).HasMaxLength(36);

                entity.Property(e => e.CssformsCode)
                    .IsRequired()
                    .HasColumnName("CSSFormsCode")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CssformsDesc)
                    .IsRequired()
                    .HasColumnName("CSSFormsDesc")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.EffectiveFrmDt).HasColumnType("datetime");

                entity.Property(e => e.EffectiveToDt).HasColumnType("datetime");

                entity.Property(e => e.FksalesFamilyId)
                    .HasColumnName("FKSalesFamilyId")
                    .HasMaxLength(36);

                entity.Property(e => e.IsCompletionMailSent)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsReminder)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.IsWeightage).HasDefaultValueSql("((0))");

                entity.Property(e => e.MailPercentage)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ReminderFrequency)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.UseForProspect)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WebsiteLink)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmCssformsQuestns>(entity =>
            {
                entity.HasKey(e => e.PkcssFormsQuesId)
                    .HasName("PKCssFormsQuesID");

                entity.ToTable("CRM_CSSFormsQuestns");

                entity.HasIndex(e => new { e.FkquesId, e.Weightage, e.IsResponseMandatory, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.SequenceNo, e.ExpectedResponse, e.IsBranching, e.IfResponseId, e.DisableQuesStr, e.GroupId, e.GroupName, e.MaxNoOfResponses, e.MaxExpectedResponse, e.ResponseType, e.PkcssFormsQuesId, e.IsDeleted, e.FkCssFormsId })
                    .HasName("FKCSSFormId");

                entity.Property(e => e.PkcssFormsQuesId)
                    .HasColumnName("PKCssFormsQuesID")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.DisableQuesStr).HasColumnType("nvarchar(max)");

                entity.Property(e => e.ExpectedResponse).HasColumnType("varchar(max)");

                entity.Property(e => e.FkCssFormsId).HasMaxLength(36);

                entity.Property(e => e.FkquesId)
                    .IsRequired()
                    .HasColumnName("FKQuesId")
                    .HasMaxLength(36);

                entity.Property(e => e.GroupId).HasColumnName("GroupID");

                entity.Property(e => e.GroupName).HasMaxLength(500);

                entity.Property(e => e.IfResponseId).HasMaxLength(50);

                entity.Property(e => e.IsBranching).HasMaxLength(1);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsResponseMandatory).HasMaxLength(1);

                entity.Property(e => e.MaxExpectedResponse)
                    .IsRequired()
                    .HasColumnType("varchar(max)")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ResponseType)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<CrmCssheader>(entity =>
            {
                entity.HasKey(e => e.PkcssHeaderId)
                    .HasName("PKCssHeaderId");

                entity.ToTable("CRM_CSSHeader");

                entity.HasIndex(e => new { e.PkcssHeaderId, e.FkcssFormsId, e.OverallRating, e.AddedBy, e.AddedDt, e.Notes, e.TotalRating, e.Percentage, e.Grade, e.FkcustomerId, e.IsDeleted })
                    .HasName("FKCustomerId");

                entity.HasIndex(e => new { e.PkcssHeaderId, e.FkcustomerId, e.FkcssFormsId, e.FkfeedbackById, e.FeedBackDate, e.FeedBackStarttime, e.FeedBackEndtime, e.TimeSpent, e.OverallRating, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.IsDeleted, e.FeedBackCallId, e.Notes, e.TotalRating, e.Percentage, e.Grade, e.IsRequestToCustomer, e.IsRequestSentTo, e.MailFormatId, e.IsResponseGiven, e.LastReminderDate, e.ReminderSentCount, e.FkdatasheetSchId, e.FreqDescriptor, e.Status, e.ScheduleDate, e.AllowDatasheetEntryOn, e.SaveActivityAction, e.ItemLevelApproval, e.Attachment, e.FkactivityId })
                    .HasName("FKActivityId");

                entity.Property(e => e.PkcssHeaderId)
                    .HasColumnName("PKCssHeaderId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AllowDatasheetEntryOn)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.AssignNew)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Attachment).HasMaxLength(10);

                entity.Property(e => e.FeedBackCallId).HasMaxLength(36);

                entity.Property(e => e.FeedBackDate).HasColumnType("datetime");

                entity.Property(e => e.FeedBackEndtime)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FeedBackStarttime)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FkactivityId)
                    .HasColumnName("FKActivityId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkcssFormsId)
                    .IsRequired()
                    .HasColumnName("FKCssFormsId")
                    .HasMaxLength(36);

                entity.Property(e => e.FkcustomerId)
                    .IsRequired()
                    .HasColumnName("FKCustomerId")
                    .HasMaxLength(36);

                entity.Property(e => e.FkdatasheetSchId)
                    .IsRequired()
                    .HasColumnName("FKDatasheetSchId")
                    .HasMaxLength(36)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FkfeedbackById)
                    .IsRequired()
                    .HasColumnName("FKFeedbackById")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FreqDescriptor).HasMaxLength(1000);

                entity.Property(e => e.Grade)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsRequestSentTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsRequestToCustomer)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.IsResponseGiven)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.ItemLevelApproval).HasMaxLength(10);

                entity.Property(e => e.LastReminderDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MailFormatId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Notes).HasColumnType("varchar(max)");

                entity.Property(e => e.OverallRating).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Percentage).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SaveActivityAction)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleDate).HasColumnType("datetime");

                entity.Property(e => e.TimeSpent)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.TotalRating).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<CrmCssquestionMaster>(entity =>
            {
                entity.HasKey(e => e.PkquesId)
                    .HasName("PKQuesID");

                entity.ToTable("CRM_CSSQuestionMaster");

                entity.Property(e => e.PkquesId)
                    .HasColumnName("PKQuesID")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ExtMasterName).HasMaxLength(100);

                entity.Property(e => e.IsDeleted)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsExtMaster).HasMaxLength(1);

                entity.Property(e => e.MaxValueText)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.QuesCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QuesText)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ResponseType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SelectionText)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SelectionType).HasMaxLength(100);

                entity.Property(e => e.SelectionValue)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmCssselection>(entity =>
            {
                entity.HasKey(e => e.PkcssSelectionId)
                    .HasName("PKCssSelectionId");

                entity.ToTable("CRM_CSSSelection");

                entity.Property(e => e.PkcssSelectionId)
                    .HasColumnName("PKCssSelectionId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FkquesId)
                    .IsRequired()
                    .HasColumnName("FKQuesID")
                    .HasMaxLength(36);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SelectionText)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmCustomerFeedbackMailFormat>(entity =>
            {
                entity.HasKey(e => e.PkmailFormatId);

                entity.ToTable("CRM_CustomerFeedbackMailFormat");

                entity.Property(e => e.PkmailFormatId)
                    .HasColumnName("PKMailFormatId")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.MailFormat).IsUnicode(false);

                entity.Property(e => e.PageLink)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Subject).IsUnicode(false);
            });

            modelBuilder.Entity<CrmDistrictMaster>(entity =>
            {
                entity.HasKey(e => e.PkdistrictId);

                entity.ToTable("CRM_DistrictMaster");

                entity.HasIndex(e => new { e.PkdistrictId, e.DistrictNo, e.DistrictDesc, e.IsDeleted, e.FkstateId })
                    .HasName("FKStateId");

                entity.Property(e => e.PkdistrictId)
                    .HasColumnName("PKDistrictId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.DistrictDesc)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DistrictNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkstateId)
                    .HasColumnName("FKStateId")
                    .HasMaxLength(36);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<CrmEnquiryRegister>(entity =>
            {
                entity.HasKey(e => e.EnquiryRegistryId)
                    .HasName("PK__CRM_Enqu__59E8764E259659B5");

                entity.ToTable("CRM_EnquiryRegister");

                entity.Property(e => e.EnquiryRegistryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActionTaken)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Addeddt).HasColumnType("datetime");

                entity.Property(e => e.AssignedToId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CallId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EnquiryDate).HasColumnType("datetime");

                entity.Property(e => e.EnquiryDetails)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ReasonForCancellation)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RegistryById)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmExecutiveMaster>(entity =>
            {
                entity.HasKey(e => e.PkentityId)
                    .HasName("PK_CRM_EntityMaster");

                entity.ToTable("CRM_ExecutiveMaster");

                entity.Property(e => e.PkentityId)
                    .HasColumnName("PKEntityId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ExecTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkcustVendId)
                    .HasColumnName("FKCustVendId")
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmFeedBackCallList>(entity =>
            {
                entity.HasKey(e => e.FeedBackCallId);

                entity.ToTable("CRM_FeedBackCallList");

                entity.HasIndex(e => new { e.FeedBackCallId, e.ProspectId, e.CallStart, e.Source, e.SouceId, e.Seid, e.BackOfficeExecutiveId, e.LatestRemark, e.NextAction, e.CallType, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.OutcomeCode, e.CallRescheduleReason, e.CallTransferReasonCode, e.CallAgainReasonCode, e.ContactId, e.EmailCount, e.VisitCount, e.TeleCount, e.Campaign, e.TotalHoursSpent, e.Calllife, e.CallCloseReason, e.CallCloseDetails, e.FkFamilyId, e.FkCssFormsId, e.FeedbackCompletedDateTime, e.RescheduleCount, e.FkplantId, e.CurrentCallOwner, e.Isclose, e.NextActionDateTime })
                    .HasName("CurrentCallOwnerIsClose");

                entity.HasIndex(e => new { e.FeedBackCallId, e.ProspectId, e.CallStart, e.Source, e.SouceId, e.Seid, e.BackOfficeExecutiveId, e.LatestRemark, e.NextAction, e.CallType, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.OutcomeCode, e.CallRescheduleReason, e.CallTransferReasonCode, e.CallAgainReasonCode, e.ContactId, e.EmailCount, e.VisitCount, e.TeleCount, e.Campaign, e.TotalHoursSpent, e.Calllife, e.CallCloseReason, e.CallCloseDetails, e.FkFamilyId, e.FkCssFormsId, e.FeedbackCompletedDateTime, e.RescheduleCount, e.FkplantId, e.CurrentCallOwner, e.NextActionDateTime, e.Isclose })
                    .HasName("CurrentCallOwner");

                entity.Property(e => e.FeedBackCallId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BackOfficeExecutiveId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallAgainReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallCloseDetails).HasColumnType("varchar(max)");

                entity.Property(e => e.CallCloseReason).HasMaxLength(36);

                entity.Property(e => e.CallRescheduleReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CallStart).HasColumnType("datetime");

                entity.Property(e => e.CallTransferReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Campaign)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactId).HasMaxLength(36);

                entity.Property(e => e.CurrentCallOwner)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FeedbackCompletedDateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('1901-01-01')");

                entity.Property(e => e.FkCssFormsId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkFamilyId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkplantId)
                    .IsRequired()
                    .HasColumnName("FKPlantId")
                    .HasMaxLength(36)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Isclose)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LatestRemark).HasColumnType("varchar(max)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NextAction)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NextActionDateTime).HasColumnType("datetime");

                entity.Property(e => e.OutcomeCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ProspectId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Seid)
                    .HasColumnName("SEId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SouceId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Source)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalHoursSpent)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmFutureCallProductDetails>(entity =>
            {
                entity.HasKey(e => e.PkCallProductId)
                    .HasName("PK_FutureCallProductDetails");

                entity.ToTable("CRM_FutureCallProductDetails");

                entity.Property(e => e.PkCallProductId)
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.CallId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkProductId)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FkfuturePlanId)
                    .HasColumnName("FKFuturePlanId")
                    .HasMaxLength(36);
            });

            modelBuilder.Entity<CrmFuturePlan>(entity =>
            {
                entity.HasKey(e => e.PkfuturePlanId)
                    .HasName("PKFuturePlanId");

                entity.ToTable("CRM_FuturePlan");

                entity.Property(e => e.PkfuturePlanId)
                    .HasColumnName("PKFuturePlanId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ExecutiveId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkcallId)
                    .IsRequired()
                    .HasColumnName("FKCallId")
                    .HasMaxLength(36);

                entity.Property(e => e.FksuspectId)
                    .IsRequired()
                    .HasColumnName("FKSuspectId")
                    .HasMaxLength(36);

                entity.Property(e => e.IsDeleted)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.NextAction)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NextDate).HasColumnType("datetime");

                entity.Property(e => e.Notes).IsUnicode(false);
            });

            modelBuilder.Entity<CrmItemClassification>(entity =>
            {
                entity.HasKey(e => e.PkitemClassId);

                entity.ToTable("CRM_ItemClassification");

                entity.HasIndex(e => new { e.PkitemClassId, e.IsDeleted, e.ErpitemClassId })
                    .HasName("ERPItemClassId");

                entity.Property(e => e.PkitemClassId)
                    .HasColumnName("PKItemClassId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ErpitemClassId)
                    .HasColumnName("ERPItemClassId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmMailinglistAuthors>(entity =>
            {
                entity.HasKey(e => e.PkmailingListAuthorId);

                entity.ToTable("CRM_MailinglistAuthors");

                entity.Property(e => e.PkmailingListAuthorId)
                    .HasColumnName("PKMailingListAuthorId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.FkauthorId)
                    .HasColumnName("FKAuthorId")
                    .HasMaxLength(50);

                entity.Property(e => e.FkmailListId)
                    .HasColumnName("FKMailListId")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CrmMailinglistDtl>(entity =>
            {
                entity.HasKey(e => e.PkmaillistDtlId);

                entity.ToTable("CRM_MailinglistDtl");

                entity.Property(e => e.PkmaillistDtlId)
                    .HasColumnName("PKMaillistDtlId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy).HasMaxLength(36);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FkmailListId)
                    .HasColumnName("FKMailListId")
                    .HasMaxLength(36);

                entity.Property(e => e.FkprospectId)
                    .HasColumnName("FKProspectId")
                    .HasMaxLength(36);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(36);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<CrmMailinglistMaster>(entity =>
            {
                entity.HasKey(e => e.PkmaillistId);

                entity.ToTable("CRM_MailinglistMaster");

                entity.Property(e => e.PkmaillistId)
                    .HasColumnName("PKMaillistId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy).HasMaxLength(36);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FkprimaryController)
                    .HasColumnName("FKPrimaryController")
                    .HasMaxLength(36);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MailListName).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(36);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<CrmMailinglistViewers>(entity =>
            {
                entity.HasKey(e => e.PkmailingListViewerId);

                entity.ToTable("CRM_MailinglistViewers");

                entity.Property(e => e.PkmailingListViewerId)
                    .HasColumnName("PKMailingListViewerId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.FkmailListId)
                    .HasColumnName("FKMailListId")
                    .HasMaxLength(50);

                entity.Property(e => e.FkviewerId)
                    .HasColumnName("FKViewerId")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CrmMaterialMovementMaster>(entity =>
            {
                entity.HasKey(e => e.PkmaterialmovementId);

                entity.ToTable("CRM_MaterialMovementMaster");

                entity.Property(e => e.PkmaterialmovementId)
                    .HasColumnName("PKMaterialmovementId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(500);

                entity.Property(e => e.ExpectedReceiptDate).HasColumnType("datetime");

                entity.Property(e => e.FkfromLocationId)
                    .HasColumnName("FKFromLocationId")
                    .HasMaxLength(50);

                entity.Property(e => e.FkfromPlantId)
                    .HasColumnName("FKFromPlantId")
                    .HasMaxLength(50);

                entity.Property(e => e.FkfromWarehouseId)
                    .HasColumnName("FKFromWarehouseId")
                    .HasMaxLength(50);

                entity.Property(e => e.FkmodeofDeliveryId)
                    .HasColumnName("FKModeofDeliveryId")
                    .HasMaxLength(50);

                entity.Property(e => e.FkmodeofTransport)
                    .HasColumnName("FKModeofTransport")
                    .HasMaxLength(50);

                entity.Property(e => e.FkrecipientId)
                    .HasColumnName("FKRecipientId")
                    .HasMaxLength(50);

                entity.Property(e => e.FksenderId)
                    .HasColumnName("FKSenderId")
                    .HasMaxLength(50);

                entity.Property(e => e.FktoLocationId)
                    .HasColumnName("FKToLocationId")
                    .HasMaxLength(50);

                entity.Property(e => e.FktoPlantId)
                    .HasColumnName("FKToPlantId")
                    .HasMaxLength(50);

                entity.Property(e => e.FktoWarehouseId)
                    .HasColumnName("FKToWarehouseId")
                    .HasMaxLength(50);

                entity.Property(e => e.FktransporterId)
                    .HasColumnName("FKTransporterId")
                    .HasMaxLength(50);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Lrno)
                    .HasColumnName("LRNo")
                    .HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<CrmMaterialMovementProductDtls>(entity =>
            {
                entity.HasKey(e => e.PkmaterialMoveDtlId);

                entity.ToTable("CRM_MaterialMovementProductDtls");

                entity.Property(e => e.PkmaterialMoveDtlId)
                    .HasColumnName("PKMaterialMoveDtlId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetNo).HasMaxLength(50);

                entity.Property(e => e.FkmaterialMoveId)
                    .HasColumnName("FKMaterialMoveId")
                    .HasMaxLength(36);

                entity.Property(e => e.FkproductId)
                    .HasColumnName("FKProductId")
                    .HasMaxLength(50);

                entity.Property(e => e.Quantity).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<CrmMaterialReceivedDtls>(entity =>
            {
                entity.HasKey(e => e.PkmaterialReceiveDtlId);

                entity.ToTable("CRM_MaterialReceivedDtls");

                entity.Property(e => e.PkmaterialReceiveDtlId)
                    .HasColumnName("PKMaterialReceiveDtlID")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FkhandedOverId)
                    .HasColumnName("FKHandedOverId")
                    .HasMaxLength(50);

                entity.Property(e => e.FkmaterialmovementId)
                    .HasColumnName("FKMaterialmovementId")
                    .HasMaxLength(50);

                entity.Property(e => e.FkrecipientId)
                    .HasColumnName("FKRecipientId")
                    .HasMaxLength(50);

                entity.Property(e => e.FktoLocationId)
                    .HasColumnName("FKToLocationId")
                    .HasMaxLength(50);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ReceivedDate).HasColumnType("datetime");

                entity.Property(e => e.ReceivedStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivedTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<CrmMaterialReceivedProductDtls>(entity =>
            {
                entity.HasKey(e => e.PkmaterialRcvProDtlId);

                entity.ToTable("CRM_MaterialReceivedProductDtls");

                entity.Property(e => e.PkmaterialRcvProDtlId)
                    .HasColumnName("PKMaterialRcvProDtlId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetNo).HasMaxLength(50);

                entity.Property(e => e.FkmaterialReceiveDtlId)
                    .HasColumnName("FKMaterialReceiveDtlID")
                    .HasMaxLength(36);

                entity.Property(e => e.FkproductId)
                    .HasColumnName("FKProductId")
                    .HasMaxLength(50);

                entity.Property(e => e.Quantity).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<CrmOasheader>(entity =>
            {
                entity.HasKey(e => e.OasmasterId);

                entity.ToTable("CRM_OASHeader");

                entity.Property(e => e.OasmasterId)
                    .HasColumnName("OASMasterId")
                    .HasMaxLength(100)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AgencyName).HasMaxLength(30);

                entity.Property(e => e.BillingCycle)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BillinginfUser)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Billinginformation)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ContactNoCustomer)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerOrderNo).HasMaxLength(30);

                entity.Property(e => e.Email)
                    .HasColumnName("EMail")
                    .HasMaxLength(30);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MobileNo).HasMaxLength(30);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Oasno)
                    .HasColumnName("OASNo")
                    .HasMaxLength(30);

                entity.Property(e => e.OrderBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OrderreferBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PreBidNo).HasMaxLength(30);

                entity.Property(e => e.PreBidNoDate).HasColumnType("datetime");

                entity.Property(e => e.QuotationAmount).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.QuotationDate).HasColumnType("datetime");

                entity.Property(e => e.RefNo).HasMaxLength(30);

                entity.Property(e => e.Reference)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseDate).HasColumnType("datetime");

                entity.Property(e => e.SchemeName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Sono)
                    .HasColumnName("SONo")
                    .HasMaxLength(30);

                entity.Property(e => e.SpecialInstruction)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TelephoneNo).HasMaxLength(30);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(9, 0)");
            });

            modelBuilder.Entity<CrmOutcome>(entity =>
            {
                entity.HasKey(e => e.PkoutcomeId);

                entity.ToTable("CRM_Outcome");

                entity.HasIndex(e => new { e.PkoutcomeId, e.Outcome, e.Code })
                    .HasName("Code");

                entity.HasIndex(e => new { e.PkoutcomeId, e.Outcome, e.IsActivity, e.IsEmail, e.Code, e.ActivityFunctionality, e.EmailFunctionality, e.ActivityTypeId })
                    .HasName("ActivityTypeId");

                entity.Property(e => e.PkoutcomeId)
                    .HasColumnName("PKOutcomeId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityTypeId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsActivity)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsApprover)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsEmail)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsRequest)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LeadTime)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MilestoneSeqNo)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Outcome)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OutcomeType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Sales')");

                entity.Property(e => e.ShowOthers)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");
            });

            modelBuilder.Entity<CrmProductScripts>(entity =>
            {
                entity.HasKey(e => e.PkproductScriptId)
                    .HasName("PKProductScriptId");

                entity.ToTable("CRM_ProductScripts");

                entity.Property(e => e.PkproductScriptId)
                    .HasColumnName("PKProductScriptId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FamilyId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProductId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScriptDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmPromSchMaster>(entity =>
            {
                entity.HasKey(e => e.PkpromoSchemeId);

                entity.ToTable("CRM_PromSchMaster");

                entity.Property(e => e.PkpromoSchemeId)
                    .HasColumnName("PKPromoSchemeID")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.EffectiveFromDate).HasColumnType("datetime");

                entity.Property(e => e.EffectiveToDate).HasColumnType("datetime");

                entity.Property(e => e.IsProductServiceAmc)
                    .HasColumnName("IsProduct_Service_AMC")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SchemeCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SchemeName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmPromoScheProductDtls>(entity =>
            {
                entity.HasKey(e => e.PkpromoScheProdctId);

                entity.ToTable("CRM_PromoScheProductDtls");

                entity.HasIndex(e => new { e.PkpromoScheProdctId, e.FkproductId, e.PromotionalPrice, e.PromotionalDiscount, e.MinimumQty, e.MinimumValue, e.IsActive, e.FkpromoSchemeId })
                    .HasName("FKPromoSchemeID");

                entity.HasIndex(e => new { e.PkpromoScheProdctId, e.FkpromoSchemeId, e.PromotionalPrice, e.PromotionalDiscount, e.MinimumQty, e.MinimumValue, e.IsActive, e.FkproductId })
                    .HasName("FKProductId");

                entity.Property(e => e.PkpromoScheProdctId)
                    .HasColumnName("PKPromoScheProdctID")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FkproductId)
                    .HasColumnName("FKProductId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkpromoSchemeId)
                    .HasColumnName("FKPromoSchemeID")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.MinimumQty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MinimumValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PromotionalDiscount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PromotionalPrice).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<CrmQuotation>(entity =>
            {
                entity.HasKey(e => e.PkquotationId)
                    .HasName("PKQuotationId");

                entity.ToTable("CRM_Quotation");

                entity.Property(e => e.PkquotationId)
                    .HasColumnName("PKQuotationId")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CallId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExecutiveId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OuotationValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QuatationFileName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationDatetime).HasColumnType("datetime");

                entity.Property(e => e.QuotationDocPath)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationNo)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmReasonCatgryMaster>(entity =>
            {
                entity.HasKey(e => e.PkreasonCatgryId);

                entity.ToTable("CRM_ReasonCatgryMaster");

                entity.Property(e => e.PkreasonCatgryId)
                    .HasColumnName("PKReasonCatgryID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ReasonCategory)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmReasonMaster>(entity =>
            {
                entity.HasKey(e => e.PkreasonId)
                    .HasName("PK_CRM_ReasonMaster_1");

                entity.ToTable("CRM_ReasonMaster");

                entity.HasIndex(e => new { e.PkreasonId, e.ReasonCode, e.ReasonDescription, e.IsDeleted, e.FkreasonCategoryId })
                    .HasName("FKReasonCategoryID");

                entity.Property(e => e.PkreasonId)
                    .HasColumnName("PKReasonID")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FkreasonCategoryId)
                    .HasColumnName("FKReasonCategoryID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ReasonCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmRgtdtlsForUc>(entity =>
            {
                entity.HasKey(e => e.Pkrgtdtls);

                entity.ToTable("CRM_RGTDtlsForUC");

                entity.HasIndex(e => new { e.Pkrgtdtls, e.RptName, e.TechnicalName, e.RptXmlId })
                    .HasName("RptXmlId");

                entity.Property(e => e.Pkrgtdtls)
                    .HasColumnName("PKRGTDtls")
                    .ValueGeneratedNever();

                entity.Property(e => e.RptName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RptXmlId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TechnicalName)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmSalesFamilyUsers>(entity =>
            {
                entity.HasKey(e => e.PksalesFmlyUserId)
                    .HasName("PKSalesFmlyUserId");

                entity.ToTable("CRM_SalesFamilyUsers");

                entity.Property(e => e.PksalesFmlyUserId)
                    .HasColumnName("PKSalesFmlyUserId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FkfamilyId)
                    .HasColumnName("FKFamilyId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkuserMasterId)
                    .HasColumnName("FKUserMasterID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MailSettingDays).HasDefaultValueSql("((15))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<CrmStateMaster>(entity =>
            {
                entity.HasKey(e => e.PkstateId);

                entity.ToTable("CRM_StateMaster");

                entity.HasIndex(e => new { e.PkstateId, e.StateNo, e.StateDesc, e.IsDeleted, e.FkcountryId })
                    .HasName("FKCountryId");

                entity.Property(e => e.PkstateId)
                    .HasColumnName("PKStateId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FkcountryId)
                    .HasColumnName("FKCountryId")
                    .HasMaxLength(36);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.StateCodeNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StateDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StateNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmSuspContactDtls>(entity =>
            {
                entity.HasKey(e => e.PksuspContactDtlsId);

                entity.ToTable("CRM_SuspContactDtls");

                entity.HasIndex(e => new { e.IsPrimaryContact, e.FksuspectId })
                    .HasName("IsPrimaryContact");

                entity.HasIndex(e => new { e.PksuspContactDtlsId, e.ContactName, e.Designation, e.Telephone, e.Fax, e.EmailId, e.IsActive, e.IsPrimaryContact, e.ContactPersonDept, e.Mobile, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.DateofBirth, e.Title, e.BuyPlan, e.Age, e.Gender, e.SpouseName, e.AnniversaryDate, e.MaritalStatus, e.WhatsAppNo, e.Qualification, e.Experience, e.FksuspectId })
                    .HasName("FKSuspectId");

                entity.Property(e => e.PksuspContactDtlsId)
                    .HasColumnName("PKSuspContactDtlsID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AnniversaryDate).HasColumnType("datetime");

                entity.Property(e => e.BuyPlan)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPersonDept)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DateofBirth).HasColumnType("datetime");

                entity.Property(e => e.Designation)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmailId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Experience)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FksuspectId)
                    .HasColumnName("FKSuspectId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MaritalStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Qualification)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SpouseName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Telephone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.WhatsAppNo)
                    .HasMaxLength(13)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmSuspProdctDtls>(entity =>
            {
                entity.HasKey(e => e.PkprospectProductDtlsId);

                entity.ToTable("CRM_SuspProdctDtls");

                entity.HasIndex(e => new { e.PkprospectProductDtlsId, e.FkproductId, e.FksuspectId })
                    .HasName("FKSuspectId");

                entity.HasIndex(e => new { e.PkprospectProductDtlsId, e.FksuspectId, e.FkproductId })
                    .HasName("FKProductId");

                entity.Property(e => e.PkprospectProductDtlsId)
                    .HasColumnName("PKProspectProductDtlsID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.FkproductId)
                    .HasColumnName("FKProductId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FksuspectId)
                    .HasColumnName("FKSuspectId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PurchaseMode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Uomid)
                    .HasColumnName("UOMId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<CrmSuspectFieldDetail>(entity =>
            {
                entity.HasKey(e => e.PkfieldId);

                entity.ToTable("CRM_SuspectFieldDetail");

                entity.Property(e => e.PkfieldId)
                    .HasColumnName("PKFieldID")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Caption)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FieldType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FkprospectHdrId)
                    .HasColumnName("FKProspectHdrID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsMandatory)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsVisible)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProspectField)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Section)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmSuspectFieldHeader>(entity =>
            {
                entity.HasKey(e => e.PkprospectHdrId);

                entity.ToTable("CRM_SuspectFieldHeader");

                entity.Property(e => e.PkprospectHdrId)
                    .HasColumnName("PKProspectHdrID")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProspectType)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmTalukaMaster>(entity =>
            {
                entity.HasKey(e => e.PktalukaId);

                entity.ToTable("CRM_TalukaMaster");

                entity.HasIndex(e => new { e.PktalukaId, e.TalukaNo, e.TalukaDesc, e.IsDeleted, e.FkdistrictId })
                    .HasName("FKDistrictId");

                entity.Property(e => e.PktalukaId)
                    .HasColumnName("PKTalukaId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FkdistrictId)
                    .HasColumnName("FKDistrictId")
                    .HasMaxLength(36);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.TalukaDesc)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TalukaNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmTargetDetail>(entity =>
            {
                entity.HasKey(e => e.PktargetDetailId);

                entity.ToTable("CRM_TargetDetail");

                entity.Property(e => e.PktargetDetailId)
                    .HasColumnName("PKTargetDetailID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActualValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DisplayDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(((1900)-(1))-(1))");

                entity.Property(e => e.DisplayYear)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExecutiveId)
                    .HasColumnName("ExecutiveID")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FktargetHeadId)
                    .HasColumnName("FKTargetHeadID")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SalesFamilyId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TargetValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TargetYear).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TerritoryId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmTargetHead>(entity =>
            {
                entity.HasKey(e => e.PktargetHeadId);

                entity.ToTable("CRM_TargetHead");

                entity.Property(e => e.PktargetHeadId)
                    .HasColumnName("PKTargetHeadID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.DefinedForId).HasMaxLength(36);

                entity.Property(e => e.DefinedForText)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.TargetCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TargetDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TargetInUnit)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmTargetTransactionDtls>(entity =>
            {
                entity.HasKey(e => e.PktargetDetailId);

                entity.ToTable("CRM_TargetTransactionDtls");

                entity.Property(e => e.PktargetDetailId)
                    .HasColumnName("PKTargetDetailID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActualValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CustCategoryId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExecutiveId)
                    .HasColumnName("ExecutiveID")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FktargetHeadId)
                    .HasColumnName("FKTargetHeadID")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodId)
                    .HasColumnName("PeriodID")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks).IsUnicode(false);

                entity.Property(e => e.SalesFamilyId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TarEndDate).HasColumnType("datetime");

                entity.Property(e => e.TarStartDate).HasColumnType("datetime");

                entity.Property(e => e.TargetValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TerritoryId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmTenderDetails>(entity =>
            {
                entity.HasKey(e => e.TenderDetailId)
                    .HasName("TenderDetailId");

                entity.ToTable("CRM_TenderDetails");

                entity.Property(e => e.TenderDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Addedby)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Addeddt).HasColumnType("datetime");

                entity.Property(e => e.AuthLetReq)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CallId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CorrigendumNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CorrigendumNotes).HasMaxLength(1000);

                entity.Property(e => e.DateofIssue).HasColumnType("datetime");

                entity.Property(e => e.Emdamount)
                    .HasColumnName("EMDAmount")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmdmodeofPayment)
                    .HasColumnName("EMDModeofPayment")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FinCriteria)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FinNotes)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ModeofPayment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Modifiedby)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Modifieddt).HasColumnType("datetime");

                entity.Property(e => e.OfferType)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Pqreq)
                    .HasColumnName("PQReq")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PrebidDt).HasColumnType("datetime");

                entity.Property(e => e.PrebidTime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PurchaseDt).HasColumnType("datetime");

                entity.Property(e => e.PurchaseTime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.QuotType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RevisedDueDate).HasColumnType("datetime");

                entity.Property(e => e.SdmodeofPayment)
                    .HasColumnName("SDModeofPayment")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SecurityDeposite)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SubmissionDt).HasColumnType("datetime");

                entity.Property(e => e.SubmissionTime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TechCriteria)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TechNotes)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TenderDt).HasColumnType("datetime");

                entity.Property(e => e.TenderFee)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TenderNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmTerrUserRelation>(entity =>
            {
                entity.HasKey(e => e.PkterritoryUserRelId);

                entity.ToTable("CRM_TerrUserRelation");

                entity.HasIndex(e => new { e.PkterritoryUserRelId, e.FkterritoryId, e.IsDeleted, e.FkuserMasterId })
                    .HasName("FKUserMasterID");

                entity.HasIndex(e => new { e.PkterritoryUserRelId, e.FkuserMasterId, e.IsDeleted, e.FkterritoryId })
                    .HasName("FKTerritoryId");

                entity.Property(e => e.PkterritoryUserRelId)
                    .HasColumnName("PKTerritoryUserRelID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.FkterritoryId)
                    .HasColumnName("FKTerritoryId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkuserMasterId)
                    .HasColumnName("FKUserMasterID")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmTerritoryMaster>(entity =>
            {
                entity.HasKey(e => e.PkterritoryId);

                entity.ToTable("CRM_TerritoryMaster");

                entity.HasIndex(e => new { e.PkterritoryId, e.TerritoryCode, e.TerritoryName, e.IsDeleted, e.FkparentTerritoryId })
                    .HasName("FKParentTerritoryId");

                entity.Property(e => e.PkterritoryId)
                    .HasColumnName("PKTerritoryId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FkparentTerritoryId)
                    .HasColumnName("FKParentTerritoryId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ManagerId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.TerritoryCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TerritoryName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmTravelPlan>(entity =>
            {
                entity.HasKey(e => e.PktravelPlanId);

                entity.ToTable("CRM_TravelPlan");

                entity.HasIndex(e => e.CityId)
                    .HasName("CityId1");

                entity.HasIndex(e => new { e.PktravelPlanId, e.Date, e.CityId, e.Notes })
                    .HasName("ExecutiveId");

                entity.HasIndex(e => new { e.PktravelPlanId, e.ExecutiveId, e.Date, e.Notes })
                    .HasName("CityId");

                entity.Property(e => e.PktravelPlanId)
                    .HasColumnName("PKTravelPlanId")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CityId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.ExecutiveId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Time)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmVwbinterface>(entity =>
            {
                entity.HasKey(e => e.PkvwbintrfaceId);

                entity.ToTable("CRM_VWBInterface");

                entity.HasIndex(e => new { e.PkvwbintrfaceId, e.FkproductId, e.FkmoduleId, e.FkunitId, e.IsDeleted, e.FkprojectId })
                    .HasName("FKProjectId");

                entity.HasIndex(e => new { e.PkvwbintrfaceId, e.FkproductId, e.FkprojectId, e.FkmoduleId, e.IsDeleted, e.FkunitId })
                    .HasName("FKUnitId");

                entity.HasIndex(e => new { e.PkvwbintrfaceId, e.FkproductId, e.FkprojectId, e.FkunitId, e.IsDeleted, e.FkmoduleId })
                    .HasName("FKModuleId");

                entity.HasIndex(e => new { e.PkvwbintrfaceId, e.FkprojectId, e.FkmoduleId, e.FkunitId, e.IsDeleted, e.FkproductId })
                    .HasName("FKProductId");

                entity.Property(e => e.PkvwbintrfaceId)
                    .HasColumnName("PKVWBIntrfaceId")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.FkmoduleId)
                    .HasColumnName("FKModuleId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkproductId)
                    .HasColumnName("FKProductId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkprojectId)
                    .HasColumnName("FKProjectId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkunitId)
                    .HasColumnName("FKUnitId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrmcallAllocation>(entity =>
            {
                entity.HasKey(e => e.PkallocationId);

                entity.ToTable("CRMCallAllocation");

                entity.HasIndex(e => new { e.PkallocationId, e.FkallocateTo, e.FkproductId, e.FksuspectId })
                    .HasName("FKSuspectId");

                entity.HasIndex(e => new { e.PkallocationId, e.FksuspectId, e.FkallocateTo, e.FkproductId })
                    .HasName("FKProductId");

                entity.HasIndex(e => new { e.PkallocationId, e.FksuspectId, e.FkproductId, e.FkallocateTo })
                    .HasName("FKAllocateTo");

                entity.Property(e => e.PkallocationId)
                    .HasColumnName("PKAllocationId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.FkallocateTo)
                    .HasColumnName("FKAllocateTo")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkproductId)
                    .HasColumnName("FKProductId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FksuspectId)
                    .HasColumnName("FKSuspectId")
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrtnProdDetail>(entity =>
            {
                entity.Property(e => e.CrtnProdDetailId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CartonHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CrtnProdHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CrtnProdPostDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PostQty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ProdQty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.QtyToPost).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RecType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RejQty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CrtnProdHeader>(entity =>
            {
                entity.Property(e => e.CrtnProdHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CrtnProdDt).HasColumnType("datetime");

                entity.Property(e => e.CrtnProdNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<CshDenomEntry>(entity =>
            {
                entity.Property(e => e.CshDenomEntryId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Coins).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LineSource)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Rs1).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Rs10).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Rs100).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Rs1000).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Rs2).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Rs20).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Rs5).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Rs50).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.Rs500).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TotalAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TransCashLineId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CsmoduleDetails>(entity =>
            {
                entity.HasKey(e => e.CsmoduleId);

                entity.ToTable("CSModuleDetails");

                entity.Property(e => e.CsmoduleId)
                    .HasColumnName("CSModuleID")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Dllname)
                    .HasColumnName("DLLName")
                    .HasMaxLength(50);

                entity.Property(e => e.IsDeleted).HasMaxLength(10);

                entity.Property(e => e.ModuleNickName).HasMaxLength(50);

                entity.Property(e => e.Namespace).HasMaxLength(200);
            });

            modelBuilder.Entity<Cstinfo>(entity =>
            {
                entity.ToTable("CSTInfo");

                entity.Property(e => e.CstinfoId)
                    .HasColumnName("CSTInfoId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ClaimNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FormDt).HasColumnType("datetime");

                entity.Property(e => e.FormNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FormType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PaidAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PaidStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RecId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SerialNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VouAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.VoucherNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CurrencyMaster>(entity =>
            {
                entity.HasIndex(e => new { e.CurrencyMasterId, e.CurrCode })
                    .HasName("IX_CurrMstId_CurrCd");

                entity.Property(e => e.CurrencyMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CurrCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CurrDesc)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CurrSymbol)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FractionalCurr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsLocalCurr).HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NoOfDcmlDigits).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Cust>(entity =>
            {
                entity.ToTable("cust");

                entity.Property(e => e.CustId)
                    .HasColumnName("Cust_id")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CustAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustName)
                    .IsRequired()
                    .HasColumnName("Cust_name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailId)
                    .IsRequired()
                    .HasColumnName("Email_id")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<CustVendorMaster>(entity =>
            {
                entity.HasIndex(e => e.SystemUserId)
                    .HasName("SystemUserId");

                entity.HasIndex(e => new { e.CustVendorCode, e.IsDeleted })
                    .HasName("IDX_DeleEntity");

                entity.HasIndex(e => new { e.IsDeleted, e.CustVendorCode })
                    .HasName("IDX_EntityCode");

                entity.HasIndex(e => new { e.CustVendor, e.CurrencyMasterId, e.IsDeleted })
                    .HasName("IdxCustCurncy");

                entity.HasIndex(e => new { e.CustVendor, e.CustVendorCode, e.Active, e.CustVendorMasterId })
                    .HasName("CustVendorId_CustVendor_Active");

                entity.HasIndex(e => new { e.CustVendorMasterId, e.AccountId, e.CustVendorCode, e.CustVendorName })
                    .HasName("IX_CVMstId_AcId_CVCd_CVNm");

                entity.HasIndex(e => new { e.CustVendorMasterId, e.CustVendorName, e.CustVendor, e.Active })
                    .HasName("CustVendorName");

                entity.HasIndex(e => new { e.CustVendorMasterId, e.EntityGroupMasterId, e.SystemUserId, e.Active, e.IsDeleted })
                    .HasName("ID_Active_Deleted_EnGrpMstId_SystemUID");

                entity.Property(e => e.CustVendorMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AadharNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AccountId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.BankAddress)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Branch)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cat)
                    .HasColumnName("CAT")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Cin)
                    .HasColumnName("CIN")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CommFrom).HasColumnType("datetime");

                entity.Property(e => e.CommPer).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CommRate)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.CommTo).HasColumnType("datetime");

                entity.Property(e => e.ContactName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactTitle)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CopyofCustVendorName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CountryId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreditDays).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreditLimit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CreditTerms)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Crmcode)
                    .HasColumnName("CRMCode")
                    .HasMaxLength(100);

                entity.Property(e => e.Cstno)
                    .HasColumnName("CSTNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Currency)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CurrencyMasterId)
                    .HasColumnName("CurrencyMasterID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CustVendor)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CustVendorCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CustVendorName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustVendorType)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryTerms)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.District)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Eccno)
                    .HasColumnName("ECCNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Engrn)
                    .HasColumnName("ENGRN")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Eninv)
                    .HasColumnName("ENInv")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.EnpndPo)
                    .HasColumnName("ENPndPO")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Enpymt)
                    .HasColumnName("ENPymt")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Enrect)
                    .HasColumnName("ENRect")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.EnterpriseType)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.EntityClass)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EntityGroupMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EntityRestDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('2040-04-16 18:59:27.060')");

                entity.Property(e => e.EsicNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EvaluationDt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExDivi)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ExRange)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ExtnlSysRef1)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ExtnlSysRef2)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ExtnlSysRef3)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FkbusiSegmentId)
                    .HasColumnName("FKBusiSegmentId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GroupId).IsUnicode(false);

                entity.Property(e => e.Ifscode)
                    .HasColumnName("IFSCode")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IndIndemnity)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.InspectionBody)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsContractReqd)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsForeign)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsSalesEngr).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsWlforCrmref)
                    .HasColumnName("IsWLForCRMRef")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Latitude)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Longitude)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Mstno)
                    .HasColumnName("MSTNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Oms)
                    .HasColumnName("OMS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Panno)
                    .HasColumnName("PANNO")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentTerms)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Pfno)
                    .HasColumnName("PFNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Pin)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PriceListId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RegistrationFormNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RemittanceInstruction)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ResellerName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ServClId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ServiceTaxNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SlCatId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.State)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SystemUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Taluka)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Tanno)
                    .HasColumnName("TANNO")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxClass)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TenorYear)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Typeofservices)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValidFrom)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ValidTo)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.VendorCode)
                    .HasColumnName("vendorCode")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Website)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CyearCalculationMaster>(entity =>
            {
                entity.HasKey(e => e.Cycid);

                entity.ToTable("CYearCalculationMaster");

                entity.Property(e => e.Cycid).HasColumnName("CYCId");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Cl)
                    .HasColumnName("CL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.El)
                    .HasColumnName("EL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Event)
                    .HasColumnName("event")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pl)
                    .HasColumnName("PL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sl)
                    .HasColumnName("SL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SyncInfo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Year)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DailyTinshedstk>(entity =>
            {
                entity.HasKey(e => e.PcmasterId);

                entity.ToTable("DailyTINSHEDStk");

                entity.Property(e => e.PcmasterId)
                    .HasColumnName("PCMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.OperationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StkDt).HasColumnType("datetime");

                entity.Property(e => e.WiplocationId)
                    .HasColumnName("WIPLocationId")
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DataSheetChartHeader>(entity =>
            {
                entity.HasKey(e => e.PkchartHeaderId);

                entity.Property(e => e.PkchartHeaderId)
                    .HasColumnName("PKChartHeaderID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ChartAreaGradient)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChartDesc).IsUnicode(false);

                entity.Property(e => e.ChartTitle)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChartToolTip)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChartType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkcssformsId)
                    .HasColumnName("FKCSSFormsID")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Gradient)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GroupBy)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LegendAlignment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LegendBackColor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LegendDocking)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LegendFontColor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LegendFontName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LegendStyle)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlotAreaAlignment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TitleAlignment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TitleBackColor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TitleBorderColor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TitleFontColor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TitleFontName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.XaxisMax)
                    .HasColumnName("XAxisMax")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.XaxisMin)
                    .HasColumnName("XAxisMin")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.XmajorInterval)
                    .HasColumnName("XMajorInterval")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.XminorInterval)
                    .HasColumnName("XMinorInterval")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.XnoofPlottings).HasColumnName("XNoofPlottings");

                entity.Property(e => e.XrepeatStyle)
                    .HasColumnName("XRepeatStyle")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.XseriesName)
                    .HasColumnName("XSeriesName")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Xtitle)
                    .HasColumnName("XTitle")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.XtitleFontColor)
                    .HasColumnName("XTitleFontColor")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.XtitleFontName)
                    .HasColumnName("XTitleFontName")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.XtitleFontSize).HasColumnName("XTitleFontSize");

                entity.Property(e => e.YaxisMax)
                    .HasColumnName("YAxisMax")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.YaxisMin)
                    .HasColumnName("YAxisMin")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.YmajorInterval)
                    .HasColumnName("YMajorInterval")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.YminorInterval)
                    .HasColumnName("YMinorInterval")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.YseriesName)
                    .HasColumnName("YSeriesName")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ytitle)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YtitleFontColor)
                    .HasColumnName("YTitleFontColor")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YtitleFontName)
                    .HasColumnName("YTitleFontName")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YtitleFontSize).HasColumnName("YTitleFontSize");
            });

            modelBuilder.Entity<DataSheetChartSeries>(entity =>
            {
                entity.HasKey(e => e.PkchartSeriesId);

                entity.Property(e => e.PkchartSeriesId)
                    .HasColumnName("PKChartSeriesID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AxisPosition)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Color)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DataPointFontColor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DataPointFontName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DataPointPosition)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FkdataSheetChartHeader)
                    .HasColumnName("FKDataSheetChartHeader")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FontColor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FontName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Hatching)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MarkerBorderColor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MarkerColor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MarkerShape)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PkquesId)
                    .HasColumnName("PKQuesID")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Position)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PrimaryBackColor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SeriesName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.FkdataSheetChartHeaderNavigation)
                    .WithMany(p => p.DataSheetChartSeries)
                    .HasForeignKey(d => d.FkdataSheetChartHeader)
                    .HasConstraintName("FK_DataSheetChartSeries_DataSheetChartHeader");
            });

            modelBuilder.Entity<DataSheetScheduler>(entity =>
            {
                entity.HasKey(e => e.PkdatasheetSchedulerId);

                entity.Property(e => e.PkdatasheetSchedulerId)
                    .HasColumnName("PKDatasheetSchedulerId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AllowDatasheetEntryOn)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Attachment).HasMaxLength(10);

                entity.Property(e => e.EveryMonthCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FkformId)
                    .HasColumnName("FKFormId")
                    .HasMaxLength(36);

                entity.Property(e => e.IsNoEndDate)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemLevelApproval).HasMaxLength(10);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ModuleId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MonthlyDay)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MonthlyDayNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MonthlyMonth).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MonthlyWeek)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NextScheduleRunDate).HasColumnType("datetime");

                entity.Property(e => e.Occurrences).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RecEndDate).HasColumnType("datetime");

                entity.Property(e => e.RecStartDate).HasColumnType("datetime");

                entity.Property(e => e.RecurDaysCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RecurWeeksCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RecurYearCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SaveActivityAction)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleDueDate).HasColumnType("datetime");

                entity.Property(e => e.TypeOfPeriod)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Unit)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Workspace)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyDay)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyMonth)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyMonthName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyWeek)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DataUploadLog>(entity =>
            {
                entity.Property(e => e.DataUploadLogId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Reason)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RefId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UploadDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<DatasheetActivityRelation>(entity =>
            {
                entity.HasKey(e => e.PkdsactId);

                entity.Property(e => e.PkdsactId)
                    .HasColumnName("PKDSActId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.FkactivityId)
                    .HasColumnName("FKActivityId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkcssformQuestionDetails)
                    .HasColumnName("FKCSSFormQuestionDetails")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkcssheaderId)
                    .HasColumnName("FKCSSHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DayType>(entity =>
            {
                entity.Property(e => e.DayTypeId)
                    .HasMaxLength(32)
                    .ValueGeneratedNever();

                entity.Property(e => e.DayTypeDesc).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(100);
            });

            modelBuilder.Entity<DbMst>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK__DbMSt__03317E3D");

                entity.ToTable("DbMSt");

                entity.Property(e => e.RecId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ConnectionString)
                    .HasColumnName("Connection String")
                    .IsUnicode(false);

                entity.Property(e => e.DbMstId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DbName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProviderName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RptFont).HasMaxLength(50);

                entity.Property(e => e.ServerName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DefaultWebPages>(entity =>
            {
                entity.HasKey(e => e.DefaultPageId)
                    .HasName("PK_UserDefaultPages");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PageDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TechnicalName)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DefectLoggingActivity>(entity =>
            {
                entity.HasKey(e => e.PkdefectId);

                entity.ToTable("Defect_logging_activity");

                entity.Property(e => e.PkdefectId)
                    .HasColumnName("PKDefectID")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CauseOfDefect)
                    .HasColumnName("Cause_of_defect")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DefNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DefectDescription).HasColumnName("Defect_description");

                entity.Property(e => e.DefectEnvironment).HasColumnName("Defect_environment");

                entity.Property(e => e.DefectId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DefectStatus)
                    .HasColumnName("Defect_status")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ModuleId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PriorityId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Severity)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StepsReproduce)
                    .HasColumnName("Steps_reproduce")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TestId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TesterId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsermasterId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DenierMaster>(entity =>
            {
                entity.HasKey(e => e.DenierCode);

                entity.Property(e => e.DenierCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.DenierDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<DeptHod>(entity =>
            {
                entity.HasKey(e => e.PkdeptHodId);

                entity.ToTable("DeptHOD");

                entity.Property(e => e.PkdeptHodId)
                    .HasColumnName("PKDeptHodId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FkdeptMastId)
                    .HasColumnName("FKDeptMastId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkuserMastId)
                    .HasColumnName("FKUserMastId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<DeptMaster>(entity =>
            {
                entity.HasKey(e => e.PkdeptMasterid);

                entity.HasIndex(e => new { e.DeptCode, e.DeptDesc, e.IsDeleted, e.PlantMasterId, e.CreationLevel, e.UserLevel, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.PkdeptMasterid })
                    .HasName("DeptMasterId");

                entity.Property(e => e.PkdeptMasterid)
                    .HasColumnName("PKDeptMasterid")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeptCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DeptDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<DesgnationSkillsetMaster>(entity =>
            {
                entity.HasKey(e => e.PkdesigSkillSet);

                entity.Property(e => e.PkdesigSkillSet)
                    .HasColumnName("PKDesigSkillSet")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FkdesignationId)
                    .HasColumnName("FKDesignationId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkratingId)
                    .HasColumnName("FKRatingId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkskillSetId)
                    .HasColumnName("FKSkillSetId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Flag)
                    .HasColumnName("flag")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<DesignationMaster>(entity =>
            {
                entity.HasKey(e => e.PkdesigMstId)
                    .HasName("PK_DesignationMst");

                entity.Property(e => e.PkdesigMstId)
                    .HasColumnName("PKDesigMstId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.JobDesc).IsUnicode(false);

                entity.Property(e => e.KeyResult).IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DeviceMaster>(entity =>
            {
                entity.HasKey(e => e.PkDeviceMaster)
                    .HasName("PK__DeviceMa__73890726CEFCA657");

                entity.Property(e => e.PkDeviceMaster)
                    .HasColumnName("PK_DeviceMaster")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApplicationName)
                    .HasColumnName("Application_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DeviceId)
                    .HasColumnName("Device_Id")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DevicemasterHistory>(entity =>
            {
                entity.HasKey(e => e.PkDeviceMasterHistory)
                    .HasName("PK__Devicema__0D93885CB78AFB8D");

                entity.ToTable("Devicemaster_History");

                entity.Property(e => e.PkDeviceMasterHistory)
                    .HasColumnName("PK_DeviceMasterHistory")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApplicationName)
                    .HasColumnName("Application_name")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DeviceId)
                    .HasColumnName("Device_Id")
                    .HasMaxLength(240)
                    .IsUnicode(false);

                entity.Property(e => e.IsInstalled)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DocApprDtl>(entity =>
            {
                entity.HasIndex(e => new { e.DocApprHdrId, e.UserMstId, e.StatusId })
                    .HasName("NonClusteredIndex-20161222-181244");

                entity.Property(e => e.DocApprDtlId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApprDt).HasColumnType("datetime");

                entity.Property(e => e.AppvLvl)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DocApprHdrId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserMstId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DocApprHdr>(entity =>
            {
                entity.HasIndex(e => e.SourceId)
                    .HasName("<sourceid>");

                entity.Property(e => e.DocApprHdrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CurrentApprLvl)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DocApprMthdId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DocNo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DocValue).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FilePath)
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FinalApprLvl)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LatestDltId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Reason).HasMaxLength(200);

                entity.Property(e => e.SourceId)
                    .IsRequired()
                    .HasMaxLength(72)
                    .IsUnicode(false);

                entity.Property(e => e.SourceType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasMaxLength(500)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<DocPrintCount>(entity =>
            {
                entity.Property(e => e.DocPrintCountId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BarcodeNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Count).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SourceType)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DocProcess>(entity =>
            {
                entity.Property(e => e.DocProcessId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.DocProcess1)
                    .HasColumnName("DocProcess")
                    .HasMaxLength(100);

                entity.Property(e => e.ObjName).HasMaxLength(100);

                entity.Property(e => e.ObjVer).HasMaxLength(50);

                entity.Property(e => e.RevDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<DocumentTypeMaster>(entity =>
            {
                entity.HasKey(e => e.PkdocType);

                entity.Property(e => e.PkdocType)
                    .HasColumnName("PKDocType")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.TypeDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DocumntAttachmnts>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.Property(e => e.RecId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AttachmntName).HasColumnType("text");

                entity.Property(e => e.DocTye)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DomainExpirySetUp>(entity =>
            {
                entity.HasKey(e => e.DomainId);

                entity.Property(e => e.DomainId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.DomainDate)
                    .HasColumnName("Domain_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.DomainStatus)
                    .HasColumnName("Domain_Status")
                    .HasMaxLength(1);
            });

            modelBuilder.Entity<DsppkgListDetail>(entity =>
            {
                entity.ToTable("DSPPkgListDetail");

                entity.Property(e => e.DsppkgListDetailId)
                    .HasColumnName("DSPPkgListDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.DsppkgListHeaderId)
                    .HasColumnName("DSPPkgListHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SalesHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DsppkgListHeader>(entity =>
            {
                entity.ToTable("DSPPkgListHeader");

                entity.Property(e => e.DsppkgListHeaderId)
                    .HasColumnName("DSPPkgListHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.DsppkgListDt)
                    .HasColumnName("DSPPkgListDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.DsppkgListNo)
                    .HasColumnName("DSPPkgListNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Dsrdtl>(entity =>
            {
                entity.ToTable("DSRDtl");

                entity.Property(e => e.DsrdtlId)
                    .HasColumnName("DSRDtlId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.DsrhdrId)
                    .HasColumnName("DSRHdrId")
                    .HasMaxLength(36);

                entity.Property(e => e.GrpItemId)
                    .HasColumnName("GrpItemID")
                    .HasMaxLength(36);

                entity.Property(e => e.GrpValue).HasMaxLength(50);

                entity.Property(e => e.Remark).HasMaxLength(250);
            });

            modelBuilder.Entity<DsrgrpItem>(entity =>
            {
                entity.HasKey(e => e.GrpItemId);

                entity.ToTable("DSRGrpItem");

                entity.Property(e => e.GrpItemId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.GrpId).HasMaxLength(36);

                entity.Property(e => e.GrpItemCd).HasMaxLength(50);

                entity.Property(e => e.GrpItemName).HasMaxLength(200);

                entity.Property(e => e.ValueType).HasMaxLength(50);
            });

            modelBuilder.Entity<DsrgrpMst>(entity =>
            {
                entity.HasKey(e => e.GrpId);

                entity.ToTable("DSRGrpMst");

                entity.Property(e => e.GrpId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.GrpCd).HasMaxLength(50);

                entity.Property(e => e.GrpName).HasMaxLength(100);
            });

            modelBuilder.Entity<Dsrhdr>(entity =>
            {
                entity.ToTable("DSRHdr");

                entity.Property(e => e.DsrhdrId)
                    .HasColumnName("DSRHdrId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.Dsrdt)
                    .HasColumnName("DSRDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmpId).HasMaxLength(36);

                entity.Property(e => e.Remarks).HasMaxLength(200);
            });

            modelBuilder.Entity<EdmObjVerChange>(entity =>
            {
                entity.Property(e => e.EdmObjVerChangeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.EdmExecHistoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.NewVersion).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ObjName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ObjType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PrevVersion).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<EdmexecuteHistory>(entity =>
            {
                entity.ToTable("EDMExecuteHistory");

                entity.Property(e => e.EdmexecuteHistoryId)
                    .HasColumnName("EDMExecuteHistoryId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.EdmexecHdrId)
                    .HasColumnName("EDMExecHdrId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.ExeVersion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExecutedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDtOfExe).HasColumnType("datetime");

                entity.Property(e => e.StartTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<EmailActivityMaster>(entity =>
            {
                entity.HasKey(e => e.PkactViaEmailId);

                entity.Property(e => e.PkactViaEmailId)
                    .HasColumnName("PKActViaEmailId")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityCreation)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AssignAddrTo)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ConnString).HasMaxLength(100);

                entity.Property(e => e.CreateAsTicket)
                    .HasColumnName("createAsTicket")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FolderPath)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ForwardEmailTo).HasMaxLength(500);

                entity.Property(e => e.Ftpserver)
                    .HasColumnName("FTPServer")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HoursRequired).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsFtppath)
                    .HasColumnName("IsFTPPath")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsIntimatecompletion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IssuedTo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.MainGrpId).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NatureOfWorkId).HasMaxLength(50);

                entity.Property(e => e.NoofdaysToComplete)
                    .HasColumnName("Noofdays_to_complete")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.Popserver)
                    .HasColumnName("POPServer")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Priority)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SourceType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SubGrpId).HasMaxLength(50);

                entity.Property(e => e.TableName).HasMaxLength(50);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.WorkSpaceId).HasMaxLength(50);
            });

            modelBuilder.Entity<EmailAlert>(entity =>
            {
                entity.Property(e => e.EmailAlertId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.LastDate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MessageText)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SentTime).HasColumnType("datetime");

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmailList>(entity =>
            {
                entity.Property(e => e.EmailListId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityCreation).HasMaxLength(1);

                entity.Property(e => e.EmailId).HasMaxLength(30);

                entity.Property(e => e.IsActive).HasMaxLength(1);

                entity.Property(e => e.IsFtppath)
                    .HasColumnName("IsFTPPath")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.SeqNo).HasMaxLength(10);
            });

            modelBuilder.Entity<EmailListTimesheetExcel>(entity =>
            {
                entity.HasKey(e => e.EmailListId);

                entity.ToTable("EmailList_Timesheet_Excel");

                entity.Property(e => e.EmailListId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityCreation).HasMaxLength(1);

                entity.Property(e => e.EmailId).HasMaxLength(36);

                entity.Property(e => e.FolderPath)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Ftpserver)
                    .HasColumnName("FTPServer")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive).HasMaxLength(1);

                entity.Property(e => e.IsFtppath)
                    .HasColumnName("IsFTPPath")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.Popserver)
                    .HasColumnName("POPServer")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SeqNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Smtpserver)
                    .HasColumnName("SMTPServer")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmailSetting>(entity =>
            {
                entity.Property(e => e.EmailSettingId)
                    .HasColumnName("EMailSettingId")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EnableSsl).HasColumnName("EnableSSl");

                entity.Property(e => e.IsDefault)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MaximumEmailCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Password)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Priority)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Recipients)
                    .IsRequired()
                    .HasMaxLength(2500)
                    .IsUnicode(false);

                entity.Property(e => e.ServerName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Emp>(entity =>
            {
                entity.ToTable("emp");

                entity.Property(e => e.EmpId)
                    .HasColumnName("Emp_id")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.EmailId)
                    .IsRequired()
                    .HasColumnName("Email_id")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmpName)
                    .IsRequired()
                    .HasColumnName("Emp_name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<EmpDocInfo>(entity =>
            {
                entity.Property(e => e.EmpDocInfoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Aod1)
                    .HasColumnName("AOD1")
                    .HasColumnType("image");

                entity.Property(e => e.Aod2)
                    .HasColumnName("AOD2")
                    .HasColumnType("image");

                entity.Property(e => e.Aod3)
                    .HasColumnName("AOD3")
                    .HasColumnType("image");

                entity.Property(e => e.ChkLst).HasColumnType("image");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.CurrAddPrf).HasColumnType("image");

                entity.Property(e => e.Diploma).HasColumnType("image");

                entity.Property(e => e.ExperienceLetr).HasColumnType("image");

                entity.Property(e => e.Graduation).HasColumnType("image");

                entity.Property(e => e.Hssccert)
                    .HasColumnName("HSSCCert")
                    .HasColumnType("image");

                entity.Property(e => e.IncrmntLetr).HasColumnType("image");

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.JoinForm).HasColumnType("image");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OfferLetr).HasColumnType("image");

                entity.Property(e => e.PermAddPrf).HasColumnType("image");

                entity.Property(e => e.Pgcert)
                    .HasColumnName("PGCert")
                    .HasColumnType("image");

                entity.Property(e => e.Photo).HasColumnType("image");

                entity.Property(e => e.PhotoId).HasColumnType("image");

                entity.Property(e => e.RelievingLetr).HasColumnType("image");

                entity.Property(e => e.ResumeD).HasColumnType("image");

                entity.Property(e => e.SalarySlip1).HasColumnType("image");

                entity.Property(e => e.SalarySlip2).HasColumnType("image");

                entity.Property(e => e.SalarySlip3).HasColumnType("image");

                entity.Property(e => e.Ssccert)
                    .HasColumnName("SSCCert")
                    .HasColumnType("image");

                entity.Property(e => e.TrainingSheet).HasColumnType("image");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.HasOne(d => d.UserMaster)
                    .WithMany(p => p.EmpDocInfo)
                    .HasForeignKey(d => d.UserMasterId)
                    .HasConstraintName("FK__EmpDocInf__UserM__50D1B250");
            });

            modelBuilder.Entity<EmpLeaveEncashment>(entity =>
            {
                entity.Property(e => e.EmpLeaveEncashmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedById)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ApprovedDt).HasColumnType("datetime");

                entity.Property(e => e.CancelStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndDt).HasColumnType("datetime");

                entity.Property(e => e.Fkmlid)
                    .HasColumnName("FKMLId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LeaveCount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LeaveEncashDt).HasColumnType("datetime");

                entity.Property(e => e.LeaveEnchNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LeaveMethod)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LeaveSource)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LeaveType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NxtYearDays).HasColumnName("nxtYearDays");

                entity.Property(e => e.Reason)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.StartDt).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.YearId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmpLeaveInfo>(entity =>
            {
                entity.HasKey(e => e.ApplicationId);

                entity.Property(e => e.ApplicationId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Approved)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LeaveFromDate).HasColumnType("datetime");

                entity.Property(e => e.LeaveToDate).HasColumnType("datetime");

                entity.Property(e => e.LeaveType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Reason).HasMaxLength(100);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmpManualShift>(entity =>
            {
                entity.HasKey(e => e.PkempManualShiftId);

                entity.Property(e => e.PkempManualShiftId)
                    .HasColumnName("PKEmpManualShiftId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.Day1)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day10)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day11)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day12)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day13)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day14)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day15)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day16)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day17)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day18)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day19)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day2)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day20)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day21)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day22)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day23)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day24)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day25)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day26)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day27)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day28)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day29)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day3)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day30)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day31)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day4)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day5)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day6)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day7)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day8)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Day9)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.DeptId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Month)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Year)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmployeeMaster111>(entity =>
            {
                entity.HasKey(e => e.EmployeeId)
                    .HasName("PK_EmployeeMaster");

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Dob)
                    .HasColumnName("DOB")
                    .HasColumnType("datetime");

                entity.Property(e => e.Doj)
                    .HasColumnName("DOJ")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HighestQual)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmployeeSkillSet>(entity =>
            {
                entity.HasKey(e => e.EmpSkillSetId);

                entity.Property(e => e.EmpSkillSetId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SkillSetId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EntityContactDeviceMaster>(entity =>
            {
                entity.Property(e => e.EntityContactDeviceMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApplicationName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DeviceId)
                    .HasMaxLength(240)
                    .IsUnicode(false);

                entity.Property(e => e.EntityContactInfoId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EntityContactInfo>(entity =>
            {
                entity.HasIndex(e => new { e.BqmBanquetClientId, e.IsDefault })
                    .HasName("IDX_EntityContact_ID_DEFA");

                entity.HasIndex(e => new { e.EntityContactInfoId, e.BqmBanquetClientId })
                    .HasName("IX_ECInfoId_CustId");

                entity.Property(e => e.EntityContactInfoId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BqmBanquetClientId)
                    .HasColumnName("BQM_BanquetClientId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ContPerName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactNo)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.ContactType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Designation)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Din)
                    .HasColumnName("DIN")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailVerificationKey)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.InfluentialLevel)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDefault)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsVwbloginAllowed)
                    .HasColumnName("IsVWBLoginAllowed")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LoginId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Password)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EntityCreationTable>(entity =>
            {
                entity.HasKey(e => e.VendorMasterId)
                    .HasName("PK_VendorMasterId");

                entity.Property(e => e.VendorMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AccountType)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BankAddress)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BranchName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CompAddress)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Currency)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Designation)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Distict)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.EmailId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.EntityType)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Gstno)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Ifscode)
                    .HasColumnName("IFSCode")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.InState)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Influntial)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsEntitySatus)
                    .HasColumnName("isEntitySatus")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LanlineNo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.MobileNo)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Pano)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Pincode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Remittance)
                    .HasMaxLength(56)
                    .IsUnicode(false);

                entity.Property(e => e.ShortName)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SkypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Taluka)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.VendorName)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EntityGroupMaster>(entity =>
            {
                entity.Property(e => e.EntityGroupMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.GroupCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<EntityType>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.Property(e => e.RecId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.TypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TypeDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EntityTypeMaster>(entity =>
            {
                entity.Property(e => e.EntityTypeMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccountMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Entity)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EntityAs)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EntityType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EntityTypeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsPartner)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PriceListClassificationId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ErpmoduleSetup>(entity =>
            {
                entity.HasKey(e => e.ModuleSetupId);

                entity.ToTable("ERPModuleSetup");

                entity.Property(e => e.ModuleSetupId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.HelpText).HasColumnType("ntext");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ModuleDisplayValue)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ModuleSetupDesc)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.ModuleSetupValue)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ModuleType)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.SetupType)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.UserControlName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ErpsysMods>(entity =>
            {
                entity.ToTable("ERPSysMods");

                entity.Property(e => e.ErpsysModsId)
                    .HasColumnName("ERPSysModsId")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DefaultSepChar)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LeadingZeros).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ModCntrValue)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModTextFormat)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ModuleCode)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ModuleDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SepChar)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Error>(entity =>
            {
                entity.Property(e => e.ErrorId)
                    .HasColumnType("decimal(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ErrorDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MachineName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModuleName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProcedureName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EventMaster>(entity =>
            {
                entity.HasKey(e => e.EventId);

                entity.Property(e => e.EventId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.EventType)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ExPtMaster>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Asslyname)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExeStr)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ExptDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExptId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ExchRateMaster>(entity =>
            {
                entity.Property(e => e.ExchRateMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CurrConversion).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CurrFromId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CurrToId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EffFrom).HasColumnType("datetime");

                entity.Property(e => e.EffUpto).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ExciseCenvatable>(entity =>
            {
                entity.Property(e => e.ExciseCenvatableId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BillDate).HasColumnType("datetime");

                entity.Property(e => e.BillNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CenvatTaken)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.EntityCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EntityName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExciseCenvatableNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsCenvatable)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsGta)
                    .HasColumnName("IsGTA")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsGtacenvatable)
                    .HasColumnName("IsGTACenvatable")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ExciseHeading>(entity =>
            {
                entity.Property(e => e.ExciseHeadingId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AssessableRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Dbkrate)
                    .HasColumnName("DBKRate")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.DbktarrifHeadName)
                    .HasColumnName("DBKTarrifHeadName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.HeadingDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.HeadingNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SubHeadingDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SubHeadingNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TarrifDuty).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ExtPtMaster>(entity =>
            {
                entity.Property(e => e.ExtPtMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AssemblyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Epdescription)
                    .HasColumnName("EPDescription")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ExecutionString)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SeqNo).HasColumnType("numeric(9, 0)");
            });

            modelBuilder.Entity<Fadetails>(entity =>
            {
                entity.HasKey(e => e.FadtlId);

                entity.ToTable("FADetails");

                entity.Property(e => e.FadtlId)
                    .HasColumnName("FADtlId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Amount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.CalcMthd)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FamstId)
                    .HasColumnName("FAMstId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsWip)
                    .HasColumnName("IsWIP")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MethodOn)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Famaster>(entity =>
            {
                entity.HasKey(e => e.FamstId);

                entity.ToTable("FAMaster");

                entity.Property(e => e.FamstId)
                    .HasColumnName("FAMstId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AcMastId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AssetType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OpBal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Fatrans>(entity =>
            {
                entity.ToTable("FATrans");

                entity.Property(e => e.FatransId)
                    .HasColumnName("FATransId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FarecFlag)
                    .HasColumnName("FARecFlag")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TransChargeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TransHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FbtclassMaster>(entity =>
            {
                entity.ToTable("FBTClassMaster");

                entity.Property(e => e.FbtclassMasterId)
                    .HasColumnName("FBTClassMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Fbtcode)
                    .HasColumnName("FBTCode")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Fbtdesc)
                    .HasColumnName("FBTDesc")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Fbtmaster>(entity =>
            {
                entity.ToTable("FBTMaster");

                entity.Property(e => e.FbtmasterId)
                    .HasColumnName("FBTMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.EducationCess).HasColumnType("numeric(9, 3)");

                entity.Property(e => e.EffFrom).HasColumnType("datetime");

                entity.Property(e => e.EffTo).HasColumnType("datetime");

                entity.Property(e => e.Fbper)
                    .HasColumnName("FBPer")
                    .HasColumnType("numeric(9, 3)");

                entity.Property(e => e.FbtclassMasterId)
                    .HasColumnName("FBTClassMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Fbtper)
                    .HasColumnName("FBTPer")
                    .HasColumnType("numeric(9, 3)");

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Hsecess)
                    .HasColumnName("HSECess")
                    .HasColumnType("numeric(9, 3)");

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Surcharge).HasColumnType("numeric(9, 3)");

                entity.Property(e => e.UnderSection)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FileAttachmentMaster>(entity =>
            {
                entity.Property(e => e.FileAttachmentMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt)
                    .HasColumnName("addedDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.FilePath)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Object).HasColumnType("image");

                entity.Property(e => e.UserLevel).HasColumnType("decimal(18, 0)");
            });

            modelBuilder.Entity<FinPanelMaster>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK__PanelMaster__0E6E26BF");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.AssemblyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExecutionString)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PanelDesc)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PanelMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PanelTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FolderDeletion>(entity =>
            {
                entity.HasKey(e => e.ApplicationPath);

                entity.Property(e => e.ApplicationPath)
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.ExcelFile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FileText).HasMaxLength(50);

                entity.Property(e => e.FileType).HasMaxLength(50);

                entity.Property(e => e.Folder).HasMaxLength(50);

                entity.Property(e => e.PdfFile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WordFile)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Forecast>(entity =>
            {
                entity.Property(e => e.ForecastId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EveryMonthCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ForecastDate).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsNoEndDate).HasMaxLength(10);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MonthlyDay)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MonthlyDayNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MonthlyMonth).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MonthlyWeek)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Occurrences).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RecEndDate).HasColumnType("datetime");

                entity.Property(e => e.RecStartDate).HasColumnType("datetime");

                entity.Property(e => e.RecurDaysCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RecurWeeksCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RecurYearCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ReqQtyinStkUnit).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TypeOfPeriod)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.YearlyDay)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyMonth)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyMonthName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyWeek)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ForeignKeyTracker>(entity =>
            {
                entity.Property(e => e.ForeignKeyTrackerId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ChildCol)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChildTable)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChildTableDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MasterTable)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ForwarderMaster>(entity =>
            {
                entity.HasKey(e => e.ForwarderMastId)
                    .HasName("PK__ForwarderMaster__2512604C");

                entity.Property(e => e.ForwarderMastId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Awbno)
                    .HasColumnName("AWBNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FwdrName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PinCode)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Reftype)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Sms)
                    .HasColumnName("SMS")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<FwdCoverEntry>(entity =>
            {
                entity.Property(e => e.FwdCoverEntryId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CurrencyMasterId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.EffFrom).HasColumnType("datetime");

                entity.Property(e => e.EffTo).HasColumnType("datetime");

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ForeignAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FwdCoverCancelled).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FwdCoverDate).HasColumnType("datetime");

                entity.Property(e => e.FwdCoverNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FwdCoverNoUe)
                    .HasColumnName("FwdCoverNoUE")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FwdCoverUtilized).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FwdRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Inramount)
                    .HasColumnName("INRAmount")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SpotRate).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<Fymaster>(entity =>
            {
                entity.ToTable("FYMaster");

                entity.Property(e => e.FymasterId)
                    .HasColumnName("FYMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActiveForTarget)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Fycode)
                    .HasColumnName("FYCode")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Fyedate)
                    .HasColumnName("FYEDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Fysdate)
                    .HasColumnName("FYSDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GininvChargeTaxLine>(entity =>
            {
                entity.ToTable("GINInvChargeTaxLine");

                entity.Property(e => e.GininvChargeTaxLineId)
                    .HasColumnName("GINInvChargeTaxLineId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BaseAmntPercForTaxCalc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BaseAmount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GininvChargesId)
                    .HasColumnName("GINInvChargesId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MinAmntAllowedForTaxCalc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OppositeInvoicedGl)
                    .HasColumnName("OppositeInvoicedGL")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PayableAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivableAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SeqNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxCalcId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxPc)
                    .HasColumnName("TaxPC")
                    .HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<GininvCharges>(entity =>
            {
                entity.ToTable("GINInvCharges");

                entity.Property(e => e.GininvChargesId)
                    .HasColumnName("GINInvChargesId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CalcMethod)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ChargeAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ChrgMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.GininvHdrId)
                    .HasColumnName("GINInvHdrId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.QtyValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RatePercent).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxClassMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TotalAmount).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<GininvDetailTaxLine>(entity =>
            {
                entity.ToTable("GINInvDetailTaxLine");

                entity.Property(e => e.GininvDetailTaxLineId)
                    .HasColumnName("GINInvDetailTaxLineId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BaseAmntPercForTaxCalc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BaseAmount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.GininvDtlId)
                    .HasColumnName("GINInvDtlId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LineNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SeqNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxPc)
                    .HasColumnName("TaxPC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<GininvDtl>(entity =>
            {
                entity.ToTable("GINInvDtl");

                entity.Property(e => e.GininvDtlId)
                    .HasColumnName("GINInvDtlId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.AccTypeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AptransLineNo)
                    .HasColumnName("APTransLineNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AptransNo)
                    .HasColumnName("APTransNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BalanceQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BasicAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BillNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BillToId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ChallanQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ChargeAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ConvFactor).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Ct3no)
                    .HasColumnName("CT3No")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryMode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DeptMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ExcessQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ExchRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ExciseDt).HasColumnType("datetime");

                entity.Property(e => e.GininvHdrId)
                    .HasColumnName("GINInvHdrId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GinlineStatus)
                    .HasColumnName("GINLineStatus")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Ginqty)
                    .HasColumnName("GINQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Ginrate)
                    .HasColumnName("GINRate")
                    .HasColumnType("numeric(18, 10)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsPacketAppl)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LandedRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LotNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MaterialId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Mrnqty)
                    .HasColumnName("MRNQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NoOfPacket).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OctroiCh)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PartyDcdt)
                    .HasColumnName("PartyDCDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.PartyDcno)
                    .HasColumnName("PartyDCNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Pcno)
                    .HasColumnName("PCNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Poamt)
                    .HasColumnName("POAmt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Pocharges)
                    .HasColumnName("POCharges")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Podate)
                    .HasColumnName("PODate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pono)
                    .HasColumnName("PONo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Porate)
                    .HasColumnName("PORate")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PoscheduleId)
                    .HasColumnName("POScheduleId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PotaxAmt)
                    .HasColumnName("POTaxAmt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PototalAmt)
                    .HasColumnName("POTotalAmt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PurUomid)
                    .HasColumnName("PurUOMId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Qcqty)
                    .HasColumnName("QCQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RecType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Ref)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RejQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RejQtyAtQc)
                    .HasColumnName("RejQtyAtQC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RejReasonId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RetQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ReturnAs)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Rfifo)
                    .HasColumnName("RFifo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rmdaqty)
                    .HasColumnName("RMDAQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SaleRetnDtlId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SaleRetnHdrId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ScrapQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ShipToMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShortQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StkAccQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StkGinqty)
                    .HasColumnName("StkGINQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StkRejQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StkRetQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StkScrapQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StkUomid)
                    .HasColumnName("StkUOMId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxClassMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TotalAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UnitFreightCharges).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UnitGrncharges)
                    .HasColumnName("UnitGRNCharges")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UnitInsuranceBankingCharges).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UnitOtherCharges).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UnitPackingCharges).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UnitPocharges)
                    .HasColumnName("UnitPOCharges")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UnitRateOtherCaharges).HasColumnType("numeric(18, 10)");

                entity.Property(e => e.UnitRatePo)
                    .HasColumnName("UnitRatePO")
                    .HasColumnType("numeric(18, 10)");

                entity.Property(e => e.UnitRatePocharges)
                    .HasColumnName("UnitRatePOCharges")
                    .HasColumnType("numeric(18, 10)");

                entity.Property(e => e.UnitRateSentMtrl).HasColumnType("numeric(18, 10)");

                entity.Property(e => e.UnitRateTax).HasColumnType("numeric(18, 10)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.VendorLotNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GininvHdr>(entity =>
            {
                entity.ToTable("GINInvHdr");

                entity.Property(e => e.GininvHdrId)
                    .HasColumnName("GINInvHdrId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BillDt).HasColumnType("datetime");

                entity.Property(e => e.BillNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BillNoDigits).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.BillentryDate).HasColumnType("datetime");

                entity.Property(e => e.BillentryNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DocType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ExciseAmt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ExciseDt).HasColumnType("datetime");

                entity.Property(e => e.ExciseGp)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FrPayCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Freight).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.GinbasicAmnt)
                    .HasColumnName("GINBasicAmnt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.GinchargeAmnt)
                    .HasColumnName("GINChargeAmnt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.GindiscountAmnt)
                    .HasColumnName("GINDiscountAmnt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Gindt)
                    .HasColumnName("GINDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.GinfreightAmnt)
                    .HasColumnName("GINFreightAmnt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.GingrossAmnt)
                    .HasColumnName("GINGrossAmnt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.GininsBnkAmnt)
                    .HasColumnName("GINInsBnkAmnt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.GinmodeId)
                    .HasColumnName("GINModeId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ginno)
                    .HasColumnName("GINNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GinotherCharges)
                    .HasColumnName("GINOtherCharges")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.GinpackingAmnt)
                    .HasColumnName("GINPackingAmnt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.GinpootherAmnt)
                    .HasColumnName("GINPOOtherAmnt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Ginstatus)
                    .HasColumnName("GINStatus")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GintaxAmnt)
                    .HasColumnName("GINTaxAmnt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.GintypeId)
                    .HasColumnName("GINTypeId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.InverdDt).HasColumnType("datetime");

                entity.Property(e => e.InverdNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LrNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModVat)
                    .HasColumnName("ModVAT")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Octroi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OctroiCh)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OurRef)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PartyDcdate)
                    .HasColumnName("PartyDCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.PartyDcno)
                    .HasColumnName("PartyDCNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentDueDate).HasColumnType("datetime");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecdTime)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TranCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TranFrom)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TranName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.VehicleNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GinpacketList>(entity =>
            {
                entity.ToTable("GINPacketList");

                entity.Property(e => e.GinpacketListId)
                    .HasColumnName("GINPacketListId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.GininvDtlId)
                    .HasColumnName("GINInvDtlID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GininvHdrId)
                    .HasColumnName("GINInvHdrID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PacketMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PacketSrNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PostStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Qcdate)
                    .HasColumnName("QCDate")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<GpexciseHeader>(entity =>
            {
                entity.ToTable("GPExciseHeader");

                entity.Property(e => e.GpexciseHeaderId)
                    .HasColumnName("GPExciseHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BondEntryNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ChallanDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdentificationNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MaterialDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ModeOfTrans)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OutWordGpheaderId)
                    .HasColumnName("OutWordGPHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PartyAddress)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PartyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ProcNature)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RemovalDate).HasColumnType("datetime");

                entity.Property(e => e.RemovalTime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SrNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TarrifClassification)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TarrifDuty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotalValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Uomid)
                    .HasColumnName("UOMId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<GrnchargeDetail>(entity =>
            {
                entity.ToTable("GRNChargeDetail");

                entity.Property(e => e.GrnchargeDetailId)
                    .HasColumnName("GRNChargeDetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CalcMethod)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ChargeAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ChrgMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.GrndetailId)
                    .HasColumnName("GRNDetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GrnheaderId)
                    .HasColumnName("GRNHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PochargeDetailId)
                    .HasColumnName("POChargeDetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PoheaderId)
                    .HasColumnName("POHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxClassMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GrnchargeTaxLine>(entity =>
            {
                entity.ToTable("GRNChargeTaxLine");

                entity.Property(e => e.GrnchargeTaxLineId)
                    .HasColumnName("GRNChargeTaxLineId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BaseAmntPercForTaxCalc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BaseAmount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GrnchargeDetailId)
                    .HasColumnName("GRNChargeDetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GrndetailId)
                    .HasColumnName("GRNDetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GrnheaderId)
                    .HasColumnName("GRNHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MinAmntAllowedForTaxCalc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OppositeInvoicedGl)
                    .HasColumnName("OppositeInvoicedGL")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PayableAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PochargeDetailId)
                    .HasColumnName("POChargeDetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PoheaderId)
                    .HasColumnName("POHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivableAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SeqNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxCalcId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxPc)
                    .HasColumnName("TaxPC")
                    .HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<Grncharges>(entity =>
            {
                entity.HasKey(e => e.GrnchargeId);

                entity.ToTable("GRNCharges");

                entity.Property(e => e.GrnchargeId)
                    .HasColumnName("GRNChargeId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Amt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ChargeMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.GrnheaderId)
                    .HasColumnName("GRNHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Per).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Grndetail>(entity =>
            {
                entity.ToTable("GRNDetail");

                entity.HasIndex(e => e.GrnheaderId)
                    .HasName("IDX_GRNVehicle");

                entity.Property(e => e.GrndetailId)
                    .HasColumnName("GRNDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.AccTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AptransLineNo)
                    .HasColumnName("APTransLineNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AptransNo)
                    .HasColumnName("APTransNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AsnheaderId)
                    .HasColumnName("ASNHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BillNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BillToId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChallanQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ChargeAmnt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.ChargeTaxAmnt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.ConvFactor).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Ct3no)
                    .HasColumnName("CT3No")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryMode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DeptMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DiscntAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ExchRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ExpiryDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.GrnheaderId)
                    .HasColumnName("GRNHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.GrnlineStatus)
                    .HasColumnName("GRNLineStatus")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Grnqty)
                    .HasColumnName("GRNQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Grnrate)
                    .HasColumnName("GRNRate")
                    .HasColumnType("numeric(18, 10)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsPacketAppl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LandedRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineAmt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.LineTaxes)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.LineTotal)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LotNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MaterialId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Mrnqty)
                    .HasColumnName("MRNQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NoOfPacket)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OperationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PartyDcdt)
                    .HasColumnName("PartyDCDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.PartyDcno)
                    .HasColumnName("PartyDCNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Pcno)
                    .HasColumnName("PCNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Poamt)
                    .HasColumnName("POAmt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Pocharges)
                    .HasColumnName("POCharges")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Podate)
                    .HasColumnName("PODate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pono)
                    .HasColumnName("PONo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Porate)
                    .HasColumnName("PORate")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.PoscheduleId)
                    .HasColumnName("POScheduleId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PotaxAmt)
                    .HasColumnName("POTaxAmt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PototalAmt)
                    .HasColumnName("POTotalAmt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PurUomid)
                    .HasColumnName("PurUOMId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Qcqty)
                    .HasColumnName("QCQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Ref)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RefId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RejQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RejQtyAtQc)
                    .HasColumnName("RejQtyAtQC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RejReasonId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RetQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ReturnAs)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Rfifo)
                    .HasColumnName("RFifo")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rmdaqty)
                    .HasColumnName("RMDAQty")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ScrapQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ShipToMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ShortQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StkAccQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StkGrnqty)
                    .HasColumnName("StkGRNQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StkRejQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StkRetQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StkScrapQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StkUomid)
                    .HasColumnName("StkUOMId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxClassMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TotalGrossAmnt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.VendorLotNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GrndetailTaxLine>(entity =>
            {
                entity.ToTable("GRNDetailTaxLine");

                entity.Property(e => e.GrndetailTaxLineId)
                    .HasColumnName("GRNDetailTaxLineId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BaseAmntPercForTaxCalc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BaseAmount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.GrndetailId)
                    .HasColumnName("GRNDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LineNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SeqNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxPc)
                    .HasColumnName("TaxPC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Grnheader>(entity =>
            {
                entity.ToTable("GRNHeader");

                entity.HasIndex(e => e.Grnno)
                    .HasName("GRNNOIDX");

                entity.Property(e => e.GrnheaderId)
                    .HasColumnName("GRNHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApproveBy)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ApproveDate).HasColumnType("datetime");

                entity.Property(e => e.BasicAmnt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.BasicTaxAmnt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.BillDt).HasColumnType("datetime");

                entity.Property(e => e.BillNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BillNoDigits).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.BillentryDate).HasColumnType("datetime");

                entity.Property(e => e.BillentryNo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ChargeAmnt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.ChargeTaxAmnt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.ConsigneeId)
                    .HasColumnName("ConsigneeID")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DocType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ExciseAmt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ExciseDt).HasColumnType("datetime");

                entity.Property(e => e.ExciseGp)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FormAredt)
                    .HasColumnName("FormAREDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.FormAreno)
                    .HasColumnName("FormARENo")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FrPayCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Freight).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.GrnbasicAmnt)
                    .HasColumnName("GRNBasicAmnt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Grndt)
                    .HasColumnName("GRNDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.GrnfreightAmnt)
                    .HasColumnName("GRNFreightAmnt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.GrngrossAmnt)
                    .HasColumnName("GRNGrossAmnt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.GrninsBnkAmnt)
                    .HasColumnName("GRNInsBnkAmnt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.GrnmodeId)
                    .HasColumnName("GRNModeId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Grnno)
                    .HasColumnName("GRNNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GrnotherCharges)
                    .HasColumnName("GRNOtherCharges")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.GrnpackingAmnt)
                    .HasColumnName("GRNPackingAmnt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.GrnpootherAmnt)
                    .HasColumnName("GRNPOOtherAmnt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Grnstatus)
                    .HasColumnName("GRNStatus")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GrntaxAmnt)
                    .HasColumnName("GRNTaxAmnt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Grntype)
                    .HasColumnName("GRNType")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('4')");

                entity.Property(e => e.GrntypeId)
                    .HasColumnName("GRNTypeId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.InverdDt).HasColumnType("datetime");

                entity.Property(e => e.InverdNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.InverdTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InwDocRegId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LrNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModVat)
                    .HasColumnName("ModVAT")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Mreceivedby)
                    .HasColumnName("MReceivedby")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Octroi).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OctroiCh)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OurRef)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PartyDcdate)
                    .HasColumnName("PartyDCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.PartyDcno)
                    .HasColumnName("PartyDCNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentDueDate).HasColumnType("datetime");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Pono)
                    .HasColumnName("PONo")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PutAwayStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RecdTime)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RoundOff).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SentMail).HasDefaultValueSql("((0))");

                entity.Property(e => e.SentSms)
                    .HasColumnName("SentSMS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SupervisorId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TatReasonId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TatRemark)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TotalDiscntAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TranCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TranFrom)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TranName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.VehicleNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GtaserviceTaxInfo>(entity =>
            {
                entity.HasKey(e => e.GtaservTaxInfoId);

                entity.ToTable("GTAServiceTaxInfo");

                entity.Property(e => e.GtaservTaxInfoId)
                    .HasColumnName("GTAServTaxInfoId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BillInvDt).HasColumnType("datetime");

                entity.Property(e => e.BillInvNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EffDate).HasColumnType("datetime");

                entity.Property(e => e.ExciseNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsCreditTaken)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsPaid)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Narration)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PaidAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PartyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PersonalLdgrValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PymtTransNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.RefTransHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RefTransNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RefundClaimNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SecId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ServTaxAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Tr6no)
                    .HasColumnName("TR6No")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TransNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<HundiInfo>(entity =>
            {
                entity.Property(e => e.HundiInfoId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AcceptanceToBank)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BankRefDate).HasColumnType("datetime");

                entity.Property(e => e.BankRefNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.HundiAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.HundiNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LocentryId)
                    .IsRequired()
                    .HasColumnName("LOCEntryId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransDetails)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IndentSchedule>(entity =>
            {
                entity.Property(e => e.IndentScheduleId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Comment)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IndentDetailId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IndentScheduleStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Poqty)
                    .HasColumnName("POQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ReqQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ScheduleDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<InstallationMaster>(entity =>
            {
                entity.HasKey(e => e.InstalationId);

                entity.Property(e => e.InstalationId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Category)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPersoneName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPhone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Csid)
                    .HasColumnName("CSId")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.InstalationName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InstallationDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MasterDbname)
                    .HasColumnName("MasterDBName")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NetworkCode).HasMaxLength(50);

                entity.Property(e => e.StationMasterId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.StationStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SubnetworkCode)
                    .HasColumnName("subnetworkCode")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupportEngName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupportEngPhone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupportPhone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDbname)
                    .HasColumnName("TransactionDBName")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tvcount)
                    .HasColumnName("TVCount")
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InsuranceCoMaster>(entity =>
            {
                entity.HasKey(e => e.InsuCoMastId)
                    .HasName("PK__InsuranceCoMaste__3CA9F2BB");

                entity.Property(e => e.InsuCoMastId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PinCode)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Reftype)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<InvOrdTypMst>(entity =>
            {
                entity.Property(e => e.InvOrdTypMstId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccdGeneId)
                    .HasColumnName("ACCdGeneId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GincdGeneId)
                    .HasColumnName("GINCdGeneId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GinprntProg)
                    .HasColumnName("GINPrntProg")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GrncdGeneId)
                    .HasColumnName("GRNCdGeneId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GrnprntProg)
                    .HasColumnName("GRNPrntProg")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ImportExport)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IndentApprWf)
                    .HasColumnName("IndentApprWF")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IndentCdGeneId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IndentPrntProg)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsProjectOrder)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LotCdGeneId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MiscdGeneId)
                    .HasColumnName("MISCdGeneId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MrncdGeneId)
                    .HasColumnName("MRNCdGeneId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MrnrcdGeneId)
                    .HasColumnName("MRNRCdGeneId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MrscdGeneId)
                    .HasColumnName("MRSCdGeneId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MtncdGeneId)
                    .HasColumnName("MTNCdGeneId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OgpcdGeneId)
                    .HasColumnName("OGPCdGeneId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OgpprntProg)
                    .HasColumnName("OGPPrntProg")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PoapprWf)
                    .HasColumnName("POApprWF")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PocdGeneId)
                    .HasColumnName("POCdGeneId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PoprntProg)
                    .HasColumnName("POPrntProg")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PrntApprPo).HasColumnName("PrntApprPO");

                entity.Property(e => e.ProcdGeneId)
                    .HasColumnName("PROCdGeneId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProprntProg)
                    .HasColumnName("PROPrntProg")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.QccdGeneId)
                    .HasColumnName("QCCdGeneId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.QcprntProg)
                    .HasColumnName("QCPrntProg")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RmdacdGeneId)
                    .HasColumnName("RMDACdGeneId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StkAdjCdGeneId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupgrncdGeneId)
                    .HasColumnName("SUPGRNCdGeneId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupgrnprntProg)
                    .HasColumnName("SUPGRNPrntProg")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(9, 0)");
            });

            modelBuilder.Entity<InvoiceDetail>(entity =>
            {
                entity.HasIndex(e => new { e.InvoiceDetailId, e.InvoiceHeaderId, e.SalesHeaderId })
                    .HasName("IX_InvDtlId_InvHdrId_SHId");

                entity.HasIndex(e => new { e.InvoiceDetailId, e.SalesHeaderId, e.InvoiceHeaderId, e.IsDeleted })
                    .HasName("<Name of Missing Index, sysname,>");

                entity.Property(e => e.InvoiceDetailId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DiscAmnt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.DiscPer).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.InvoiceHeaderId).HasMaxLength(10);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RetQty)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.SalesDtlId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SalesHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TotDiscAmtFc)
                    .HasColumnName("TotDiscAmtFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.TotGrossAmnt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotGrossAmtFc)
                    .HasColumnName("TotGrossAmtFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.TotNetAmnt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotNetAmtFc)
                    .HasColumnName("TotNetAmtFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.TotTaxAmnt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotTaxAmtFc)
                    .HasColumnName("TotTaxAmtFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<InvoicePrintingParameter>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK__InvoicePrintingP__0777106D");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvFor)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReportNm)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RptDllname)
                    .HasColumnName("RptDLLName")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RptNmHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InwDocReg>(entity =>
            {
                entity.HasKey(e => e.DocRegId)
                    .HasName("PK__InwDocRe__07543B9471689F14");

                entity.Property(e => e.DocRegId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocCategory)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GrnheaderId)
                    .HasColumnName("GRNHeaderId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HandedOn).HasColumnType("datetime");

                entity.Property(e => e.HandedOver)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecdDt).HasColumnType("datetime");

                entity.Property(e => e.RecdFrom)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Receipant).HasMaxLength(36);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("('Created')");

                entity.Property(e => e.TransferTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemAttachments>(entity =>
            {
                entity.Property(e => e.ItemAttachmentsId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AttachFileDesc).IsUnicode(false);

                entity.Property(e => e.AttachFilename).IsUnicode(false);

                entity.Property(e => e.AttachGuid)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AttachmentType)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sourcetype)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemClassPrefLoc>(entity =>
            {
                entity.Property(e => e.ItemClassPrefLocId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Aisle)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.BayFrom)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.BayTo)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemClassificationId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LevelFrom)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.LevelTo)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ItemClassificationMaster>(entity =>
            {
                entity.HasKey(e => e.ItemClassificationId);

                entity.HasIndex(e => new { e.ModuleName, e.FormName })
                    .HasName("ModuleName");

                entity.HasIndex(e => new { e.ItemClassificationId, e.Code, e.ItmClsDesc })
                    .HasName("IX_ICId_Code_ItCls");

                entity.HasIndex(e => new { e.ItemClassificationId, e.CodeMasterId, e.PurAccNo, e.SaleAccNo, e.AssetAccNo, e.LotCodeId })
                    .HasName("IX_ICMstId_CdGen");

                entity.Property(e => e.ItemClassificationId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AdditionalDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AllowPurchase)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AllowSale)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.Alwaysusedtemplate)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AssetAccNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CalibCertiPrntProg)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CodeMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FormName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdentificationCodeType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescPrintPrgm)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItmClassColor)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ItmClsDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LotCodeId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ModuleName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PifreqDays)
                    .HasColumnName("PIFreqDays")
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.Poopen)
                    .IsRequired()
                    .HasColumnName("POOpen")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('No')");

                entity.Property(e => e.PurAccNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReqToolClsfn).HasDefaultValueSql("((0))");

                entity.Property(e => e.RetentionPeroid)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SaleAccNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Samplesize)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.Samplesizenature)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sampletype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SectionId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ItemCodeLogicTrail>(entity =>
            {
                entity.Property(e => e.ItemCodeLogicTrailId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Ipaddress)
                    .HasColumnName("IPAddress")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NewItemCode)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NewItemDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OldItemCode)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OldItemDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemCredit>(entity =>
            {
                entity.Property(e => e.ItemCreditId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CreditType).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Mrpid)
                    .HasColumnName("MRPId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OrderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OrderQty).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QtyOnDate).HasColumnType("datetime");

                entity.Property(e => e.ReqQty).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StockQty).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<ItemCustomerRelation>(entity =>
            {
                entity.Property(e => e.ItemCustomerRelationId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CurrencyMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.EffectiveTo).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCustomerCode)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SaleRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SaleUnit)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ItemDemand>(entity =>
            {
                entity.Property(e => e.ItemDemandId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DebitType).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Mrpid)
                    .HasColumnName("MRPId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OrderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.QtyReqd).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ReqmntDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<ItemDescPrintPrgm>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.Property(e => e.RecId)
                    .HasMaxLength(30)
                    .ValueGeneratedNever();

                entity.Property(e => e.FormName).HasMaxLength(100);

                entity.Property(e => e.ItemDescName).HasMaxLength(100);
            });

            modelBuilder.Entity<ItemGroupMaster>(entity =>
            {
                entity.Property(e => e.ItemGroupMasterid).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemGroup)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ItemLocType>(entity =>
            {
                entity.Property(e => e.ItemLocTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Lbhbreadth)
                    .HasColumnName("LBHBreadth")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Lbhheight)
                    .HasColumnName("LBHHeight")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Lbhlength)
                    .HasColumnName("LBHLength")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.LocationTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Weight)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemLocationMasterRelation>(entity =>
            {
                entity.HasKey(e => e.ItemLocationRelationId);

                entity.Property(e => e.ItemLocationRelationId)
                    .HasColumnName("ItemLocationRelationID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasColumnName("ItemMasterID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasColumnName("LocationMasterID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ItemMaster>(entity =>
            {
                entity.HasIndex(e => e.ItemDesc)
                    .HasName("ItemDesc");

                entity.HasIndex(e => new { e.ItemMasterId, e.ItemDesc })
                    .HasName("ItemMasterId");

                entity.HasIndex(e => new { e.ItemMasterId, e.ItemClassificationId, e.ItemCode, e.ItemDesc })
                    .HasName("IX_IMID_CLS_CD_DEC");

                entity.HasIndex(e => new { e.ItemMasterId, e.ItemCode, e.ItemDesc, e.ItemClassificationId, e.IsDeleted })
                    .HasName("ItemClassificationId");

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Area).HasMaxLength(20);

                entity.Property(e => e.BoxTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DisplayCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DrawingNo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ibreadth)
                    .HasColumnName("IBreadth")
                    .HasMaxLength(20);

                entity.Property(e => e.Ilength)
                    .HasColumnName("ILength")
                    .HasMaxLength(20);

                entity.Property(e => e.IsCustInventory).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemClassificationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCodeIds)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ItemFileName)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPhoto)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemSubTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ItemSysDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ItemTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModelNo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModelSize)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OtherInfo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PositionCategoryId)
                    .HasColumnName("PositionCategoryID")
                    .HasMaxLength(50);

                entity.Property(e => e.StatusDate).HasColumnType("datetime");

                entity.Property(e => e.TechnicalDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Useforfeature)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ItemParameter>(entity =>
            {
                entity.Property(e => e.ItemParameterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ConfigTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ParameterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ParameterValue)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ItemParameterMaster>(entity =>
            {
                entity.Property(e => e.ItemParameterMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ConfigTypeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DataType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Decimals).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ForeignDisplayMember)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ForeignTable)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ForeignValuemember)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemClassificationId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NegativeTollerance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ParameterDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParameterGroupId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ParentParameterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PositiveTollerance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ReqdForQc).HasColumnName("ReqdForQC");

                entity.Property(e => e.StdValue).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ItemPlant>(entity =>
            {
                entity.HasIndex(e => e.ItemMasterId)
                    .HasName("ItemMasterId");

                entity.HasIndex(e => new { e.ItemPlantId, e.ItemMasterId, e.FamilyId, e.PlantId })
                    .HasName("PlantId");

                entity.HasIndex(e => new { e.ItemPlantId, e.ItemMasterId, e.Manufactured, e.PlantId })
                    .HasName("Idx_ItemPlant_PlantId");

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Abcclass)
                    .HasColumnName("ABCClass")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AllowExcessQtyGrn)
                    .HasColumnName("AllowExcessQtyGRN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AlternateItem)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AssableRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.AssessablePercent).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.AssessableRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.AvgCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BuyerId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ContainerCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Convfactor).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EngineeredToOrder).HasDefaultValueSql("((0))");

                entity.Property(e => e.Eoq)
                    .HasColumnName("EOQ")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ExMainHdgNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ExSubHdgNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ExciseHeadingId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ExpiryApplicable).HasDefaultValueSql("((0))");

                entity.Property(e => e.FamilyId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FifoControl)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FinalCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FutureCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FutureCostMaterial).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FutureCostOh)
                    .HasColumnName("FutureCostOH")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FutureMfgMtrlCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FutureProcessRunCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FutureProcessSetupCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FuturePurMtrlCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FutureScrapRealization).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.GrossWt)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsPacketAppl)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsQtyperbox).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsSubcontracted).HasColumnName("isSubcontracted");

                entity.Property(e => e.IsVerAppl).HasDefaultValueSql("((0))");

                entity.Property(e => e.IssueOnMo)
                    .HasColumnName("IssueOnMO")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IssueOnMrs)
                    .HasColumnName("IssueOnMRS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPurchaseGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ItemSalesGroupId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LandedCostFactorId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LastPidate)
                    .HasColumnName("LastPIDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Lbhbreadth)
                    .HasColumnName("LBHBreadth")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Lbhheight)
                    .HasColumnName("LBHHeight")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Lbhlength)
                    .HasColumnName("LBHLength")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LotSize).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Manufactured)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MaxStock).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.MinStock).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MrpinRegion)
                    .HasColumnName("MRPInRegion")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.MrpoutRegion)
                    .HasColumnName("MRPOutRegion")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.MultiplesOf).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NetWt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NoofHu)
                    .HasColumnName("NOOfHU")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ohqty)
                    .HasColumnName("OHQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OrderPolicy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PackingCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PanCosting)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PanFinance)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PanPlanning)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PanShipping)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PanStocking)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PanUom)
                    .HasColumnName("PanUOM")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PerExcessAllowGrn)
                    .HasColumnName("PerExcessAllowGRN")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PlannerId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PrimaryVendor)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Pscunit)
                    .HasColumnName("PSCUnit")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PtaxCode)
                    .HasColumnName("PTaxCode")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PurAccNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PurLeadTimeAdmin).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PurLeadTimeSafety).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PurLeadTimeVendor)
                    .HasColumnName("PurLeadTImeVendor")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PurUnit)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PurchaseRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.QtyInContainer).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Qtyperbox)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RateFactor).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ReceivingLeadTime).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RejLocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ReorderLevel).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Rfqreqd)
                    .HasColumnName("RFQReqd")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SafetyStock).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SaleAccNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SalesRateInRegion).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SalesRateOutRegion).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SalesUnit)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SecUnit)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShelfLife).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ShipngLdTm)
                    .HasColumnType("numeric(4, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sohqty)
                    .HasColumnName("SOHQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StaxCode)
                    .HasColumnName("STaxCode")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StdCft)
                    .HasColumnName("StdCFT")
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.StdCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StdCostMaterial).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StdCostOh)
                    .HasColumnName("StdCostOH")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StdMfgMtrlCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StdPccardQty)
                    .HasColumnName("StdPCCardQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StdProcessRunCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StdProcessSetupCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StdPurMtrlCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StdScrapRealization).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StdWeight)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.StdWt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StockUnit)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupplyDays).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SuspendedForOrdersDate).HasColumnType("datetime");

                entity.Property(e => e.SuspendedForTransactionsDate).HasColumnType("datetime");

                entity.Property(e => e.TarrifDuty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxInRegion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxOutRegion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ToolLife)
                    .HasColumnType("numeric(6, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TransitLeadtime).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UnitRateOn)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Volume).HasColumnType("decimal(9, 0)");

                entity.Property(e => e.WareHouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.WtdAvgRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.WtdAvgValue).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<ItemPrizeList>(entity =>
            {
                entity.Property(e => e.ItemPrizeListId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.EffFrom).HasColumnType("datetime");

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OrderTypeMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Rate).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<ItemProcess>(entity =>
            {
                entity.Property(e => e.ItemProcessId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Bomid)
                    .HasColumnName("BOMId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ByProductsDetailId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DoProdEntry)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.FutureCummulativeYield).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FutureLotSize).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FutureMfgMtrlCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FutureNetCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FutureOutputRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FutureOutputRatePer)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FuturePurMtrlCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FutureScrapRealization).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ItemProcessCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Osp).HasColumnName("OSP");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PrimProcForCosting)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ProcessDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ProductionLineMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RoutingId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.StdCummulativeYield).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdLotSize).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdMfgMtrlCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdNetCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdOutputRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdOutputRatePer)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StdPurMtrlCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdScrapRealization).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ItemPurGordetTypeRel>(entity =>
            {
                entity.ToTable("ItemPurGOrdetTypeRel");

                entity.Property(e => e.ItemPurGordetTypeRelId)
                    .HasColumnName("ItemPurGOrdetTypeRelId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPurchaseGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OrderTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ItemRoutingDetail>(entity =>
            {
                entity.Property(e => e.ItemRoutingDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FutureCummulativeYield).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FutureOperationYield).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FutureRunFixedCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FutureRunLabourCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FutureRunVariableCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FutureSetupFixedCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ItemRoutingHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.MachineGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NoOfLabour).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NoOfMcnGrp).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.OperationDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperationDetail).IsUnicode(false);

                entity.Property(e => e.OperationSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RoutingSeq)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SetupCrewSize).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SetupHrs).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdCummulativeYield).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdOperationYield).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdRunFixedCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdRunLabourCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdRunVariableCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdSetupFixedCost).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdWt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TimeReqd).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TimeReqdCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TimeReqdForLabour).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TimeReqdForrMcnGrp).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TimeUnitForLablor).HasColumnType("numeric(2, 0)");

                entity.Property(e => e.TimeUnitForMcnGrp).HasColumnType("numeric(2, 0)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WipitemId)
                    .HasColumnName("WIPItemId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ItemRoutingHeader>(entity =>
            {
                entity.Property(e => e.ItemRoutingHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemClassificationId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemRoutingCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemRoutingContains)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LotSize).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RoutingDescription)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ItemRoutingToolDetails>(entity =>
            {
                entity.HasKey(e => e.ItmRoutToolId)
                    .HasName("PK__ItemRout__271168A910422BEF");

                entity.Property(e => e.ItmRoutToolId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.DrawingNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItmClassId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItmRoutingDtlId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Qty).HasColumnType("decimal(9, 4)");

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ToolId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("decimal(18, 0)");
            });

            modelBuilder.Entity<ItemSalesGroup>(entity =>
            {
                entity.Property(e => e.ItemSalesGroupId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemSalesGroupCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemSalesGroupName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<ItemSpec>(entity =>
            {
                entity.Property(e => e.ItemSpecId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SpecDefVal)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpecDetailId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SpecHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ItemStockStatus>(entity =>
            {
                entity.HasKey(e => e.ItemPlantId);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AllocQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SbcallocQty)
                    .HasColumnName("SBCAllocQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SbcstockQty)
                    .HasColumnName("SBCStockQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StockQty).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<ItemTypeMaster>(entity =>
            {
                entity.Property(e => e.ItemTypeMasterId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemTypeCode)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ItemTypeDesc)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ItemUomconversion>(entity =>
            {
                entity.ToTable("ItemUOMConversion");

                entity.Property(e => e.ItemUomconversionId)
                    .HasColumnName("ItemUOMConversionId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ConvFactor).HasColumnType("numeric(10, 4)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Uomfrom)
                    .HasColumnName("UOMFrom")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Uomto)
                    .HasColumnName("UOMTo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<ItemVendorRelation>(entity =>
            {
                entity.Property(e => e.ItemVendorRelationId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CatalogNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DiscRate).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Eoq)
                    .HasColumnName("EOQ")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.MinOrderQty).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MultipleQty).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PurLeadTimeSafety).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PurLeadTimeVendor).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PurRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PurUnit)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxClassMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.VendorMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItemWarehouseRelation>(entity =>
            {
                entity.Property(e => e.ItemWarehouseRelationId)
                    .HasColumnName("ItemWarehouseRelationID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasColumnName("ItemMasterID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseMasterId)
                    .HasColumnName("WarehouseMasterID")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ItmQcparam>(entity =>
            {
                entity.HasKey(e => e.QcparamMstId);

                entity.ToTable("ItmQCParam");

                entity.Property(e => e.QcparamMstId)
                    .HasColumnName("QCParamMstId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BasicVal).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.Bvuomid)
                    .HasColumnName("BVUOMId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Goval)
                    .HasColumnName("GOVal")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MnTolrnc).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.MnTolrncUom)
                    .HasColumnName("MnTolrncUOM")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MxTolrnc).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.MxTolrncUom)
                    .HasColumnName("MxTolrncUOM")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Nogoval)
                    .HasColumnName("NOGOVal")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ObsrvVal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OperationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Qcdesc)
                    .HasColumnName("QCDesc")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Qctype)
                    .HasColumnName("QCType")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SourceType)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(9, 0)");
            });

            modelBuilder.Entity<KitchenStockSummary>(entity =>
            {
                entity.Property(e => e.KitchenStockSummaryId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ClosingQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ConsumptionQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Difference).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.EffDate).HasColumnType("datetime");

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OpeningQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PhysClosingQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PurchaseRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ReceiptQty).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<Kotdetail>(entity =>
            {
                entity.ToTable("KOTDetail");

                entity.Property(e => e.KotdetailId)
                    .HasColumnName("KOTDetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCompletedOn).HasColumnType("datetime");

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPrizeListId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.KotheaderId)
                    .HasColumnName("KOTHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.QtyRem).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Rate).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<Kotheader>(entity =>
            {
                entity.ToTable("KOTHeader");

                entity.Property(e => e.KotheaderId)
                    .HasColumnName("KOTHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BillNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.KotcompletedOn)
                    .HasColumnName("KOTCompletedOn")
                    .HasColumnType("datetime");

                entity.Property(e => e.Kotdate)
                    .HasColumnName("KOTDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.KotdeliveredOn)
                    .HasColumnName("KOTDeliveredOn")
                    .HasColumnType("datetime");

                entity.Property(e => e.Kotno)
                    .HasColumnName("KOTNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Kotstatus)
                    .HasColumnName("KOTStatus")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MachineGrpDetailId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ShiftId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TotalOrder).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<LandedCostFactor>(entity =>
            {
                entity.Property(e => e.LandedCostFactorId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CostFactor).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LandedCostFactorCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Modifiedy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<LeaveCalculationMaster>(entity =>
            {
                entity.HasKey(e => e.Lcid);

                entity.Property(e => e.Lcid).HasColumnName("LCId");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Cl)
                    .HasColumnName("CL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.El)
                    .HasColumnName("EL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Enddt)
                    .HasColumnName("enddt")
                    .HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LeaveType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pl)
                    .HasColumnName("PL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sl)
                    .HasColumnName("SL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Startdt)
                    .HasColumnName("startdt")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SyncInfo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Year)
                    .HasColumnName("year")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LeaveTransaction>(entity =>
            {
                entity.HasKey(e => e.PkleaveTransId)
                    .HasName("PK_LeaveTransaction_1");

                entity.Property(e => e.PkleaveTransId)
                    .HasColumnName("PKLeaveTransId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AddedMethodType).HasMaxLength(36);

                entity.Property(e => e.BalanceType)
                    .HasColumnName("BalanceTYpe")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BatchCode).HasMaxLength(500);

                entity.Property(e => e.CurrentStatus).HasMaxLength(500);

                entity.Property(e => e.FkUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LeaveCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoOfDays).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.Uploadmethod)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LeaveTypeMaster>(entity =>
            {
                entity.HasKey(e => e.LeaveTypeId);

                entity.Property(e => e.LeaveTypeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AllowLeaveCarryForwrd).HasColumnName("AllowLeave_CarryForwrd");

                entity.Property(e => e.CountHolidaysForLeave).HasColumnName("CountHolidays_ForLeave");

                entity.Property(e => e.CountWeeklyOffForLeave).HasColumnName("CountWeeklyOff_ForLeave");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsEncashmentApplicable)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LeaveCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LeaveDescription)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MaxDaysCarryFrwrd)
                    .HasColumnName("MaxDays_CarryFrwrd")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MaxDaysInOneOccur)
                    .HasColumnName("MaxDays_InOneOccur")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MaxDaysInOnePeriod)
                    .HasColumnName("MaxDays_InOnePeriod")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MaxOccurInOnePeriod)
                    .HasColumnName("MaxOccur_InOnePeriod")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MaxOccurInOneYear)
                    .HasColumnName("MaxOccur_InOneYear")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<LeftOvrDtl>(entity =>
            {
                entity.HasKey(e => e.LeftOvrDtl1);

                entity.Property(e => e.LeftOvrDtl1)
                    .HasColumnName("LeftOvrDtl")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.LeftOvrhdrId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PccardMasterId)
                    .HasColumnName("PCCardMasterId")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LeftOvrHdr>(entity =>
            {
                entity.Property(e => e.LeftOvrHdrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Addeddt).HasColumnType("datetime");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Docdt).HasColumnType("datetime");
            });

            modelBuilder.Entity<LocalPurchaseRegister>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK__LocalPur__360414DF47A758AC");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Addeddt).HasColumnType("datetime");

                entity.Property(e => e.Fyid)
                    .HasColumnName("FYID")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.GenericField1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InternalRefDocNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Match)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OurGstin)
                    .HasColumnName("OurGSTIN")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Pan)
                    .HasColumnName("PAN")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PkpurchaseId)
                    .HasColumnName("PKPurchaseId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Projectcode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Rate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Srno)
                    .HasColumnName("SRNo")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SystemCess)
                    .HasColumnName("SystemCESS")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SystemCgst)
                    .HasColumnName("SystemCGST")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SystemIgst)
                    .HasColumnName("SystemIGST")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SystemSgst)
                    .HasColumnName("SystemSGST")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxableValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.VendorBillDate).HasColumnType("datetime");

                entity.Property(e => e.VendorBillNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VendorGstin)
                    .HasColumnName("VendorGSTIN")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VendorName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationMaster>(entity =>
            {
                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Aisle)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Bay)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Bin)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.BulkLoc).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ForBackFlush).HasDefaultValueSql("((0))");

                entity.Property(e => e.ForSbcmtrl)
                    .HasColumnName("ForSBCMtrl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Level)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.LocationCapacity).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LocationDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LocationRateCategoryId)
                    .HasColumnName("LocationRateCategoryID")
                    .HasMaxLength(50);

                entity.Property(e => e.LocationStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LocationTypeId)
                    .HasColumnName("locationTypeID")
                    .HasMaxLength(50);

                entity.Property(e => e.LocationWeight)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NegStockAllowed)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.OperationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Uomid)
                    .HasColumnName("UOMId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LocationType>(entity =>
            {
                entity.Property(e => e.LocationTypeId)
                    .HasColumnName("locationTypeID")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LocationType1)
                    .HasColumnName("LocationType")
                    .HasMaxLength(100);

                entity.Property(e => e.Locconstraint)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Note).HasMaxLength(100);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<LocationWiseWeeklyOff>(entity =>
            {
                entity.HasKey(e => e.PklocWiseOffId);

                entity.Property(e => e.PklocWiseOffId)
                    .HasColumnName("PKLocWiseOffId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.LocationId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WeeklyOff)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Locentry>(entity =>
            {
                entity.ToTable("LOCEntry");

                entity.HasIndex(e => e.RecId)
                    .HasName("UQ__LOCEntry__6A90B8FC")
                    .IsUnique();

                entity.Property(e => e.LocentryId)
                    .HasColumnName("LOCEntryId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ExpiryDt).HasColumnType("datetime");

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Lcamt)
                    .HasColumnName("LCAmt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LcamtUtilized)
                    .HasColumnName("LCAmtUtilized")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Lcdate)
                    .HasColumnName("LCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Lcno)
                    .IsRequired()
                    .HasColumnName("LCNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LogInInfo>(entity =>
            {
                entity.HasKey(e => e.PklogInInfoId)
                    .HasName("PK__LogInInf__36E39BFC3BF5C5A4");

                entity.HasIndex(e => new { e.SignInDateTime, e.UserMasterId })
                    .HasName("<Name of Missing Index, sysname,>");

                entity.Property(e => e.PklogInInfoId)
                    .HasColumnName("PKLogInInfoId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Ipaddress)
                    .HasColumnName("IPAddress")
                    .HasMaxLength(30);

                entity.Property(e => e.Session)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SignInDateTime).HasColumnType("datetime");

                entity.Property(e => e.SignOutDateTime).HasColumnType("datetime");

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Login>(entity =>
            {
                entity.HasKey(e => e.UserLoginId);

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.UserPassword)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MachineAllocation>(entity =>
            {
                entity.HasKey(e => e.MachineAllocId);

                entity.Property(e => e.MachineAllocId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.MachineMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MoheaderId)
                    .HasColumnName("MOHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Moqty)
                    .HasColumnName("MOQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.MoroutingId)
                    .HasColumnName("MORoutingId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OperationMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ToDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<MachineDownTimeDetail>(entity =>
            {
                entity.HasKey(e => e.MachineDownTimeId);

                entity.Property(e => e.MachineDownTimeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.DwnTimeFrom)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DwnTimeTo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MachineMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.McnDwnRsnMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ShiftId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TotalDownTime).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<MachineGroupDetail>(entity =>
            {
                entity.Property(e => e.MachineGroupDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AssetNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CalendorId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Flatknit)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LocationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.MachineGroupMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.MachineName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MachineNo).HasMaxLength(36);

                entity.Property(e => e.Make)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ManufacturerSrNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MaxHrPerDay).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Needle)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SelectTerry)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Terry)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Year).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<MachineGroupMaster>(entity =>
            {
                entity.Property(e => e.MachineGroupMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AvgMaxHours)
                    .HasColumnName("AvgMAxHours")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CalendarId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeptMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FutureFixedOverheadRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FutureLabourRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FutureOtherOverheadRate1).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FutureOtherOverheadRate2).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FutureVariableOverheadRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.GroupCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GroupDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MachineGrpClr)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MaxCapacity).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.MinCapacity).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Modifiedy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoOfMachines).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.OperationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.OrderTypeMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Osp).HasColumnName("OSP");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StdFixedOverheadRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdLabourRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdOtherOverheadRate1).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdOtherOverheadRate2).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StdVariableOverheadRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<MachineMaster>(entity =>
            {
                entity.Property(e => e.MachineMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MachineCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MachineGroupId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MachineName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<MainModule>(entity =>
            {
                entity.Property(e => e.MainModuleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.MainModuleDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ManageCompoffLeaveMaster>(entity =>
            {
                entity.HasKey(e => e.PkemployeeleaveId);

                entity.ToTable("Manage_Compoff_LeaveMaster");

                entity.Property(e => e.PkemployeeleaveId)
                    .HasColumnName("PKEmployeeleaveId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApprovalDate).HasColumnType("datetime");

                entity.Property(e => e.ApprovalStatus).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApproverRemark)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompOffStatus)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ExtraWorkingDate).HasColumnType("datetime");

                entity.Property(e => e.LeaveCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Workingdays).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<Manifest>(entity =>
            {
                entity.Property(e => e.ManifestId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DriverAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DriverContactNo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.DriverName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ManifestClosedDateTime).HasColumnType("datetime");

                entity.Property(e => e.ManifestCreatedDateTime).HasColumnType("datetime");

                entity.Property(e => e.ManifestDate).HasColumnType("datetime");

                entity.Property(e => e.ManifestNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TransporterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransporterName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.VehicleNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ManufacturingOrderDetail>(entity =>
            {
                entity.Property(e => e.ManufacturingOrderDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CustOrderNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ManufacturingOrderHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NoOfLots).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ScheduleDate).HasColumnType("datetime");

                entity.Property(e => e.TotalQty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ManufacturingOrderHeader>(entity =>
            {
                entity.Property(e => e.ManufacturingOrderHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AuthorizedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CustomerMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LeadTime).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OrderDate)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OrderNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SalesOrderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SalesOrderLotId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduledProdDate).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<McnDwnRsnMaster>(entity =>
            {
                entity.Property(e => e.McnDwnRsnMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ReasonCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MeetingTypes>(entity =>
            {
                entity.HasKey(e => e.MeetingTypeId);

                entity.Property(e => e.MeetingTypeId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy).HasMaxLength(30);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MeetingTypeDesc).HasMaxLength(100);

                entity.Property(e => e.ModifiedBy).HasMaxLength(30);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<MemberClassificationMaster>(entity =>
            {
                entity.HasKey(e => e.ClassificationId);

                entity.Property(e => e.ClassificationId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ClassificationType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<MenuMaster>(entity =>
            {
                entity.HasKey(e => e.PkmenuId);

                entity.Property(e => e.PkmenuId)
                    .HasColumnName("PKMenuId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FkmoduleMastId)
                    .HasColumnName("FKModuleMastId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Menu)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MenuCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Messages>(entity =>
            {
                entity.HasKey(e => e.MessageId);

                entity.Property(e => e.MessageId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.MessageDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MessageTypes)
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Misdetail>(entity =>
            {
                entity.ToTable("MISDetail");

                entity.Property(e => e.MisdetailId)
                    .HasColumnName("MISDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AckQty)
                    .HasColumnType("numeric(9, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Comment)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IssueQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LotNo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.MisheaderId)
                    .HasColumnName("MISHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MostockAllocId)
                    .HasColumnName("MOStockAllocId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ReqQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ReturnQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RouteFrom)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RouteTo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SegmentType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.StockQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Misheader>(entity =>
            {
                entity.ToTable("MISHeader");

                entity.Property(e => e.MisheaderId)
                    .HasColumnName("MISHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DeptMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsOgpcreated)
                    .HasColumnName("IsOGPCreated")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IssuedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Misdt)
                    .HasColumnName("MISDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.Misno)
                    .HasColumnName("MISNo")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Mistype)
                    .HasColumnName("MISType")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RecType)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RefRecId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RefRecType)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Transporter)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VehicleNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MispacketList>(entity =>
            {
                entity.ToTable("MISPacketList");

                entity.Property(e => e.MispacketListId)
                    .HasColumnName("MISPacketListId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IssueQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.MisdetailId)
                    .HasColumnName("MISDetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MisheaderId)
                    .HasColumnName("MISHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PacketSrNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MmContractDetail>(entity =>
            {
                entity.HasKey(e => e.ContractDetailId)
                    .HasName("PK__MM_ContractDetai__721CCC2B");

                entity.ToTable("MM_ContractDetail");

                entity.Property(e => e.ContractDetailId)
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ContractHeaderId).HasMaxLength(50);

                entity.Property(e => e.ContractRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<MmContractHeader>(entity =>
            {
                entity.HasKey(e => e.ContractHeaderId)
                    .HasName("PK__MM_ContractHeade__6F405F80");

                entity.ToTable("MM_ContractHeader");

                entity.Property(e => e.ContractHeaderId)
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ContractDate).HasColumnType("datetime");

                entity.Property(e => e.ContractFromDt).HasColumnType("datetime");

                entity.Property(e => e.ContractNo).HasMaxLength(100);

                entity.Property(e => e.ContractStatus).HasMaxLength(50);

                entity.Property(e => e.ContractTerminationDt).HasColumnType("datetime");

                entity.Property(e => e.ContractToDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DetailAmt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OldContractNo)
                    .HasColumnName("OldContractNO")
                    .HasMaxLength(100);

                entity.Property(e => e.TerminationReason).HasMaxLength(500);

                entity.Property(e => e.TotalAmt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TradeDiscount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<MmDinoteReqDetail>(entity =>
            {
                entity.HasKey(e => e.DinoteDetailId)
                    .HasName("PK__MM_DINoteReqDeta__75ED5D0F");

                entity.ToTable("MM_DINoteReqDetail");

                entity.Property(e => e.DinoteDetailId)
                    .HasColumnName("DINoteDetailID")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ContractDetailId).HasMaxLength(50);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DinoteNo)
                    .HasColumnName("DINoteNo")
                    .HasMaxLength(50);

                entity.Property(e => e.DinoteReqHeaderId)
                    .HasColumnName("DINoteReqHeaderID")
                    .HasMaxLength(50);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<MmDinoteReqHeader>(entity =>
            {
                entity.HasKey(e => e.DinoteReqHeaderId)
                    .HasName("PK__MM_DINoteReqHead__7405149D");

                entity.ToTable("MM_DINoteReqHeader");

                entity.Property(e => e.DinoteReqHeaderId)
                    .HasColumnName("DINoteReqHeaderID")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AdvProdName).HasMaxLength(500);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DinoteReqNumber)
                    .HasColumnName("DINoteReqNumber")
                    .HasMaxLength(50);

                entity.Property(e => e.DireqFromDt)
                    .HasColumnName("DIReqFromDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.DireqHeaderRemark)
                    .HasColumnName("DIReqHeaderRemark")
                    .HasMaxLength(200);

                entity.Property(e => e.DireqToDt)
                    .HasColumnName("DIReqToDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PrintingStatus).HasMaxLength(50);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<MmDivisionMaster>(entity =>
            {
                entity.HasKey(e => e.DivisionId)
                    .HasName("PK_DivisionMaster");

                entity.ToTable("MM_DivisionMaster");

                entity.Property(e => e.DivisionId)
                    .HasColumnName("DivisionID")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.ContactPerson).HasMaxLength(300);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Designation).HasMaxLength(250);

                entity.Property(e => e.DivisionCd).HasMaxLength(200);

                entity.Property(e => e.DivisionName).HasMaxLength(500);

                entity.Property(e => e.Email).HasMaxLength(200);

                entity.Property(e => e.FunctionArea).HasMaxLength(250);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile).HasMaxLength(15);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Phone).HasMaxLength(20);

                entity.Property(e => e.RegionalId)
                    .HasColumnName("RegionalID")
                    .HasMaxLength(50);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<MmLocationRateCategory>(entity =>
            {
                entity.HasKey(e => e.LocationRateCategoryId)
                    .HasName("PK_LocationRateCategory");

                entity.ToTable("MM_LocationRateCategory");

                entity.Property(e => e.LocationRateCategoryId)
                    .HasColumnName("LocationRateCategoryID")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LocationRate).HasMaxLength(20);

                entity.Property(e => e.LocationRateDesc).HasMaxLength(200);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Note).HasMaxLength(200);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<MmPositionCategory>(entity =>
            {
                entity.HasKey(e => e.PositionCategoryId)
                    .HasName("PK_PositionCategory");

                entity.ToTable("MM_PositionCategory");

                entity.Property(e => e.PositionCategoryId)
                    .HasColumnName("PositionCategoryID")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PositionCategory).HasMaxLength(50);

                entity.Property(e => e.PositionCategoryDesc).HasMaxLength(500);

                entity.Property(e => e.PositionCd).HasMaxLength(20);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<MmRateCard>(entity =>
            {
                entity.HasKey(e => e.RateCardId)
                    .HasName("PK_RateCard");

                entity.ToTable("MM_RateCard");

                entity.Property(e => e.RateCardId)
                    .HasColumnName("RateCardID")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LocationRateCategoryId)
                    .HasColumnName("LocationRateCategoryID")
                    .HasMaxLength(50);

                entity.Property(e => e.MediaTypeId)
                    .HasColumnName("MediaTypeID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PositionCategoryId)
                    .HasColumnName("PositionCategoryID")
                    .HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.RateCardHeaderId)
                    .HasColumnName("RateCardHeaderID")
                    .HasMaxLength(50);

                entity.Property(e => e.Uomid)
                    .HasColumnName("UOMId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<MmRateCardHeader>(entity =>
            {
                entity.HasKey(e => e.RateCardHeaderId)
                    .HasName("PK_RateCardHeader");

                entity.ToTable("MM_RateCardHeader");

                entity.Property(e => e.RateCardHeaderId)
                    .HasColumnName("RateCardHeaderID")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EffectiveFrom).HasColumnType("datetime");

                entity.Property(e => e.EffectiveTo).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RateHeadDesc).HasMaxLength(500);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<MmWishListDetail>(entity =>
            {
                entity.HasKey(e => e.WldetailId)
                    .HasName("PK__MM_WishListDetai__6D58170E");

                entity.ToTable("MM_WishListDetail");

                entity.Property(e => e.WldetailId)
                    .HasColumnName("WLDetailId")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RateDiscountPerc).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.RequestedRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WldetailRate)
                    .HasColumnName("WLDetailRate")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WldetailRemark)
                    .HasColumnName("WLDetailRemark")
                    .HasMaxLength(500);

                entity.Property(e => e.WlheaderId)
                    .HasColumnName("WLHeaderId")
                    .HasMaxLength(50);

                entity.Property(e => e.WlitemStatus)
                    .HasColumnName("WLItemStatus")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MmWishListHeader>(entity =>
            {
                entity.HasKey(e => e.WlheaderId)
                    .HasName("PK__MM_WishListHeade__6B6FCE9C");

                entity.ToTable("MM_WishListHeader");

                entity.Property(e => e.WlheaderId)
                    .HasColumnName("WLHeaderId")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ReqContractFrom).HasColumnType("datetime");

                entity.Property(e => e.ReqContractTo).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Wldate)
                    .HasColumnName("WLDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.WlexpDt)
                    .HasColumnName("WLExpDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.WlheaderRemark)
                    .HasColumnName("WLHeaderRemark")
                    .HasMaxLength(500);

                entity.Property(e => e.Wlname)
                    .HasColumnName("WLName")
                    .HasMaxLength(100);

                entity.Property(e => e.Wlnumber)
                    .HasColumnName("WLNumber")
                    .HasMaxLength(30);

                entity.Property(e => e.Wlstatus)
                    .HasColumnName("WLStatus")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MobileActDact>(entity =>
            {
                entity.HasKey(e => e.Srno);

                entity.ToTable("MobileActDAct");

                entity.Property(e => e.Srno)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CountInstall)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.CountUninstall)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.CurrentDate).HasColumnType("datetime");

                entity.Property(e => e.DeviceId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MobileAct).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MobileNo)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Modetail>(entity =>
            {
                entity.ToTable("MODetail");

                entity.Property(e => e.ModetailId)
                    .HasColumnName("MODetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActualCost).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BomdqtyPer)
                    .HasColumnName("BOMDQtyPer")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BomheaderId)
                    .HasColumnName("BOMHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.BomhqtyPer)
                    .HasColumnName("BOMHQtyPer")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ComponentMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DispatchQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.EffectiveFrom).HasColumnType("datetime");

                entity.Property(e => e.EffectiveTo).HasColumnType("datetime");

                entity.Property(e => e.EquiReceiptQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IssueThisQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ModetailStatus)
                    .HasColumnName("MODetailStatus")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MoheaderId)
                    .HasColumnName("MOHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PendingReqmntQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Rate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RecQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ReqdQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ReturnedQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ScrapQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StockBal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotalAllocQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotalIssue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UsedAtOperationSeq)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ModuleInfo>(entity =>
            {
                entity.HasKey(e => e.PkmoduleId);

                entity.Property(e => e.PkmoduleId)
                    .HasColumnName("PKModuleId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ModuleCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModuleName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ModuleMaster>(entity =>
            {
                entity.HasKey(e => e.PkmoduleMastId);

                entity.HasIndex(e => new { e.PkmoduleMastId, e.ModuleName, e.ProjectId, e.IsDeleted })
                    .HasName("IsDeleted");

                entity.HasIndex(e => new { e.PkmoduleMastId, e.ModuleName, e.IsDeleted, e.ModuleCode, e.StartDate, e.EndDate, e.DueDate, e.HoursRequired, e.IssuedTo, e.ActualStartDate, e.ActualEndDate, e.IsDefaultModule, e.ProjectId })
                    .HasName("ProjectId");

                entity.HasIndex(e => new { e.ProjectId, e.IsDeleted, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.StartDate, e.EndDate, e.DueDate, e.HoursRequired, e.IssuedTo, e.ActualStartDate, e.ActualEndDate, e.IsDefaultModule, e.ModuleName, e.ModuleCode, e.PkmoduleMastId })
                    .HasName("ModuleId");

                entity.Property(e => e.PkmoduleMastId)
                    .HasColumnName("PKModuleMastId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ClientId).HasMaxLength(50);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.HoursRequired)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDefaultModule)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IssuedTo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ModuleCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ModuleName).HasMaxLength(500);

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ModuleRoles>(entity =>
            {
                entity.Property(e => e.ModuleRolesId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ModulesId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RolesId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ModuleSetup>(entity =>
            {
                entity.Property(e => e.ModuleSetupId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ModuleDisplayValue)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ModuleSetupDesc)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.ModuleSetupValue)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ModuleType)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.SetupType)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.UserControlName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Modules>(entity =>
            {
                entity.Property(e => e.ModulesId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.MainModuleId)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ModuleDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModuleType)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Moheader>(entity =>
            {
                entity.ToTable("MOHeader");

                entity.Property(e => e.MoheaderId)
                    .HasColumnName("MOHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Comments)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CrtnAlloctdQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.DeliveryDt).HasColumnType("datetime");

                entity.Property(e => e.IpmtrlCalcMode)
                    .HasColumnName("IPMtrlCalcMode")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IproutDtlId)
                    .HasColumnName("IPRoutDtlId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ItemProcessId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LotNo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Moclassification)
                    .HasColumnName("MOClassification")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Modate)
                    .HasColumnName("MODate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MoheaderStatus)
                    .HasColumnName("MOHeaderStatus")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Mono)
                    .HasColumnName("MONo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Moqty)
                    .HasColumnName("MOQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.MoqtyWithYield)
                    .HasColumnName("MOQtyWithYield")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Motype)
                    .HasColumnName("MOType")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Mrprun).HasColumnName("MRPRun");

                entity.Property(e => e.OproutDtlId)
                    .HasColumnName("OPRoutDtlId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PccardQty)
                    .HasColumnName("PCCardQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PicklistQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PodetailId)
                    .HasColumnName("PODetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ProdQty)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ref)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RejQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ReleaseMo).HasColumnName("ReleaseMO");

                entity.Property(e => e.ReqdQtyForPc)
                    .HasColumnName("ReqdQtyForPC")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ReworkQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RouteFrom)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RouteTo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleStartDt).HasColumnType("datetime");

                entity.Property(e => e.ScrapQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SecondsQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SegmentType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SizeVolume).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SoheaderId)
                    .HasColumnName("SOHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SoscheduleId)
                    .HasColumnName("SOScheduleId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Momactivities>(entity =>
            {
                entity.HasKey(e => e.MomactivityId);

                entity.ToTable("MOMActivities");

                entity.Property(e => e.MomactivityId)
                    .HasColumnName("MOMActivityId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActPntNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityMasterId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Momid)
                    .HasColumnName("MOMId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MompointId)
                    .HasColumnName("MOMPointId")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Momattendes>(entity =>
            {
                entity.ToTable("MOMAttendes");

                entity.Property(e => e.MomattendesId)
                    .HasColumnName("MOMAttendesId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Feedback)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IsMomhead)
                    .HasColumnName("IsMOMHead")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Momid)
                    .HasColumnName("MOMId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PartAvailable)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Momdefinition>(entity =>
            {
                entity.HasKey(e => e.Momid);

                entity.ToTable("MOMDefinition");

                entity.Property(e => e.Momid)
                    .HasColumnName("MOMId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActFromTime).HasColumnType("datetime");

                entity.Property(e => e.ActToTime).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CallId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DateOfMeeting).HasColumnType("datetime");

                entity.Property(e => e.Duration)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FromTime).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsFinalMom)
                    .HasColumnName("IsFinalMOM")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MeetingTaker)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MeetingTypeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Momduration).HasColumnName("MOMDuration");

                entity.Property(e => e.Momtitle)
                    .HasColumnName("MOMTitle")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ToTime).HasColumnType("datetime");

                entity.Property(e => e.Venue)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Mompoints>(entity =>
            {
                entity.HasKey(e => e.MompointId);

                entity.ToTable("MOMPoints");

                entity.Property(e => e.MompointId)
                    .HasColumnName("MOMPointId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Momid)
                    .HasColumnName("MOMId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.MompointDesc)
                    .HasColumnName("MOMPointDesc")
                    .HasMaxLength(2500)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(2500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Momreminder>(entity =>
            {
                entity.HasKey(e => e.MomremindId);

                entity.ToTable("MOMReminder");

                entity.Property(e => e.MomremindId)
                    .HasColumnName("MOMRemindId")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.EveryMonthCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsNoEndDate)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Momdesc)
                    .IsRequired()
                    .HasColumnName("MOMDesc")
                    .IsUnicode(false);

                entity.Property(e => e.Momid)
                    .IsRequired()
                    .HasColumnName("MOMId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MonthlyDay)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MonthlyDayNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MonthlyMonth).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MonthlyWeek)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Occurrences).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RecEndDate).HasColumnType("datetime");

                entity.Property(e => e.RecStartDate).HasColumnType("datetime");

                entity.Property(e => e.RecurDaysCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RecurWeeksCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RecurYearCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TypeOfPeriod)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyDay)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyMonth)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyMonthName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyWeek)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MomtrlReqDtl>(entity =>
            {
                entity.ToTable("MOMtrlReqDtl");

                entity.Property(e => e.MomtrlReqDtlId)
                    .HasColumnName("MOMtrlReqDtlId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MoheaderId)
                    .HasColumnName("MOHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MomtrlReqHeaderId)
                    .HasColumnName("MOMtrlReqHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReqForQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ReqForQtyWithYield).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<MomtrlReqHeader>(entity =>
            {
                entity.ToTable("MOMtrlReqHeader");

                entity.Property(e => e.MomtrlReqHeaderId)
                    .HasColumnName("MOMtrlReqHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.MomtrlReqDt)
                    .HasColumnName("MOMtrlReqDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.MomtrlReqNo)
                    .HasColumnName("MOMtrlReqNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReqType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MomtrlReqItemDtl>(entity =>
            {
                entity.ToTable("MOMtrlReqItemDtl");

                entity.Property(e => e.MomtrlReqItemDtlId)
                    .HasColumnName("MOMtrlReqItemDtlId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModetailId)
                    .HasColumnName("MODetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MomtrlReqDtlId)
                    .HasColumnName("MOMtrlReqDtlId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MomtrlReqHeaderId)
                    .HasColumnName("MOMtrlReqHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReqQty).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<MomtrlReqPickList>(entity =>
            {
                entity.ToTable("MOMtrlReqPickList");

                entity.Property(e => e.MomtrlReqPickListId)
                    .HasColumnName("MOMtrlReqPickListId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MomtrlReqHeaderId)
                    .HasColumnName("MOMtrlReqHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MomtrlReqSummaryId)
                    .HasColumnName("MOMtrlReqSummaryId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PickListQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StockDetailsId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MomtrlReqSummary>(entity =>
            {
                entity.ToTable("MOMtrlReqSummary");

                entity.Property(e => e.MomtrlReqSummaryId)
                    .HasColumnName("MOMtrlReqSummaryId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MomtrlReqHeaderId)
                    .HasColumnName("MOMtrlReqHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReqQty).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<Moqcparam>(entity =>
            {
                entity.HasKey(e => e.MoqcparamMstId);

                entity.ToTable("MOQCParam");

                entity.Property(e => e.MoqcparamMstId)
                    .HasColumnName("MOQCParamMstId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BasicVal).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.Bvuomid)
                    .HasColumnName("BVUOMId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Goval)
                    .HasColumnName("GOVal")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MnTolrnc).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.MnTolrncUom)
                    .HasColumnName("MnTolrncUOM")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MxTolrnc).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.MxTolrncUom)
                    .HasColumnName("MxTolrncUOM")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Nogoval)
                    .HasColumnName("NOGOVal")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ObsrvVal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Qcdesc)
                    .HasColumnName("QCDesc")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Qctype)
                    .HasColumnName("QCType")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SourceType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(9, 0)");
            });

            modelBuilder.Entity<Morouting>(entity =>
            {
                entity.ToTable("MORouting");

                entity.Property(e => e.MoroutingId)
                    .HasColumnName("MORoutingId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActualEndDt).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDt).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AllocMcn).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Art)
                    .HasColumnName("ART")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EndDt).HasColumnType("datetime");

                entity.Property(e => e.ExpectedEndDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IssuedQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ItemQty).HasColumnType("numeric(5, 0)");

                entity.Property(e => e.ItemRoutingId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.MachineGroupMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MoheaderId)
                    .HasColumnName("MOHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Moqty)
                    .HasColumnName("MOQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NextStageQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NoOfLabour).HasColumnType("numeric(5, 0)");

                entity.Property(e => e.NoOfMcnGrp).HasColumnType("numeric(5, 0)");

                entity.Property(e => e.OffsetDays).HasColumnType("numeric(4, 0)");

                entity.Property(e => e.OperationSeqId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PerDayOutput).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.PercentEfficiency).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ProdQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.QlpendingQty)
                    .HasColumnName("QLPendingQty")
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyToProd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ReqMcn).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ReworkQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RoutingSeq)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ScrapQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SecondsQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SetupCrewSize).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SetupHrs).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Srt)
                    .HasColumnName("SRT")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.StartDt).HasColumnType("datetime");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StdCummulativeYield).HasColumnType("numeric(5, 0)");

                entity.Property(e => e.StdOperationYield).HasColumnType("numeric(5, 0)");

                entity.Property(e => e.StdWt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TimeReqd).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TimeReqdCode).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TimeReqdForLabour).HasColumnType("numeric(5, 0)");

                entity.Property(e => e.TimeReqdForrMcnGrp).HasColumnType("numeric(5, 0)");

                entity.Property(e => e.TimeUnitForLabour).HasColumnType("numeric(5, 0)");

                entity.Property(e => e.TimeUnitForMcnGrp).HasColumnType("numeric(5, 0)");

                entity.Property(e => e.TimeUnitForSetup).HasColumnType("numeric(5, 0)");

                entity.Property(e => e.TinShedPickedQty)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TransferQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WipitemId)
                    .HasColumnName("WIPItemId")
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Mospec>(entity =>
            {
                entity.ToTable("MOSpec");

                entity.Property(e => e.MospecId)
                    .HasColumnName("MOSpecId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MoheaderId)
                    .IsRequired()
                    .HasColumnName("MOHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SpecDesc).HasMaxLength(200);

                entity.Property(e => e.SpecVal).HasMaxLength(200);
            });

            modelBuilder.Entity<MostockAlloc>(entity =>
            {
                entity.ToTable("MOStockAlloc");

                entity.Property(e => e.MostockAllocId)
                    .HasColumnName("MOStockAllocId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AllocQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.IssueQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModetailId)
                    .IsRequired()
                    .HasColumnName("MODetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockDetailsId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Mrndetail>(entity =>
            {
                entity.ToTable("MRNDetail");

                entity.Property(e => e.MrndetailId)
                    .HasColumnName("MRNDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActualMrnqty)
                    .HasColumnName("ActualMRNQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsPacketAppl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LotNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MisdetailId)
                    .HasColumnName("MISDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MrnheaderId)
                    .IsRequired()
                    .HasColumnName("MRNHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Mrnqty)
                    .HasColumnName("MRNQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NoOfPacket)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PacketMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PacketState)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ref)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Rmdaqty)
                    .HasColumnName("RMDAQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Mrnheader>(entity =>
            {
                entity.ToTable("MRNHeader");

                entity.Property(e => e.MrnheaderId)
                    .HasColumnName("MRNHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AuthorisedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeptMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DocType).HasMaxLength(30);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Mrndt)
                    .HasColumnName("MRNDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mrnno)
                    .HasColumnName("MRNNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RefDocType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RouteFrom)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RouteTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SegmentType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<MrnpacketList>(entity =>
            {
                entity.ToTable("MRNPacketList");

                entity.Property(e => e.MrnpacketListId)
                    .HasColumnName("MRNPacketListId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MrndetailId)
                    .HasColumnName("MRNDetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MrnheaderId)
                    .HasColumnName("MRNHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PacketSrNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketState)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PacketStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Mrp>(entity =>
            {
                entity.ToTable("MRP");

                entity.Property(e => e.Mrpid)
                    .HasColumnName("MRPId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Mrpfrom)
                    .HasColumnName("MRPFrom")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mrpto)
                    .HasColumnName("MRPTo")
                    .HasColumnType("datetime");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Mrpmodetail>(entity =>
            {
                entity.ToTable("MRPMODetail");

                entity.Property(e => e.MrpmodetailId)
                    .HasColumnName("MRPMODetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModetailId)
                    .HasColumnName("MODetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MoheaderId)
                    .HasColumnName("MOheaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReqAvailableDt).HasColumnType("datetime");

                entity.Property(e => e.ReqQty).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Mrpplan>(entity =>
            {
                entity.ToTable("MRPPlan");

                entity.Property(e => e.MrpplanId)
                    .HasColumnName("MRPPlanId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.MfgPur).HasColumnName("Mfg_Pur");

                entity.Property(e => e.MoPo)
                    .HasColumnName("MO_PO")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MrpplanDate)
                    .HasColumnName("MRPPlanDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.MrpprojAddStatus).HasColumnName("MRPProjAddStatus");

                entity.Property(e => e.MrpprojectionId)
                    .HasColumnName("MRPProjectionId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PlanQty).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PlanRecDate).HasColumnType("datetime");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReleaseDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<MrpplanOrd>(entity =>
            {
                entity.ToTable("MRPPlanOrd");

                entity.Property(e => e.MrpplanOrdId)
                    .HasColumnName("MRPPlanOrdId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EarliestRecDate).HasColumnType("datetime");

                entity.Property(e => e.Eoq)
                    .HasColumnName("EOQ")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LeadTime).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MfgPur).HasColumnName("Mfg_Pur");

                entity.Property(e => e.MoPo)
                    .HasColumnName("MO_PO")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MrpplanId)
                    .HasColumnName("MRPPlanId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MrpplanOrdDate)
                    .HasColumnName("MRPPlanOrdDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.MrpprojAddStatus).HasColumnName("MRPProjAddStatus");

                entity.Property(e => e.MultiplesQty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.PlanOrdQty).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.VendorId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MrpplanStatus>(entity =>
            {
                entity.HasKey(e => e.ItemPlantId);

                entity.ToTable("MRPPlanStatus");

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.DefaultAddstatus)
                    .HasColumnName("DefaultADDStatus")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RecurCount).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Mrpprojection>(entity =>
            {
                entity.ToTable("MRPProjection");

                entity.Property(e => e.MrpprojectionId)
                    .HasColumnName("MRPProjectionId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Action)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddSrcDocNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cons).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DelayedRecDays).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DocType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MrpplanId)
                    .HasColumnName("MRPPlanId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MrpprojDate)
                    .HasColumnName("MRPProjDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.OrgScheduleDt)
                    .HasColumnName("Org_ScheduleDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProjBal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ProjSeqNo).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.RecCons).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Receipt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Source)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SrcDocNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalShipgLeadTime).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Mrpreq>(entity =>
            {
                entity.ToTable("MRPReq");

                entity.Property(e => e.MrpreqId)
                    .HasColumnName("MRPReqId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MrpreqDate)
                    .HasColumnName("MRPReqDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReqQtyinStkUnit).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Source)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Mrsdetail>(entity =>
            {
                entity.ToTable("MRSDetail");

                entity.Property(e => e.MrsdetailId)
                    .HasColumnName("MRSDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IssuedQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModetailId)
                    .HasColumnName("MODetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MrsheaderId)
                    .HasColumnName("MRSHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReqQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RouteFrom)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RouteTo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SegmentType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Mrsheader>(entity =>
            {
                entity.ToTable("MRSHeader");

                entity.Property(e => e.MrsheaderId)
                    .HasColumnName("MRSHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ApproverId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeptMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Mrsdate)
                    .HasColumnName("MRSDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mrsno)
                    .HasColumnName("MRSNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Mrstype)
                    .HasColumnName("MRSType")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Purpose)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RequisitionerId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RouteFrom)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RouteTo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SegmentType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<MrspickList>(entity =>
            {
                entity.ToTable("MRSPickList");

                entity.Property(e => e.MrspickListId)
                    .HasColumnName("MRSPickListId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MrsdetailId)
                    .HasColumnName("MRSDetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MrsheaderId)
                    .HasColumnName("MRSHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PickListQty).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<MtrlPutAway>(entity =>
            {
                entity.Property(e => e.MtrlPutAwayId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DestItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DestLocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DestLotNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DestPlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DestStockDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DestTranQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.DestTranRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.DestUommasterId)
                    .HasColumnName("DestUOMMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DestWareHouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PutAwayDt).HasColumnType("datetime");

                entity.Property(e => e.PutAwayNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SrcItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SrcLocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SrcLotNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SrcPlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SrcStockDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SrcTranQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SrcTranRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SrcUommasterId)
                    .HasColumnName("SrcUOMMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SrcWareHouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<MtrlTranNote>(entity =>
            {
                entity.Property(e => e.MtrlTranNoteId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DestItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DestLocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DestLotNo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DestPlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DestStockDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DestTranQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.DestTranRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.DestUommasterId)
                    .HasColumnName("DestUOMMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DestWareHouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsForStock).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPacketAppl)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Mtndt)
                    .HasColumnName("MTNDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mtnno)
                    .HasColumnName("MTNNo")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PacketMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RecType)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('10')");

                entity.Property(e => e.RefRecId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('10')");

                entity.Property(e => e.RefRecType)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('10')");

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SrcItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SrcLocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SrcLotNo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SrcPlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SrcStockDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SrcTranQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SrcTranRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SrcUommasterId)
                    .HasColumnName("SrcUOMMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SrcWareHouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<NarrationMaster>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK__NarrationMaster__267ABA7A");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NarrationMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NotificationDetails>(entity =>
            {
                entity.HasKey(e => e.PknotifDtlsId);

                entity.HasIndex(e => new { e.PknotifDtlsId, e.NotifTitle, e.AddedBy, e.AddedDt, e.IsDeleted, e.DisplayFromDate, e.DisplayToDate })
                    .HasName("IX_Notif_Dash");

                entity.Property(e => e.PknotifDtlsId)
                    .HasColumnName("PKNotifDtlsId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.DateType)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayFromDate).HasColumnType("datetime");

                entity.Property(e => e.DisplayToDate).HasColumnType("datetime");

                entity.Property(e => e.DocNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NotifContent).HasColumnType("text");

                entity.Property(e => e.NotifText).IsUnicode(false);

                entity.Property(e => e.NotifTitle)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NotificationTypeId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NotificationType>(entity =>
            {
                entity.HasKey(e => e.PknotificationId);

                entity.Property(e => e.PknotificationId)
                    .HasColumnName("PKNotificationId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsControlled)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted).HasMaxLength(1);

                entity.Property(e => e.IsInfoDocType)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NotificationType1)
                    .HasColumnName("NotificationType")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TypeCode).HasMaxLength(35);

                entity.Property(e => e.TypeName).HasMaxLength(50);
            });

            modelBuilder.Entity<Notificationmaster>(entity =>
            {
                entity.HasKey(e => e.Notificationid)
                    .HasName("PK__notifica__4BA4C3716E3566BC");

                entity.ToTable("notificationmaster");

                entity.Property(e => e.Notificationid).HasColumnName("notificationid");

                entity.Property(e => e.Addeddt)
                    .HasColumnName("addeddt")
                    .HasColumnType("datetime");

                entity.Property(e => e.Custdeviceid)
                    .HasColumnName("custdeviceid")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Customermasterid)
                    .HasColumnName("customermasterid")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FlagC)
                    .HasColumnName("flagC")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FlagV)
                    .HasColumnName("flagV")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Notificationdesc)
                    .HasColumnName("notificationdesc")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Vendordeviceid)
                    .HasColumnName("vendordeviceid")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Vendorid)
                    .HasColumnName("vendorid")
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ObMerchantPriceList>(entity =>
            {
                entity.ToTable("obMerchantPriceList");

                entity.Property(e => e.ObMerchantPriceListId)
                    .HasColumnName("obMerchantPriceListId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CustVendorMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPrice).HasColumnType("numeric(15, 2)");

                entity.Property(e => e.ValidFrom).HasColumnType("datetime");

                entity.Property(e => e.ValidTo).HasColumnType("datetime");
            });

            modelBuilder.Entity<ObjVersion>(entity =>
            {
                entity.HasKey(e => e.ObjName);

                entity.Property(e => e.ObjName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ObjType)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ObjVersionDefData>(entity =>
            {
                entity.HasKey(e => e.ObjName)
                    .HasName("PK_ObjVersionDefData_1");

                entity.Property(e => e.ObjName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ObjType)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Obtradediscount>(entity =>
            {
                entity.ToTable("obtradediscount");

                entity.Property(e => e.ObtradediscountId)
                    .HasColumnName("obtradediscountID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CustVendorMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DisRate)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DiscrateMrp)
                    .HasColumnName("DiscrateMRP")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Discratepercent)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Freeitemid)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Freeitemqty).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Minqty).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Minvalue).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.NetRate)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Price).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TypeFixedPercent)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Validfrom)
                    .HasColumnName("validfrom")
                    .HasColumnType("datetime");

                entity.Property(e => e.Validto)
                    .HasColumnName("validto")
                    .HasColumnType("datetime");

                entity.Property(e => e.Vendoritemname)
                    .HasColumnName("vendoritemname")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OfflineOpStk>(entity =>
            {
                entity.Property(e => e.OfflineOpStkId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Location)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OpeningQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OpeningRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OpeningValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Reference)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Warehouse)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OldPassward>(entity =>
            {
                entity.HasKey(e => e.PkoldPassId);

                entity.Property(e => e.PkoldPassId)
                    .HasColumnName("PKOldPassId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.FkuserId)
                    .HasColumnName("FKUserId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.OldPassDate).HasColumnType("datetime");

                entity.Property(e => e.OldPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Omdcomment>(entity =>
            {
                entity.ToTable("OMDComment");

                entity.Property(e => e.OmdcommentId)
                    .HasColumnName("OMDCommentId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Addedby)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Addeddt).HasColumnType("datetime");

                entity.Property(e => e.Comment).IsUnicode(false);

                entity.Property(e => e.CommentType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SoScheduleId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OpeningStock>(entity =>
            {
                entity.Property(e => e.OpeningStockId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ExpDt).HasColumnType("datetime");

                entity.Property(e => e.FinYearId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LocationStat)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Mrp)
                    .HasColumnName("MRP")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OpQty).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OpRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OpValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Reason)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RecDt).HasColumnType("datetime");

                entity.Property(e => e.Ref)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SopQty)
                    .HasColumnName("SOpQty")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SopRate)
                    .HasColumnName("SOpRate")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SopVal)
                    .HasColumnName("SOpVal")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Tp)
                    .HasColumnName("TP")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OperationMaster>(entity =>
            {
                entity.Property(e => e.OperationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.DfltLocationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DownwardTol).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NxtLocationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.OffsetDays).HasColumnType("numeric(4, 0)");

                entity.Property(e => e.OperCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OperType)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Operation)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.QtyCheck)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ReportingReq)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.StdWtVar).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UpwardTol).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<OperationWiplocation>(entity =>
            {
                entity.HasKey(e => new { e.OperationMasterId, e.PlantMasterId });

                entity.ToTable("OperationWIPLocation");

                entity.Property(e => e.OperationMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.WiplocationMasterId)
                    .HasColumnName("WIPLocationMasterId")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrderExecutionDetails>(entity =>
            {
                entity.HasKey(e => e.OrderExecutionId);

                entity.Property(e => e.OrderExecutionId)
                    .HasColumnName("OrderExecutionID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DueDt).HasColumnType("datetime");

                entity.Property(e => e.ExecutionDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Responsible)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SoheaderId)
                    .HasColumnName("SOHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<OrderTypeWiseBankAmount>(entity =>
            {
                entity.HasKey(e => e.PkBankCollectionId)
                    .HasName("PK__OrderTyp__E63EA9A4FB539B0C");

                entity.Property(e => e.PkBankCollectionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Addeddt).HasColumnType("datetime");

                entity.Property(e => e.BankMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CashAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.OrderTypeMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrderTypeWiseClassification>(entity =>
            {
                entity.HasKey(e => e.PkOrderTypeClassId);

                entity.Property(e => e.PkOrderTypeClassId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ItemClassificationId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OrderTypeId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OrderTypeWisePrintingParameter>(entity =>
            {
                entity.HasKey(e => e.OrderTypeWisePrintId);

                entity.Property(e => e.OrderTypeWisePrintId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ClassName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dllname)
                    .HasColumnName("DLLName")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EffectiveFrom).HasColumnType("date");

                entity.Property(e => e.EffectiveTo).HasColumnType("date");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MethodName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OrderTypeMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Reporttype)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutsideUsers>(entity =>
            {
                entity.HasKey(e => e.OutsideUserId);

                entity.Property(e => e.OutsideUserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CompanyName).IsUnicode(false);

                entity.Property(e => e.ContactNo).IsUnicode(false);

                entity.Property(e => e.EmailId).IsUnicode(false);

                entity.Property(e => e.IsMomhead)
                    .HasColumnName("IsMOMHead")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Momid)
                    .HasColumnName("MOMId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.OutsideUserName).IsUnicode(false);

                entity.Property(e => e.PartAvailable)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks).IsUnicode(false);
            });

            modelBuilder.Entity<OutwDocReg>(entity =>
            {
                entity.HasKey(e => e.DocRegId)
                    .HasName("PK__OutwDocR__07543B942B161DBC");

                entity.Property(e => e.DocRegId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CarrierId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DelieveredDt).HasColumnType("datetime");

                entity.Property(e => e.DeliveryMode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchedDt).HasColumnType("datetime");

                entity.Property(e => e.DocCategory).IsUnicode(false);

                entity.Property(e => e.DocCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExpDeliveryDt).HasColumnType("datetime");

                entity.Property(e => e.ExpReturningDt).HasColumnType("datetime");

                entity.Property(e => e.From)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsPodreq).HasColumnName("IsPODReq");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Priority)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RetMaterialName).IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.To)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutwordGpdetail>(entity =>
            {
                entity.ToTable("OutwordGPDetail");

                entity.Property(e => e.OutwordGpdetailId)
                    .HasColumnName("OutwordGPDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LotNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModetailId)
                    .HasColumnName("MODetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NoOfBoxes).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Ogpqty)
                    .HasColumnName("OGPQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OutWordGpheaderId)
                    .HasColumnName("OutWordGPHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PartyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReqOgpqty)
                    .HasColumnName("ReqOGPQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ReturnQty)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OutwordGpheader>(entity =>
            {
                entity.ToTable("OutwordGPHeader");

                entity.Property(e => e.OutWordGpheaderId)
                    .HasColumnName("OutWordGPHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AnnexNo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.AuthorisedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CheckedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeptMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.GatePassDate).HasColumnType("datetime");

                entity.Property(e => e.GatePassNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Lrno)
                    .HasColumnName("LRNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NameTrans)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OgptypeId)
                    .HasColumnName("OGPTypeId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PartyId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PartyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PoheaderId)
                    .HasColumnName("POHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PreparedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Reason)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TotalBoxes).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalQty).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TransMode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.VehicleNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PackageTask>(entity =>
            {
                entity.HasKey(e => e.FunctionId);

                entity.Property(e => e.FunctionId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FunctionDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ParentFunctionId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TechnicalName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<PacketMaster>(entity =>
            {
                entity.HasIndex(e => new { e.PlantMasterId, e.PacketNo })
                    .HasName("UK_PacketNo")
                    .IsUnique();

                entity.Property(e => e.PacketMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BalQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.MovedQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PacketNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketSrNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RecType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecvdQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RefRecId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockDetailsId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PairMaster>(entity =>
            {
                entity.HasKey(e => e.PairCode);

                entity.Property(e => e.PairCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PairDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PanelField>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK__PanelField__674A37FD");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.AllowChange)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultValue)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FieldDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FieldName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsHidden)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsMandatory)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsVisible)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PanelFieldId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PanelMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UsrCtrlMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PanelMaster>(entity =>
            {
                entity.Property(e => e.PanelMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.FormId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PanTitle)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PanelId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SeqNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TagTitle)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ParameterGroupMaster>(entity =>
            {
                entity.HasKey(e => e.ParameterGroupId);

                entity.Property(e => e.ParameterGroupId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.GroupDesc)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GroupType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<PartnerUserHistory>(entity =>
            {
                entity.HasKey(e => e.PkuserHstryId)
                    .HasName("PK_PUserHistory");

                entity.Property(e => e.PkuserHstryId)
                    .HasColumnName("PKUserHstryId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeptMasterId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DesignationId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Dob)
                    .HasColumnName("DOB")
                    .HasColumnType("datetime");

                entity.Property(e => e.Doj)
                    .HasColumnName("DOJ")
                    .HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmpId)
                    .HasColumnName("EmpID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ExtNo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FailedLoginAttempt).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkuserMasterId)
                    .HasColumnName("FKUserMasterId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsCompleteRight)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsReportingUsingExcel)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsuprofileExpire)
                    .HasColumnName("ISUProfileExpire")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LastLoginDt).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LocationId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PswModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ReportingTo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UprofileExpDate)
                    .HasColumnName("UProfileExpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PartnerUserMaster>(entity =>
            {
                entity.HasKey(e => e.UserMasterId)
                    .HasName("PK_PUserMaster");

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActvDactvDt).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Answer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Crmcategory)
                    .HasColumnName("CRMCategory")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Crmcode)
                    .HasColumnName("CRMCode")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CrmnoofDays).HasColumnName("CRMNoofDays");

                entity.Property(e => e.DeptMasterId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DesignationId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Dob)
                    .HasColumnName("DOB")
                    .HasColumnType("datetime");

                entity.Property(e => e.Doj)
                    .HasColumnName("DOJ")
                    .HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmpId)
                    .HasColumnName("EmpID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EntityId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ExtNo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FailedLoginAttempt).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HintQuestion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsCompleteRight)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsManager)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsReportingUsingExcel)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsuprofileExpire)
                    .HasColumnName("ISUProfileExpire")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LastLoginDt).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LocationId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PswModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ReportingTo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UprofileExpDate)
                    .HasColumnName("UProfileExpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserLoginId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserPassword)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PartnerUserOldPassward>(entity =>
            {
                entity.HasKey(e => e.PkoldPassId)
                    .HasName("PK_PUOldPassward");

                entity.Property(e => e.PkoldPassId)
                    .HasColumnName("PKOldPassId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.FkuserId)
                    .HasColumnName("FKUserId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OldPassDate).HasColumnType("datetime");

                entity.Property(e => e.OldPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PartnerUserPhotos>(entity =>
            {
                entity.HasKey(e => e.PkphotoId)
                    .HasName("PK_PUserPhotos");

                entity.Property(e => e.PkphotoId)
                    .HasColumnName("PKPhotoId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FkuserId)
                    .HasColumnName("FKUserId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FtpuserPath)
                    .HasColumnName("FTPUserPath")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PaymentBatchDetails>(entity =>
            {
                entity.HasKey(e => e.BatchDetailId)
                    .HasName("PK__PaymentB__B851B70CDA04958B");

                entity.Property(e => e.BatchDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Amount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BalanceAmt)
                    .HasColumnName("BalanceAMT")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BatchHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.TransHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TransNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransSettlementLinesId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.VendorId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.VendorName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PaymentBatchHeader>(entity =>
            {
                entity.HasKey(e => e.BatchHeaderId)
                    .HasName("PK__PaymentB__A416368D5EF0D339");

                entity.Property(e => e.BatchHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Amount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BatchStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Createdby)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Remark).IsUnicode(false);
            });

            modelBuilder.Entity<PaymentSchedule>(entity =>
            {
                entity.Property(e => e.PaymentScheduleId)
                    .HasColumnName("PaymentScheduleID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Amount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BankName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.BankSlipDate).HasColumnType("datetime");

                entity.Property(e => e.BankSlipNo).HasMaxLength(100);

                entity.Property(e => e.Branch)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ChequeDate).HasColumnType("datetime");

                entity.Property(e => e.ChequeNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ClearanceDate).HasColumnType("datetime");

                entity.Property(e => e.IsClear).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Micr)
                    .HasColumnName("MICR")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SoheaderId)
                    .HasColumnName("SOHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PaymentTerms>(entity =>
            {
                entity.Property(e => e.PaymentTermsId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AdvisingBank)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BankAddress)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IssuingBank)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PaymentDueDate)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentDueDt).HasColumnType("datetime");

                entity.Property(e => e.PaymentTerms1)
                    .HasColumnName("PaymentTerms")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SoheaderId)
                    .HasColumnName("SOHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<PccardDetail>(entity =>
            {
                entity.ToTable("PCCardDetail");

                entity.Property(e => e.PccardDetailId)
                    .HasColumnName("PCCardDetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.MachineMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MoroutingId)
                    .HasColumnName("MORoutingId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MoveToSegregation)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.OperationId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PccardMasterId)
                    .HasColumnName("PCCardMasterId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProdQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RejQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ReworkQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TransferQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.WiplocationMasterId)
                    .HasColumnName("WIPLocationMasterId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Wt1)
                    .HasColumnName("WT1")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Wt2)
                    .HasColumnName("WT2")
                    .HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<PccardMaster>(entity =>
            {
                entity.ToTable("PCCardMaster");

                entity.Property(e => e.PccardMasterId)
                    .HasColumnName("PCCardMasterId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CurrentMoroutingId)
                    .HasColumnName("CurrentMORoutingId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentOperationId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentPccardQty)
                    .HasColumnName("CurrentPCCardQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.CurrentWipitemId)
                    .HasColumnName("CurrentWIPItemId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentWiplocationId)
                    .HasColumnName("CurrentWIPLocationId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MoheaderId)
                    .HasColumnName("MOHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PccardNo)
                    .HasColumnName("PCCardNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PccardQty)
                    .HasColumnName("PCCardQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PcsrNo)
                    .HasColumnName("PCSrNo")
                    .IsUnicode(false);

                entity.Property(e => e.Pctype)
                    .HasColumnName("PCType")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProdQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RecType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Segregation)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TinShedStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Pctrans>(entity =>
            {
                entity.ToTable("PCTrans");

                entity.Property(e => e.PctransId)
                    .HasColumnName("PCTransId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.MoheaderId)
                    .HasColumnName("MOHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PccardMasterId)
                    .HasColumnName("PCCardMasterId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PctransHistory>(entity =>
            {
                entity.ToTable("PCTransHistory");

                entity.Property(e => e.PctransHistoryId)
                    .HasColumnName("PCTransHistoryId")
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OperationId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PcmasterId)
                    .HasColumnName("PCMasterId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Segregation)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TransDt).HasColumnType("datetime");

                entity.Property(e => e.WipitemId)
                    .HasColumnName("WIPItemId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.WiplocationId)
                    .HasColumnName("WIPLocationId")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PendingStk>(entity =>
            {
                entity.HasKey(e => e.StockDetailsId);

                entity.Property(e => e.StockDetailsId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.UnPostedQty).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<PeriodMaster>(entity =>
            {
                entity.HasIndex(e => e.RecId)
                    .HasName("UQ__PeriodMaster__28F7FFC9")
                    .IsUnique();

                entity.Property(e => e.PeriodMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ComparisonPeriod)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DisplaySeq)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FymasterId)
                    .IsRequired()
                    .HasColumnName("FYMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PeriodCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodLength)
                    .HasColumnType("numeric(5, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Predate)
                    .HasColumnName("PREDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Prsdate)
                    .HasColumnName("PRSDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Prtype)
                    .IsRequired()
                    .HasColumnName("PRType")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonalDocumentMaster>(entity =>
            {
                entity.Property(e => e.PersonalDocumentMasterId)
                    .HasColumnName("PersonalDocumentMasterID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.DocCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DocTitle)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<PfepHistoryMaster>(entity =>
            {
                entity.Property(e => e.PfepHistoryMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AlternatPartNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContainerWeight).HasMaxLength(10);

                entity.Property(e => e.DlocMaxQty).HasMaxLength(10);

                entity.Property(e => e.DlocMinQty).HasMaxLength(10);

                entity.Property(e => e.DlocStackHeight).HasMaxLength(10);

                entity.Property(e => e.DlockRackNo).HasMaxLength(50);

                entity.Property(e => e.FollowScedulerCode).HasMaxLength(50);

                entity.Property(e => e.FuturePartNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Incoterms)
                    .HasColumnName("INCOTERMS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsLive)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.KitSeqLocation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KlocMaxQty).HasMaxLength(10);

                entity.Property(e => e.KlocMinQty).HasMaxLength(10);

                entity.Property(e => e.LineLocationNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LineSide)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModeOfShipment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NoOfUlock)
                    .HasColumnName("NoOfULock")
                    .HasMaxLength(10);

                entity.Property(e => e.PackagingType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PartCategory)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PartDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PartHeight).HasMaxLength(10);

                entity.Property(e => e.PartImage).HasColumnType("image");

                entity.Property(e => e.PartLength).HasMaxLength(10);

                entity.Property(e => e.PartNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PartWidth).HasMaxLength(10);

                entity.Property(e => e.PfepMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PrimHeight).HasMaxLength(10);

                entity.Property(e => e.PrimLength).HasMaxLength(10);

                entity.Property(e => e.PrimQty).HasMaxLength(10);

                entity.Property(e => e.PrimWidth).HasMaxLength(10);

                entity.Property(e => e.PrimaryContainerType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PullMethod)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasMaxLength(10);

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SchedulePakQty).HasMaxLength(10);

                entity.Property(e => e.SecContainerHeight).HasMaxLength(10);

                entity.Property(e => e.SecContainerLength).HasMaxLength(10);

                entity.Property(e => e.SecContainerQty).HasMaxLength(10);

                entity.Property(e => e.SecContainerWeigth)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SecContainerWidth).HasMaxLength(10);

                entity.Property(e => e.SecH).HasMaxLength(10);

                entity.Property(e => e.SecL).HasMaxLength(10);

                entity.Property(e => e.SecW).HasMaxLength(10);

                entity.Property(e => e.SecondaryContainerType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SecondaryLocation).HasMaxLength(50);

                entity.Property(e => e.ShopLine)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Spq)
                    .HasColumnName("SPQ")
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SupplyStrategyToBin).HasMaxLength(50);

                entity.Property(e => e.SupplyStrategyToSeq).HasMaxLength(50);

                entity.Property(e => e.TransitLeadTime).HasMaxLength(10);

                entity.Property(e => e.UlocLocationNumber).HasMaxLength(20);

                entity.Property(e => e.UlocMaxQty).HasMaxLength(10);

                entity.Property(e => e.UlocMinQty).HasMaxLength(10);

                entity.Property(e => e.UlocstackHeight).HasMaxLength(10);

                entity.Property(e => e.UnloadingDockNo).HasMaxLength(50);

                entity.Property(e => e.Usage).HasMaxLength(50);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WeightOfParts).HasMaxLength(50);
            });

            modelBuilder.Entity<PfepMaster>(entity =>
            {
                entity.Property(e => e.PfepMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AlternatPartNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContainerWeight).HasMaxLength(10);

                entity.Property(e => e.DlocMaxQty).HasMaxLength(10);

                entity.Property(e => e.DlocMinQty).HasMaxLength(10);

                entity.Property(e => e.DlocStackHeight).HasMaxLength(10);

                entity.Property(e => e.DlockRackNo).HasMaxLength(50);

                entity.Property(e => e.FollowScedulerCode).HasMaxLength(50);

                entity.Property(e => e.FuturePartNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Incoterms)
                    .HasColumnName("INCOTERMS")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsLive)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.KitSeqLocation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KlocMaxQty).HasMaxLength(10);

                entity.Property(e => e.KlocMinQty).HasMaxLength(10);

                entity.Property(e => e.LineLocationNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LineSide)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModeOfShipment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NoOfUlock)
                    .HasColumnName("NoOfULock")
                    .HasMaxLength(10);

                entity.Property(e => e.PackagingType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PartCategory)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PartDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PartHeight).HasMaxLength(10);

                entity.Property(e => e.PartImage).HasColumnType("image");

                entity.Property(e => e.PartLength).HasMaxLength(10);

                entity.Property(e => e.PartNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PartWidth).HasMaxLength(10);

                entity.Property(e => e.PrimHeight).HasMaxLength(10);

                entity.Property(e => e.PrimLength).HasMaxLength(10);

                entity.Property(e => e.PrimQty).HasMaxLength(10);

                entity.Property(e => e.PrimWidth).HasMaxLength(10);

                entity.Property(e => e.PrimaryContainerType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PullMethod)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasMaxLength(10);

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SchedulePakQty).HasMaxLength(10);

                entity.Property(e => e.SecContainerHeight).HasMaxLength(10);

                entity.Property(e => e.SecContainerLength).HasMaxLength(10);

                entity.Property(e => e.SecContainerQty).HasMaxLength(10);

                entity.Property(e => e.SecContainerWeigth)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SecContainerWidth).HasMaxLength(10);

                entity.Property(e => e.SecH).HasMaxLength(10);

                entity.Property(e => e.SecL).HasMaxLength(10);

                entity.Property(e => e.SecW).HasMaxLength(10);

                entity.Property(e => e.SecondaryContainerType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SecondaryLocation).HasMaxLength(50);

                entity.Property(e => e.ShopLine)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Spq)
                    .HasColumnName("SPQ")
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SupplyStrategyToBin).HasMaxLength(50);

                entity.Property(e => e.SupplyStrategyToSeq).HasMaxLength(50);

                entity.Property(e => e.TransitLeadTime).HasMaxLength(10);

                entity.Property(e => e.UlocLocationNumber).HasMaxLength(20);

                entity.Property(e => e.UlocMaxQty).HasMaxLength(10);

                entity.Property(e => e.UlocMinQty).HasMaxLength(10);

                entity.Property(e => e.UlocstackHeight).HasMaxLength(10);

                entity.Property(e => e.UnloadingDockNo).HasMaxLength(50);

                entity.Property(e => e.Usage).HasMaxLength(50);

                entity.Property(e => e.VendorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WeightOfParts).HasMaxLength(50);
            });

            modelBuilder.Entity<PhotAlbum>(entity =>
            {
                entity.HasKey(e => e.PhotoId);

                entity.Property(e => e.PhotoId)
                    .HasColumnName("PhotoID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AlbumId).HasColumnName("AlbumID");

                entity.Property(e => e.OriginalPath).HasMaxLength(500);

                entity.Property(e => e.Photo).HasMaxLength(500);

                entity.Property(e => e.PhotoName).HasMaxLength(500);

                entity.HasOne(d => d.Album)
                    .WithMany(p => p.PhotAlbum)
                    .HasForeignKey(d => d.AlbumId)
                    .HasConstraintName("FK_PhotAlbum_Album");
            });

            modelBuilder.Entity<PickListBuffer>(entity =>
            {
                entity.HasKey(e => e.PacketMasterId);

                entity.Property(e => e.PacketMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.DeviceId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PickListId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PickListType)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PickQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PickedLot>(entity =>
            {
                entity.Property(e => e.PickedLotId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PickedQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PicklistDtl)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockDetailsId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<PickedPacket>(entity =>
            {
                entity.Property(e => e.PickedPacketId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PacketMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PacketSrNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PickPacketQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PickedLotId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<PicklistDtl>(entity =>
            {
                entity.HasIndex(e => new { e.PicklistHdrId, e.SoScheduleId })
                    .HasName("IDX_PickList_SOS");

                entity.Property(e => e.PicklistDtlId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MrsdetailId)
                    .HasColumnName("MRSDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NoofHu)
                    .HasColumnName("NoofHU")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.PickListType)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PicklistHdrId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.QtyPicked).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.QtyToPick).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SoScheduleId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<PicklistHdr>(entity =>
            {
                entity.Property(e => e.PicklistHdrId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MtrlHandlerId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PicklistDt).HasColumnType("datetime");

                entity.Property(e => e.PicklistNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PicklistStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<PicklistLot>(entity =>
            {
                entity.Property(e => e.PicklistLotId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.PickQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PicklistDtlId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockDtlId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Pihdr>(entity =>
            {
                entity.ToTable("PIHdr");

                entity.Property(e => e.PihdrId)
                    .HasColumnName("PIHdrId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.FromDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ToDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(9, 0)");
            });

            modelBuilder.Entity<PktOpStkDetail>(entity =>
            {
                entity.Property(e => e.PktOpStkDetailId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PacketSrNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PktOpStkHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PktOpStkHeader>(entity =>
            {
                entity.Property(e => e.PktOpStkHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NoOfPacket).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PacketDt).HasColumnType("datetime");

                entity.Property(e => e.PktOpStkNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StockDetailsId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PlantMaster>(entity =>
            {
                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.AdvancePaymentApproval)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ApplicationThemeColor)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.AssetApproval)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Bankmasterid)
                    .HasColumnName("bankmasterid")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Bstno)
                    .HasColumnName("BSTNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimApproval)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ContactNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Cstno)
                    .HasColumnName("CSTNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DiscApproval)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExciseApplicable)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('No ')");

                entity.Property(e => e.ExciseNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ExtraWorkApproval)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Gstcode)
                    .HasColumnName("GSTCode")
                    .HasMaxLength(50);

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LeaveApproval)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LeaveCancellation)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LeftPanelBackColor)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Phone)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlantName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PrefixText)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rrfapproval)
                    .HasColumnName("RRFApproval")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Soshortclsappr)
                    .HasColumnName("SOSHORTCLSAppr")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SpotApproval)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StateMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tin)
                    .HasColumnName("TIN")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasColumnName("URL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarrantyApproval)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<PlantWareHouseMaster>(entity =>
            {
                entity.Property(e => e.PlantWareHouseMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Modifiedy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlantId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PochargeTaxLine>(entity =>
            {
                entity.ToTable("POChargeTaxLine");

                entity.Property(e => e.PochargeTaxLineId)
                    .HasColumnName("POChargeTaxLineId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BaseAmntPercForTaxCalc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BaseAmount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MinAmntAllowedForTaxCalc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OppositeInvoicedGl)
                    .HasColumnName("OppositeInvoicedGL")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PayableAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PochargeDetailId)
                    .HasColumnName("POChargeDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivableAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SeqNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxCalcId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxPc)
                    .HasColumnName("TaxPC")
                    .HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<Podetail>(entity =>
            {
                entity.ToTable("PODetail");

                entity.Property(e => e.PodetailId)
                    .HasColumnName("PODetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DiscPc)
                    .HasColumnName("DiscPC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.DiscnRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.DiscntAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ExtDesc1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExtDesc2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FlineAmt)
                    .HasColumnName("FLineAmt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FlineCharges)
                    .HasColumnName("FLineCharges")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FlineTaxes)
                    .HasColumnName("FLineTaxes")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FlineTotal)
                    .HasColumnName("FLineTotal")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Frate)
                    .HasColumnName("FRate")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.IndentDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsfixedDiscnt).HasColumnName("ISFixedDiscnt");

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LabourChargeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LineAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineCharges).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineFreightCharges).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineInsuranceBankingCharges).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LinePackagingCharges).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LinePackingCharges).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LinePocharges)
                    .HasColumnName("LinePOCharges")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineTaxes).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineTotal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NoCartShipper)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PoheaderId)
                    .HasColumnName("POHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PolineStatus)
                    .HasColumnName("POLineStatus")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Porate)
                    .HasColumnName("PORate")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.QtyReceived).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.ReqDt).HasColumnType("datetime");

                entity.Property(e => e.SorefId)
                    .HasColumnName("SORefId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SrNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxClassMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.VendorContractHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PodetailTaxLine>(entity =>
            {
                entity.ToTable("PODetailTaxLine");

                entity.Property(e => e.PodetailTaxLineId)
                    .HasColumnName("PODetailTaxLineId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BaseAmntPercForTaxCalc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BaseAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BaseAmountType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LineNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MinAmntAllowedForTaxCalc)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OppositeInvoicedGl)
                    .HasColumnName("OppositeInvoicedGL")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PayableAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PodetailId)
                    .HasColumnName("PODetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivableAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Recoverable).HasDefaultValueSql("((0))");

                entity.Property(e => e.SeqNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxCalcId)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TaxMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxPc)
                    .HasColumnName("TaxPC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Poheader>(entity =>
            {
                entity.ToTable("POHeader");

                entity.HasIndex(e => e.Pono)
                    .HasName("POIDX");

                entity.Property(e => e.PoheaderId)
                    .HasColumnName("POHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.AdvancePaymentAmount).HasColumnType("numeric(20, 0)");

                entity.Property(e => e.AdvancePaymentReason).IsUnicode(false);

                entity.Property(e => e.ApprovalDt).HasColumnType("datetime");

                entity.Property(e => e.Awbno)
                    .HasColumnName("AWBNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BillToId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CapexFormId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Cenvatno)
                    .HasColumnName("CENVATNO")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ChrgGlidFreight)
                    .HasColumnName("ChrgGLIdFreight")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ChrgGlidInsBnk)
                    .HasColumnName("ChrgGLIdInsBnk")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ChrgGlidOther)
                    .HasColumnName("ChrgGLIdOther")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ChrgGlidPack)
                    .HasColumnName("ChrgGLIdPack")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ConsigneeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Ct3no)
                    .HasColumnName("CT3No")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Ct3pc)
                    .HasColumnName("CT3PC")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CurrencyMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DeliverTermsId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DeptMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Destination)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DiscAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.EssDoc)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ExchRate).HasColumnType("numeric(30, 0)");

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Forwarder)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Fpoamt)
                    .HasColumnName("FPOAmt")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Fpocharges)
                    .HasColumnName("FPOCharges")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FpotaxAmt)
                    .HasColumnName("FPOTaxAmt")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FpototalAmt)
                    .HasColumnName("FPOTotalAmt")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FreightCharges).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ImportExport)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InsuBankCharges).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.InsuranceBankingCharges).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.InsuranceCompany)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InsuranceDtl)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemClassificationId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MethodOfPackaging)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModeOfTransport)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OrderTypeMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PackagingCharges).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PackingCharges).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PayTermId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Pcno)
                    .HasColumnName("PCNo")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PoType).IsUnicode(false);

                entity.Property(e => e.Poamt)
                    .HasColumnName("POAmt")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Pocharges)
                    .HasColumnName("POCharges")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Podt)
                    .HasColumnName("PODt")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pono)
                    .HasColumnName("PONo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Postatus)
                    .HasColumnName("POStatus")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PotaxAmt)
                    .HasColumnName("POTaxAmt")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PototalAmt)
                    .HasColumnName("POTotalAmt")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PriceTermsId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Protype)
                    .HasColumnName("PROType")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Ref)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RevisionNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RouteFrom)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RouteTo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SegmentType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ShortCloseDt).HasColumnType("datetime");

                entity.Property(e => e.SpecialCondition)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Transporter)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransporterAddress)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarrantyTerms)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Poschedule>(entity =>
            {
                entity.ToTable("POSchedule");

                entity.Property(e => e.PoscheduleId)
                    .HasColumnName("POScheduleId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Comments)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FirstRecDate).HasColumnType("datetime");

                entity.Property(e => e.IndentScheduleId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LastRecDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NoOfRec).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PodetailId)
                    .HasColumnName("PODetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PoscheduleStatus)
                    .HasColumnName("POScheduleStatus")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PromisedDate).HasColumnType("datetime");

                entity.Property(e => e.RecQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RejectedQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ScheduleDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<PriceListClassificationMaster>(entity =>
            {
                entity.HasKey(e => e.PriceListClassificationId);

                entity.Property(e => e.PriceListClassificationId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ClassificationCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClassificationDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<Priority>(entity =>
            {
                entity.HasIndex(e => new { e.PriorityName, e.Colour, e.PriorityIndex, e.PriorityId })
                    .HasName("PriorityId");

                entity.Property(e => e.PriorityId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Colour)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PriorityIndex).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.PriorityName)
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PrjAppMaster>(entity =>
            {
                entity.HasKey(e => e.PkprjAppId);

                entity.Property(e => e.PkprjAppId)
                    .HasColumnName("PKPrjAppId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AppId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PrjCashFlowSummary>(entity =>
            {
                entity.HasKey(e => e.PrjCashFlowSummId);

                entity.Property(e => e.PrjCashFlowSummId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CumulativeTot).HasColumnType("numeric(19, 4)");

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DispSeq).HasColumnType("numeric(19, 4)");

                entity.Property(e => e.Entity)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EntityCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PayableAmt).HasColumnType("numeric(19, 4)");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.ReceivableAmt).HasColumnType("numeric(19, 4)");

                entity.Property(e => e.Ref)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.WeekEndDate).HasColumnType("datetime");

                entity.Property(e => e.WeekNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PrjDatasheetMaster>(entity =>
            {
                entity.HasKey(e => e.PkprjDatasheetId);

                entity.Property(e => e.PkprjDatasheetId)
                    .HasColumnName("PKPrjDatasheetId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.DatasheetId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PrjEmp>(entity =>
            {
                entity.ToTable("Prj_Emp");

                entity.HasIndex(e => new { e.EmployeeId, e.ProjectId, e.PrjRoleId })
                    .HasName("[EmployeeId");

                entity.Property(e => e.PrjEmpId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsPrimeController)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Isdeleted)
                    .HasColumnName("isdeleted")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PrjRoleId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PrjTech>(entity =>
            {
                entity.ToTable("Prj_Tech");

                entity.Property(e => e.PrjTechId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TechId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProActionInfo>(entity =>
            {
                entity.HasKey(e => e.ActionId);

                entity.Property(e => e.ActionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Action).IsUnicode(false);

                entity.Property(e => e.Points)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProRatingInfo>(entity =>
            {
                entity.HasKey(e => e.ProRatingId);

                entity.Property(e => e.ProRatingId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityTrailEnteredPoints)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimEnteredPoints)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimEnteredWithin1DayPoints)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClaimEnteredWithin3DaysPoints)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DailyTimesheetPoints)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.LeaveAppliedPoints)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LeaveApprovedRejectedPoints)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MeetingInvitationAcceptedPoints)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MeetingInvitedPoints)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MompreparedPoints)
                    .HasColumnName("MOMPreparedPoints")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TimesheetEnteredPoints)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalPoints)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProblemCategoryMaster>(entity =>
            {
                entity.HasKey(e => e.PkproblemCategoryMaster);

                entity.Property(e => e.PkproblemCategoryMaster)
                    .HasColumnName("PKProblemCategoryMaster")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CalcEfforts)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.FromTime)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsHoliday)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsHrs)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsWeeklyOff)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Priority).HasMaxLength(50);

                entity.Property(e => e.ResolutionTime)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ResolutionTimeDays)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ToTime)
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProdBackFlushLot>(entity =>
            {
                entity.HasKey(e => e.ProdBackFlushId)
                    .HasName("PK__ProdBack__1731DC73503E021F");

                entity.Property(e => e.ProdBackFlushId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BatchQty).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModetailId)
                    .HasColumnName("MODetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProductionDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.StockDetailsId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TotalBackFlushQty).HasColumnType("numeric(10, 2)");
            });

            modelBuilder.Entity<ProdDownTimeDetail>(entity =>
            {
                entity.Property(e => e.ProdDownTimeDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.DownTime).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DwnTimeFrom).HasColumnType("datetime");

                entity.Property(e => e.DwnTimeTo).HasColumnType("datetime");

                entity.Property(e => e.MachineMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.McnDwnRsnMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProdEntryId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProdOprtrDetail>(entity =>
            {
                entity.Property(e => e.ProdOprtrDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.EmployeeMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProdEntryId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Prodetail>(entity =>
            {
                entity.ToTable("PRODetail");

                entity.Property(e => e.ProdetailId)
                    .HasColumnName("PRODetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DiscPc)
                    .HasColumnName("DiscPC")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ExtDesc1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExtDesc2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FlineAmt)
                    .HasColumnName("FLineAmt")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FlineCharges)
                    .HasColumnName("FLineCharges")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FlineTaxes)
                    .HasColumnName("FLineTaxes")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FlineTotal)
                    .HasColumnName("FLineTotal")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Frate)
                    .HasColumnName("FRate")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IndentDetailId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineAmt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.LineCharges).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.LineTaxes).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.LineTotal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProheaderId)
                    .HasColumnName("PROHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QtyRec).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Rate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ReqDt).HasColumnType("datetime");

                entity.Property(e => e.ReqNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SrNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TaxClassMasterId).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ProdetailTaxLine>(entity =>
            {
                entity.ToTable("PRODetailTaxLine");

                entity.Property(e => e.ProdetailTaxLineId)
                    .HasColumnName("PRODetailTaxLineId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BaseAmountType)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LineNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProdetailId)
                    .HasColumnName("PRODetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SeqNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TaxMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxPc)
                    .HasColumnName("TaxPC")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ProductionDetail>(entity =>
            {
                entity.Property(e => e.ProductionDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EnterBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ExcessConsItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ExcessConsQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Fifodt)
                    .HasColumnName("FIFODt")
                    .HasColumnType("datetime");

                entity.Property(e => e.FirstQltExcess).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FirstQltExcessQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LotNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MoheaderId)
                    .HasColumnName("MOHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Moqty)
                    .HasColumnName("MOQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NextStageQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ProdQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ProductionHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonBalQty)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RecType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RejQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RouteFrom)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RouteTo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ScrapItemId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ScrapQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SecondItemQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SegmentType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SemifinishedId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShiftMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProductionHeader>(entity =>
            {
                entity.Property(e => e.ProductionHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EnterBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ProdDt).HasColumnType("datetime");

                entity.Property(e => e.ProdNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShiftId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Proheader>(entity =>
            {
                entity.ToTable("PROHeader");

                entity.Property(e => e.ProheaderId)
                    .HasColumnName("PROHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Awbno)
                    .HasColumnName("AWBNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BasicAmnt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BillToId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ConsigneeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CurrencyMasterId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryTermsId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Destination)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Forwarder)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InsuranceCompany)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OtherCharges).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PaymentTermsId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Prodt)
                    .HasColumnName("PRODt")
                    .HasColumnType("datetime");

                entity.Property(e => e.Prono)
                    .IsRequired()
                    .HasColumnName("PRONo")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RefNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SubContractorId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxAmnt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalAmnt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Transporter)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransporterAddress)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ProinputItemDetail>(entity =>
            {
                entity.ToTable("PROInputItemDetail");

                entity.Property(e => e.ProinputItemDetailId)
                    .HasColumnName("PROInputItemDetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PoheaderId)
                    .HasColumnName("POHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProoutputItemDetailId)
                    .HasColumnName("PROOutputItemDetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.QtyReceived).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Rate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProjCashFlow>(entity =>
            {
                entity.Property(e => e.ProjCashFlowId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Amount).HasColumnType("numeric(19, 4)");

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Entity)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EntityCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PayableAmt).HasColumnType("numeric(19, 4)");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.ReceivableAmt).HasColumnType("numeric(19, 4)");

                entity.Property(e => e.Ref)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Responsible)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransDate).HasColumnType("datetime");

                entity.Property(e => e.WeekNo).HasColumnType("numeric(19, 4)");

                entity.Property(e => e.WeekOfYear)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProjIncoExp>(entity =>
            {
                entity.Property(e => e.ProjIncoExpId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Amount)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Entity)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Ref)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Source)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransDate).HasColumnType("datetime");

                entity.Property(e => e.UserName)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProjectAllocation>(entity =>
            {
                entity.Property(e => e.ProjectAllocationId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.InvolvmentDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProjectExecutionDetail>(entity =>
            {
                entity.Property(e => e.ProjectExecutionDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(10, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MaterialId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.MaterialQty)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProjectExecutionHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(10, 0)");
            });

            modelBuilder.Entity<ProjectExecutionHeader>(entity =>
            {
                entity.Property(e => e.ProjectExecutionHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(10, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Lenght).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectActivitiesId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectExecutionDate)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SectionFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SectionTo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(10, 0)");

                entity.Property(e => e.WorkOrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProjectMaster>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.HasIndex(e => new { e.ProjectId, e.ProjectStatus })
                    .HasName("ProjectStatus");

                entity.HasIndex(e => new { e.ProjectTypeId, e.StartDate, e.EndDate, e.DueDate, e.IsDeleted, e.IsActive, e.IsActivityMandatory, e.IsDelayedActivityAllowed, e.LocationId, e.IsProjectMngr, e.MembersCanCreate, e.ShowToAllUsers, e.OnlyProjectMngrCanCreate, e.IsHoursMandatory, e.Oano, e.ClientName, e.ContactPerson, e.EmailId, e.PhoneNo, e.DateOfRequisition, e.DateOfAuthorization, e.Remarks, e.CompanyId, e.ActualStartDate, e.ActualEndDate, e.ProjectStatus, e.ProjectCode, e.ProjectName, e.ProjectId })
                    .HasName("ProjectId");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActualAmount)
                    .HasColumnType("numeric(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AllowAttachDelete)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AllowDate)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.AllowPrjChangeActivity)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AllowUserToAssign)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.AllowUsrTimeSlotHrs)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.AutoCodegen)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BudgetVariation)
                    .HasColumnType("numeric(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ClientName).HasMaxLength(100);

                entity.Property(e => e.CodeGenMethodCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CompanyId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CompletionActId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPerson).HasMaxLength(100);

                entity.Property(e => e.DateOfAuthorization).HasColumnType("datetime");

                entity.Property(e => e.DateOfRequisition).HasColumnType("datetime");

                entity.Property(e => e.DepMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EmailId).HasMaxLength(100);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.IntimateActCompletion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsActStatusUpdate)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsActivityMandatory)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsCompActPresent)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.IsDelayedActivityAllowed)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsEndTime)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.IsHoursMandatory)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsProjectMngr)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsShowuser)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.IsSystemGenerated)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemMasterId).HasMaxLength(36);

                entity.Property(e => e.LocationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ManulEntryOccurrence)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.MembersCanCreate)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Oano)
                    .HasColumnName("OANO")
                    .HasMaxLength(100);

                entity.Property(e => e.OnlyProjectMngrCanCreate)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNo).HasMaxLength(100);

                entity.Property(e => e.ProjectCode).HasMaxLength(30);

                entity.Property(e => e.ProjectName).HasColumnType("varchar(max)");

                entity.Property(e => e.ProjectTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.ShowToAllUsers)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SodetailId)
                    .HasColumnName("SODetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TypeRate)
                    .HasColumnName("Type_Rate")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TypicalAmount)
                    .HasColumnType("numeric(18, 2)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ProjectRateCard>(entity =>
            {
                entity.HasKey(e => e.ProjRateCardId)
                    .HasName("PK__ProjectR__7E6C3EAB04F074D4");

                entity.HasIndex(e => new { e.ProjRateCardId, e.ProjectTypeId, e.Rate, e.RateBasis, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.ProjectId, e.ParticipantId, e.FromDate, e.ToDate })
                    .HasName("Project_User_Date");

                entity.Property(e => e.ProjRateCardId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ParticipantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Rate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.RateBasis)
                    .HasColumnName("Rate_Basis")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ToDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ProjectRoles>(entity =>
            {
                entity.HasKey(e => e.PrjRoleId);

                entity.Property(e => e.PrjRoleId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.RoleDesc).HasMaxLength(30);
            });

            modelBuilder.Entity<ProjectStatus>(entity =>
            {
                entity.HasKey(e => e.PrjStatusId);

                entity.Property(e => e.PrjStatusId).ValueGeneratedNever();

                entity.Property(e => e.PrjStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Usefor)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProjectStatusAlias>(entity =>
            {
                entity.HasKey(e => e.PrjStatusAliasId)
                    .HasName("PK__ProjectS__48E434B8F5CDB66A");

                entity.Property(e => e.PrjStatusAliasId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PrjStatusAlias)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProjectTypeMaster>(entity =>
            {
                entity.HasKey(e => e.ProjectTypeId);

                entity.Property(e => e.ProjectTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityDesc).HasDefaultValueSql("('')");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ModuleDesc).HasDefaultValueSql("('')");

                entity.Property(e => e.ProjectTypeCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectTypeName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.UnitDesc).HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ProjectWidgetMaster>(entity =>
            {
                entity.HasKey(e => e.WidgetId);

                entity.Property(e => e.WidgetId).ValueGeneratedNever();

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PageUrl)
                    .HasColumnName("PageURL")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Sequence).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WidgetName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WidgetOfApplication)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WidgetType)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProoutputItemBom>(entity =>
            {
                entity.ToTable("PROOutputItemBOM");

                entity.Property(e => e.ProoutputItemBomid)
                    .HasColumnName("PROOutputItemBOMId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BomdetailId)
                    .HasColumnName("BOMDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProoutputItemDetailId)
                    .HasColumnName("PROOutputItemDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.QtyPer).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.QtyReqd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Rate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ScrapQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotalIssue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ProoutputItemDetail>(entity =>
            {
                entity.ToTable("PROOutputItemDetail");

                entity.Property(e => e.ProoutputItemDetailId)
                    .HasColumnName("PROOutputItemDetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FlineAmount)
                    .HasColumnName("FLineAmount")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FlineTaxes)
                    .HasColumnName("FLineTaxes")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FlineTotal)
                    .HasColumnName("FLineTotal")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemProcessId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LabourChargeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineTaxes).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineTotal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PoheaderId)
                    .HasColumnName("POHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.QtyReceived).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Rate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SoscheduleId)
                    .HasColumnName("SOScheduleId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxClassMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProoutputItemSchedule>(entity =>
            {
                entity.ToTable("PROOutputItemSchedule");

                entity.Property(e => e.ProoutputItemScheduleId)
                    .HasColumnName("PROOutputItemScheduleId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Comment)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProoutputItemDetailId)
                    .HasColumnName("PROOutputItemDetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.QtyReceived).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ScheduleDt).HasColumnType("datetime");

                entity.Property(e => e.ScheduleQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ScheduleStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PropickList>(entity =>
            {
                entity.ToTable("PROPickList");

                entity.Property(e => e.PropickListId)
                    .HasColumnName("PROPickListId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModetailId)
                    .HasColumnName("MODetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MoheaderId)
                    .HasColumnName("MOHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PickListQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PoheaderId)
                    .HasColumnName("POHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PurchaseRegisterSummary>(entity =>
            {
                entity.HasKey(e => e.PkpurchaseSumId)
                    .HasName("PK__Purchase__AF0A09E979900B58");

                entity.Property(e => e.PkpurchaseSumId)
                    .HasColumnName("PKPurchaseSumId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Addeddt).HasColumnType("datetime");

                entity.Property(e => e.Fyid)
                    .HasColumnName("FYID")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.GenericField1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InternalRefDocNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Match)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OurGstin)
                    .HasColumnName("OurGSTIN")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Pan)
                    .HasColumnName("PAN")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Projectcode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Rate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Srno)
                    .HasColumnName("SRNo")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SystemCess)
                    .HasColumnName("SystemCESS")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SystemCgst)
                    .HasColumnName("SystemCGST")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SystemIgst)
                    .HasColumnName("SystemIGST")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SystemSgst)
                    .HasColumnName("SystemSGST")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxAmt).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxableValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.VendorGstin)
                    .HasColumnName("VendorGSTIN")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VendorName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PymtSettTermMaster>(entity =>
            {
                entity.Property(e => e.PymtSettTermMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PaymentorSttl)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TermsCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TermsDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PymtSttlTerms>(entity =>
            {
                entity.Property(e => e.PymtSttlTermsId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApplyIntCalc)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.BaseDate)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ChargeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DiscRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.EffFrom).HasColumnType("datetime");

                entity.Property(e => e.EffUpto).HasColumnType("datetime");

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GracePeriod).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.IntCalcMethod)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IntPeriod).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.IntRate).HasColumnType("numeric(9, 3)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PenaltyAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PymtSettPer).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.PymtSettTermMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Qcbuffer>(entity =>
            {
                entity.HasKey(e => e.GrnpacketListId);

                entity.ToTable("QCBuffer");

                entity.Property(e => e.GrnpacketListId)
                    .HasColumnName("GRNPacketListId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.DeviceId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PacketQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PacketStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Qcdetail>(entity =>
            {
                entity.ToTable("QCDetail");

                entity.Property(e => e.QcdetailId)
                    .HasColumnName("QCDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AcceptedQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ChallonDt).HasColumnType("datetime");

                entity.Property(e => e.ChallonNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ExpiryDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GoodExpiryDate).HasColumnType("datetime");

                entity.Property(e => e.GrndetailId)
                    .HasColumnName("GRNDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Grnqty)
                    .HasColumnName("GRNQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LotNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.QcheaderId)
                    .HasColumnName("QCHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.QcreasonId)
                    .HasColumnName("QCReasonId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonOfRejection).IsUnicode(false);

                entity.Property(e => e.RejectedLoc)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.RejectedQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Qcheader>(entity =>
            {
                entity.ToTable("QCHeader");

                entity.Property(e => e.QcheaderId)
                    .HasColumnName("QCHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedById)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AuthorisedById)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Qccode)
                    .HasColumnName("QCCode")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Qcdt)
                    .HasColumnName("QCDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<QcinProcessDtl>(entity =>
            {
                entity.ToTable("QCInProcessDtl");

                entity.Property(e => e.QcinProcessDtlId)
                    .HasColumnName("QCInProcessDtlId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BasicVal).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.Bvuomid)
                    .HasColumnName("BVUOMId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Goact).HasColumnName("GOAct");

                entity.Property(e => e.Goval)
                    .HasColumnName("GOVal")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MActVal)
                    .HasColumnName("M_ActVal")
                    .HasColumnType("numeric(18, 5)");

                entity.Property(e => e.MnTolrnc).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.MnTolrncUom)
                    .HasColumnName("MnTolrncUOM")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MxTolrnc).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.MxTolrncUom)
                    .HasColumnName("MxTolrncUOM")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Nogoact).HasColumnName("NOGOAct");

                entity.Property(e => e.Nogoval)
                    .HasColumnName("NOGOVal")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OActVal)
                    .HasColumnName("O_ActVal")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ObsrvVal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Qcdesc)
                    .HasColumnName("QCDesc")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.QcinProcessHdrId)
                    .HasColumnName("QCInProcessHdrId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Qctype)
                    .HasColumnName("QCType")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RefId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SampleNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SeqNo)
                    .HasColumnName("SeqNO")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SourceId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SourceType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(9, 0)");
            });

            modelBuilder.Entity<QcinProcessHdr>(entity =>
            {
                entity.ToTable("QCInProcessHdr");

                entity.Property(e => e.QcinProcessHdrId)
                    .HasColumnName("QCInProcessHdrId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActualQcentered).HasColumnName("ActualQCEntered");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CertNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItmPlntId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MoheaderId)
                    .HasColumnName("MOHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.QcstatusId)
                    .HasColumnName("QCStatusId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RoutOperationId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Specification)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(9, 0)");
            });

            modelBuilder.Entity<QcparameterDtl>(entity =>
            {
                entity.ToTable("QCParameterDtl");

                entity.Property(e => e.QcparameterDtlId)
                    .HasColumnName("QCParameterDtlId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BasicVal).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Bvuomid)
                    .HasColumnName("BVUOMId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Fifo)
                    .HasColumnName("FIFO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Goact).HasColumnName("GOAct");

                entity.Property(e => e.Goval)
                    .HasColumnName("GOVal")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MActVal)
                    .HasColumnName("M_ActVal")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.MnTolrnc).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.MnTolrncUom)
                    .HasColumnName("MnTolrncUOM")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MxTolrnc).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.MxTolrncUom)
                    .HasColumnName("MxTolrncUOM")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Nogoact).HasColumnName("NOGOAct");

                entity.Property(e => e.Nogoval)
                    .HasColumnName("NOGOVal")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OActVal)
                    .HasColumnName("O_ActVal")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ObsrvVal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Qcdesc)
                    .HasColumnName("QCDesc")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.QcdetailId)
                    .HasColumnName("QCDetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Qctype)
                    .HasColumnName("QCType")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RefId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SeqNo)
                    .HasColumnName("SeqNO")
                    .HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SourceId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SourceType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(9, 0)");
            });

            modelBuilder.Entity<Qtab>(entity =>
            {
                entity.HasKey(e => e.QtabName)
                    .HasName("PK_QTab_1");

                entity.ToTable("QTab");

                entity.Property(e => e.QtabName)
                    .HasColumnName("QTabName")
                    .HasMaxLength(50)
                    .ValueGeneratedNever();

                entity.Property(e => e.QtimeStamp)
                    .HasColumnName("QTimeStamp")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<QueuingListDetail>(entity =>
            {
                entity.Property(e => e.QueuingListDetailId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PccardMasterId)
                    .HasColumnName("PCCardMasterId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Pcqty)
                    .HasColumnName("PCQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.QueuingListHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QueuingListHeader>(entity =>
            {
                entity.Property(e => e.QueuingListHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CurrentDate).HasColumnType("datetime");

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OperationMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.QueuingListNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.QueuingStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SrcOperId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QuotDetailTaxLine>(entity =>
            {
                entity.Property(e => e.QuotDetailTaxLineId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BaseAmntPercForTaxCalc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BaseAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BaseAmountType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BqtQuotationDtlId)
                    .HasColumnName("BQT_QuotationDtlId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LineNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Recoverable).HasDefaultValueSql("((0))");

                entity.Property(e => e.SeqNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxAmountFc)
                    .HasColumnName("TaxAmountFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.TaxMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxPc)
                    .HasColumnName("TaxPC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<QuotItemDetailFeatures>(entity =>
            {
                entity.HasKey(e => e.QuoItmDtlFechr);

                entity.Property(e => e.QuoItmDtlFechr)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BomdetailId)
                    .HasColumnName("BOMDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.QtyReqd).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QuoDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QuotSelectedLocations>(entity =>
            {
                entity.HasKey(e => e.PkInstallationId);

                entity.Property(e => e.PkInstallationId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.LocationId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Mediadetailid).HasMaxLength(36);

                entity.Property(e => e.QuotHeaderId)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<QuotationBom>(entity =>
            {
                entity.ToTable("QuotationBOM");

                entity.Property(e => e.QuotationBomid)
                    .HasColumnName("QuotationBOMId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Bomid)
                    .HasColumnName("BOMId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ComponentId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CummuYeildAtOperationSeq)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EffectiveFrom).HasColumnType("datetime");

                entity.Property(e => e.EffectiveTo).HasColumnType("datetime");

                entity.Property(e => e.FutureMatlCostLower).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FutureMatlCostThis).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineTotal)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Moqty)
                    .HasColumnName("MOQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProductionQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.QtyPer).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.QtyReqd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.QuotationDtlId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RejectionQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ReqQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SailingDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleDate).HasColumnType("datetime");

                entity.Property(e => e.ShipmentQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SpecCode).HasMaxLength(250);

                entity.Property(e => e.SpecValue).HasMaxLength(1000);

                entity.Property(e => e.StdMatlCostLower).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StdMatlCostThis).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Uomid)
                    .HasColumnName("UOMId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UsedAtOperationSeq)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RecordStatus>(entity =>
            {
                entity.HasKey(e => e.StatusCode);

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.StatusDesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RecurActDef>(entity =>
            {
                entity.HasKey(e => e.ActivityDefId)
                    .HasName("PK_ActivityController");

                entity.Property(e => e.ActivityDefId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityDesc)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.EveryMonthCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsHoliday)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsNoEndDate)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsWeeklyOff)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MonthlyDay)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MonthlyDayNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MonthlyMonth).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MonthlyWeek)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Occurrences).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RecEndDate).HasColumnType("datetime");

                entity.Property(e => e.RecStartDate).HasColumnType("datetime");

                entity.Property(e => e.RecurDaysCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RecurWeeksCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RecurYearCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TypeOfPeriod)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyDay)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyMonth)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyMonthName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyWeek)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RemndSch>(entity =>
            {
                entity.Property(e => e.RemndSchId)
                    .HasColumnName("RemndSchID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.EmailFrom)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Offsetdays)
                    .HasColumnName("offsetdays")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.SchType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReplyMessages>(entity =>
            {
                entity.HasKey(e => e.MsgId);

                entity.Property(e => e.MsgId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.DocType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmailText).HasMaxLength(1000);

                entity.Property(e => e.Smstext)
                    .HasColumnName("SMSText")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<ReportAuthorization>(entity =>
            {
                entity.HasKey(e => e.PkauthorizationId);

                entity.ToTable("Report_Authorization");

                entity.Property(e => e.PkauthorizationId)
                    .HasColumnName("PKAuthorizationId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ReportCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ResflDtl>(entity =>
            {
                entity.Property(e => e.ResflDtlId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActualLocationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ActualQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Fifo)
                    .HasColumnName("FIFO")
                    .HasColumnType("datetime");

                entity.Property(e => e.FromLocationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ResflHdrId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.StockDetailsId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SuggLocationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SuggQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ResflHdr>(entity =>
            {
                entity.Property(e => e.ResflHdrId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ResflSrno)
                    .HasColumnName("ResflSRNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ResourceCost>(entity =>
            {
                entity.Property(e => e.ResourceCostId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.EmpId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RatePerHour).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ToDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Rfmaster>(entity =>
            {
                entity.HasKey(e => e.Rfid);

                entity.ToTable("RFMaster");

                entity.Property(e => e.Rfid)
                    .HasColumnName("RFId")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ConditionId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DfieldName)
                    .HasColumnName("DFieldName")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DtableName)
                    .HasColumnName("DTableName")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FieldName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FunctionId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Rfactive).HasColumnName("RFActive");

                entity.Property(e => e.TableName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaskId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Rfqdetail>(entity =>
            {
                entity.HasKey(e => e.RfqdtlId)
                    .HasName("PK__RFQDetai__1BD31A4DACAB226B");

                entity.ToTable("RFQDetail");

                entity.Property(e => e.RfqdtlId)
                    .HasColumnName("RFQDtlId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Addeddt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Modifiedby)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PurchaseGrpId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Qty)
                    .HasColumnName("qty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.RfqhdrId)
                    .HasColumnName("RFQHdrId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Rfqvendor>(entity =>
            {
                entity.ToTable("RFQVendor");

                entity.Property(e => e.RfqvendorId)
                    .HasColumnName("RFQvendorId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Addeddt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Modifiedby)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RfqheaderId)
                    .HasColumnName("RFQHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RfqvendorDetails>(entity =>
            {
                entity.ToTable("RFQVendorDetails");

                entity.Property(e => e.RfqvendorDetailsId)
                    .HasColumnName("RFQVendorDetailsId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Addeddt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Modifiedby)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RfqdtlId)
                    .HasColumnName("RFQDtlId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Rfstatus>(entity =>
            {
                entity.ToTable("RFStatus");

                entity.Property(e => e.RfstatusId)
                    .HasColumnName("RFStatusId")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConditionId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DfieldName)
                    .HasColumnName("DFieldName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Dfunction)
                    .HasColumnName("DFunction")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DtableName)
                    .HasColumnName("DTableName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FieldName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FunctionId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TaskId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Rights>(entity =>
            {
                entity.Property(e => e.RightsId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ModuleRolesId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserGroupId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Rmdadetail>(entity =>
            {
                entity.ToTable("RMDADetail");

                entity.Property(e => e.RmdadetailId)
                    .HasColumnName("RMDADetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Amount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PoscheduleId)
                    .HasColumnName("POScheduleId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Reason)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RmdaheaderId)
                    .HasColumnName("RMDAHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShortQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockDetailsId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UnitRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Rmdaheader>(entity =>
            {
                entity.ToTable("RMDAHeader");

                entity.Property(e => e.RmdaheaderId)
                    .HasColumnName("RMDAHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CurrencyMasterId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ExchRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.InvoiceDt).HasColumnType("datetime");

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefBillDt).HasColumnType("datetime");

                entity.Property(e => e.RefBillNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RequistionerId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Rmdadt)
                    .HasColumnName("RMDADt")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rmdano)
                    .HasColumnName("RMDANo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Roles>(entity =>
            {
                entity.Property(e => e.RolesId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.RoleDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RouteMaster>(entity =>
            {
                entity.ToTable("Route_Master");

                entity.Property(e => e.RouteMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RouteCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RouteName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RouteMaster1>(entity =>
            {
                entity.HasKey(e => e.PkrouteMasterId);

                entity.ToTable("RouteMaster");

                entity.Property(e => e.PkrouteMasterId)
                    .HasColumnName("PKRouteMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Area).HasMaxLength(50);

                entity.Property(e => e.BranchId).HasMaxLength(50);

                entity.Property(e => e.BranchName).HasMaxLength(50);

                entity.Property(e => e.ConnectionPoint).HasMaxLength(50);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId).HasMaxLength(50);

                entity.Property(e => e.Latitude).HasMaxLength(50);

                entity.Property(e => e.Length).HasMaxLength(50);

                entity.Property(e => e.Longitude).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantId).HasMaxLength(50);

                entity.Property(e => e.PlantName).HasMaxLength(50);

                entity.Property(e => e.Point).HasMaxLength(50);

                entity.Property(e => e.RouteCode).HasMaxLength(50);

                entity.Property(e => e.RouteDesc).HasMaxLength(50);

                entity.Property(e => e.SegmentType).HasMaxLength(50);

                entity.Property(e => e.SequenceNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TotalCore).HasMaxLength(50);

                entity.Property(e => e.UtilizeCore).HasMaxLength(50);
            });

            modelBuilder.Entity<Rrf>(entity =>
            {
                entity.ToTable("RRF");

                entity.Property(e => e.Rrfid)
                    .HasColumnName("RRFId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApproverId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AssetDesc).IsUnicode(false);

                entity.Property(e => e.BudgAmount).IsUnicode(false);

                entity.Property(e => e.Ctcoffered)
                    .HasColumnName("CTCOffered")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CvdeptAcc).HasColumnName("CVDeptAcc");

                entity.Property(e => e.CvdeptPend).HasColumnName("CVDeptPend");

                entity.Property(e => e.CvdeptRej).HasColumnName("CVDeptRej");

                entity.Property(e => e.Cvhracc).HasColumnName("CVHRAcc");

                entity.Property(e => e.Cvhrpend).HasColumnName("CVHRPend");

                entity.Property(e => e.Cvhrrej).HasColumnName("CVHRRej");

                entity.Property(e => e.Cvrecd).HasColumnName("CVRecd");

                entity.Property(e => e.CvscreenBy)
                    .HasColumnName("CVScreenBy")
                    .IsUnicode(false);

                entity.Property(e => e.DeptId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DesignationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.EmploymentSubType)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.EmploymentType)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.HrexecutiveId)
                    .HasColumnName("HRExecutiveId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Interview1By).IsUnicode(false);

                entity.Property(e => e.Interview2By).IsUnicode(false);

                entity.Property(e => e.Interview3By).IsUnicode(false);

                entity.Property(e => e.Intrv2Acc)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Intrv2Pend)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Intrv2Rej)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Intrv3Acc)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Intrv3Pend)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Intrv3Rej)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsAssetRequired)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IsAvailableWp)
                    .HasColumnName("IsAvailableWP")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.JobDesc).IsUnicode(false);

                entity.Property(e => e.Justification).IsUnicode(false);

                entity.Property(e => e.KeyResult).IsUnicode(false);

                entity.Property(e => e.Location).IsUnicode(false);

                entity.Property(e => e.ModeOfEmp)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NoOfVacancies)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RelevantExp)
                    .HasColumnName("RelevantEXp")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.Replaceby).IsUnicode(false);

                entity.Property(e => e.ReqByDate).HasColumnType("datetime");

                entity.Property(e => e.RrfapprStatus)
                    .HasColumnName("RRFApprStatus")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Rrfdt)
                    .HasColumnName("RRFDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rrfno)
                    .HasColumnName("RRFNo")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Rrfstatus)
                    .HasColumnName("RRFStatus")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TotalExp)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Rrfskills>(entity =>
            {
                entity.HasKey(e => e.RrfskillId)
                    .HasName("PK__RRFSkill__3FEB1B49FF4B6978");

                entity.ToTable("RRFSkills");

                entity.HasIndex(e => e.Rrfid)
                    .HasName("<RRFId>");

                entity.Property(e => e.RrfskillId)
                    .HasColumnName("RRFSkillId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Flag)
                    .HasColumnName("flag")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Rrfid)
                    .HasColumnName("RRFId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SkillSetId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SaleRetnChargeDtl>(entity =>
            {
                entity.Property(e => e.SaleRetnChargeDtlId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CalcMethod)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ChargeAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ChrgMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.QtyValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RatePercent).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SaleRetnHdrId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxClassMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TotalAmount).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<SaleRetnChargeTaxLine>(entity =>
            {
                entity.Property(e => e.SaleRetnChargeTaxLineId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BaseAmntPercForTaxCalc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BaseAmount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MinAmntAllowedForTaxCalc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OppositeInvoicedGl)
                    .HasColumnName("OppositeInvoicedGL")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PayableAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivableAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SaleRetnChargeDtlId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SeqNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxCalcId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxPc)
                    .HasColumnName("TaxPC")
                    .HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<SaleRetnDtl>(entity =>
            {
                entity.Property(e => e.SaleRetnDtlId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccessRate)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AssessableAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.AssessablePercent).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.AssessableRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ConsigneeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeliveryDt).HasColumnType("datetime");

                entity.Property(e => e.DeliveryTerms)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Destination)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DiscAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.DiscInPer)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.DiscInQty)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.DiscItemId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DiscRate).HasColumnType("numeric(18, 10)");

                entity.Property(e => e.DiscType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FlineAmt)
                    .HasColumnName("FLineAmt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FlineCharges)
                    .HasColumnName("FLineCharges")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FlineTaxes)
                    .HasColumnName("FLineTaxes")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FlineTotal)
                    .HasColumnName("FLineTotal")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Forwarder)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ginqty)
                    .HasColumnName("GINQty")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.InsuranceCompany)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvHdrId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceDetailId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemProcessId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LabourChargeItemId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineCharges).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineTaxes).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineTotal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LocationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NoOfHu)
                    .HasColumnName("NoOfHU")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NoOfPack).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NoOfPairs).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.OpenSo)
                    .HasColumnName("OpenSO")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PairPerPack).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ParSaleRetnDtlId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.QtyInStkUnit).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Rate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RecType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RetnQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SaleRetnDtlStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SaleRetnHdrId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SalesHdrId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SeqNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SodetailId)
                    .HasColumnName("SODetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SoheaderId)
                    .HasColumnName("SOHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.State)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxClassMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Transporter)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransporterAddress)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UnitDiscRate)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.UomconvFactor)
                    .HasColumnName("UOMConvFactor")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WareHouseId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SaleRetnDtlTaxLine>(entity =>
            {
                entity.Property(e => e.SaleRetnDtlTaxLineId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BaseAmntPercForTaxCalc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BaseAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BaseAmountType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LineNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SaleRetnDtlId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SeqNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxPc)
                    .HasColumnName("TaxPC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<SaleRetnHdr>(entity =>
            {
                entity.Property(e => e.SaleRetnHdrId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Approver)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Awbno)
                    .HasColumnName("AWBNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BasicAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BillToId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ConsigneeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreditDays).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreditTerm)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CurrencyMasterId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CustOrderPodt)
                    .HasColumnName("CustOrderPODt")
                    .HasColumnType("datetime");

                entity.Property(e => e.CustOrderPono)
                    .HasColumnName("CustOrderPONo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerRfpno)
                    .HasColumnName("CustomerRFPNO")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryTerms)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Destination)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DiscAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.DiscPer).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.DiscType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Forwarder)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GrossAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.InsuranceCompany)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsReqMo).HasColumnName("IsReqMO");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mocreated).HasColumnName("MOCreated");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NetAmt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NotifyId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.OrderTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OrderTypeMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Pccount)
                    .HasColumnName("PCCount")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PriceListDtlId)
                    .HasColumnName("PriceListDtlID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PriceListHdrId)
                    .HasColumnName("PriceListHdrID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Program)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Reason)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RetnType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RevisionNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SaleExpectedDate).HasColumnType("datetime");

                entity.Property(e => e.SaleRetnDate).HasColumnType("datetime");

                entity.Property(e => e.SaleRetnNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SaleRetnStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Sotype)
                    .HasColumnName("SOtype")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TaxAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotChargeAmt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotDiscAmt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotTaxAmt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalOrderQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotalOrderValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Transporter)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransporterAddress)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<SalesBillDtlTaxLine>(entity =>
            {
                entity.Property(e => e.SalesBillDtlTaxLineId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.BaseAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BaseAmountType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SalesBillDtlId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TaxMasterId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxPc)
                    .HasColumnName("TaxPC")
                    .HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<SalesCategory>(entity =>
            {
                entity.HasKey(e => e.SlCatId);

                entity.Property(e => e.SlCatId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SlCatDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<SalesDtl>(entity =>
            {
                entity.HasIndex(e => e.SalesHeaderId)
                    .HasName("SalesHeaderId");

                entity.HasIndex(e => new { e.SalesDtlId, e.ItemMasterId, e.TaxClassMasterId })
                    .HasName("IX_SDId_CVMId_IMId_TxCId");

                entity.HasIndex(e => new { e.SalesDtlId, e.SalesHeaderId, e.SoScheduleId })
                    .HasName("IX_SLDId_SHId_SOSId");

                entity.HasIndex(e => new { e.SalesDtlId, e.SoScheduleId, e.ItemMasterId, e.TaxClassMasterId, e.SalesHeaderId, e.IsDeleted })
                    .HasName("<Name of Missing Index, sysname,>");

                entity.Property(e => e.SalesDtlId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AvgRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BasicTaxAmnt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.BasicTaxAmntFc)
                    .HasColumnName("BasicTaxAmntFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BoxDtlId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BoxNo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChargeAmnt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.ChargeAmntFc)
                    .HasColumnName("ChargeAmntFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.ChargeTaxAmnt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.ChargeTaxAmntFc)
                    .HasColumnName("ChargeTaxAmntFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.CommittedDt).HasColumnType("datetime");

                entity.Property(e => e.ContDimensn)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContGrossWt)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContNetWt)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CustomerId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DiscAmntFc)
                    .HasColumnName("DiscAmntFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.DiscAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.DiscPc)
                    .HasColumnName("DiscPC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ExemptMaterialAndNetWt)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FlineAmt)
                    .HasColumnName("FLineAmt")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.FlineTaxes)
                    .HasColumnName("FLineTaxes")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.FlineTotal)
                    .HasColumnName("FLineTotal")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LicenseNo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LineAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineTotal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LocStat)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MarksNo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NoKindPkgs)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NoofCont)
                    .HasColumnType("numeric(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProformaQty)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.QtyPerCont)
                    .HasColumnType("numeric(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Remark)
                    .HasMaxLength(550)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SaleRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SalesHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SalesQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SoScheduleId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SrNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxClassMasterId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TotalAmnt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.TotalGrossAmnt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.TotalGrossAmntFc)
                    .HasColumnName("TotalGrossAmntFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.TotalTaxAmnt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.TotalTaxAmntFc)
                    .HasColumnName("TotalTaxAmntFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesDtlLine>(entity =>
            {
                entity.Property(e => e.SalesDtlLineId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreditTo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ExpAmt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ExpDesc)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ExpSrNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SalesMainId).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<SalesExpenses>(entity =>
            {
                entity.HasKey(e => e.SalesExpenseId);

                entity.Property(e => e.SalesExpenseId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreditTo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ExpAmt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ExpDesc)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ExpSrNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SalesMainId).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<SalesFamily>(entity =>
            {
                entity.HasKey(e => e.PksalesFamilyId)
                    .HasName("PK__SalesFam__5F1BC69E6BAFC5BE");

                entity.Property(e => e.PksalesFamilyId)
                    .HasColumnName("PKSalesFamilyId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CustVendorMstId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FamilyCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FamilyDesc)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<SalesFtr>(entity =>
            {
                entity.Property(e => e.SalesFtrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Rate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SalesDtlId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SoftrId)
                    .HasColumnName("SOFtrId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WareHouseMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesHeader>(entity =>
            {
                entity.HasIndex(e => e.InvoiceNo)
                    .HasName("InvoiceNo");

                entity.HasIndex(e => new { e.InvoiceNo, e.InvoiceDt })
                    .HasName("InvNoAndDt");

                entity.HasIndex(e => new { e.SalesHeaderId, e.PlantMasterId, e.CustomerId, e.OrderTypeId })
                    .HasName("SalesHdrIdandInvNo");

                entity.Property(e => e.SalesHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address1)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Address3)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.AgentCode).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.AsseblVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BankSwiftCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BasicAmnt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.BasicAmtFc)
                    .HasColumnName("BasicAmtFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.BasicTaxAmnt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.BasicTaxAmntFc)
                    .HasColumnName("BasicTaxAmntFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.BillToId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Boldate)
                    .HasColumnName("BOLDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bolno)
                    .HasColumnName("BOLNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CashDisc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.CashRecd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ChallanNo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ChargeAmnt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.ChargeTaxAmnt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.ChargeTaxAmntFc)
                    .HasColumnName("ChargeTaxAmntFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.ChqAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ChqBank)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ChqDate).HasColumnType("datetime");

                entity.Property(e => e.ChqNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.City)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ConsAddress)
                    .HasColumnName("Cons_Address")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ConsAwbno)
                    .HasColumnName("Cons_AWBNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ConsCity)
                    .HasColumnName("Cons_City")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConsConsigneeName)
                    .HasColumnName("Cons_ConsigneeName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ConsContactPerson)
                    .HasColumnName("Cons_ContactPerson")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConsCountry)
                    .HasColumnName("Cons_Country")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConsDestination)
                    .HasColumnName("Cons_Destination")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConsFax)
                    .HasColumnName("Cons_Fax")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConsForwarder)
                    .HasColumnName("Cons_Forwarder")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ConsInsuranceCompany)
                    .HasColumnName("Cons_InsuranceCompany")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ConsMobile)
                    .HasColumnName("Cons_Mobile")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConsPhone)
                    .HasColumnName("Cons_Phone")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConsState)
                    .HasColumnName("Cons_State")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConsTransporter)
                    .HasColumnName("Cons_Transporter")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ConsTransporterAddress)
                    .HasColumnName("Cons_TransporterAddress")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CustomerId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerPodt)
                    .HasColumnName("CustomerPODt")
                    .HasColumnType("datetime");

                entity.Property(e => e.CustomerPono)
                    .HasColumnName("CustomerPONo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DcmainId)
                    .HasColumnName("DCMainId")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DeleAddress)
                    .HasColumnName("Dele_Address")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.DeleAwbno)
                    .HasColumnName("Dele_AWBNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DeleCity)
                    .HasColumnName("Dele_City")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeleConsigneeName)
                    .HasColumnName("Dele_ConsigneeName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DeleContactPerson)
                    .HasColumnName("Dele_ContactPerson")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeleCountry)
                    .HasColumnName("Dele_Country")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeleDestination)
                    .HasColumnName("Dele_Destination")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeleFax)
                    .HasColumnName("Dele_Fax")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeleForwarder)
                    .HasColumnName("Dele_Forwarder")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DeleInsuranceCompany)
                    .HasColumnName("Dele_InsuranceCompany")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DeleMobile)
                    .HasColumnName("Dele_Mobile")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DelePhone)
                    .HasColumnName("Dele_Phone")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeleState)
                    .HasColumnName("Dele_State")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeleTransporter)
                    .HasColumnName("Dele_Transporter")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DeleTransporterAddress)
                    .HasColumnName("Dele_TransporterAddress")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryDate).HasColumnType("datetime");

                entity.Property(e => e.DeliveryMode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DiscAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.DiscPer).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.DispatchNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dispatchdt).HasColumnType("datetime");

                entity.Property(e => e.DocType)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.DockInTime).HasColumnType("datetime");

                entity.Property(e => e.DockOutTime).HasColumnType("datetime");

                entity.Property(e => e.Effdate).HasColumnType("datetime");

                entity.Property(e => e.ExRate)
                    .HasColumnType("numeric(9, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.FinalInvoiceNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FreightPayMode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GrossWt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InsuAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.InvoiceDt).HasColumnType("datetime");

                entity.Property(e => e.InvoiceGroup)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceTypeMasterId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Lcno)
                    .HasColumnName("LCNo")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LorryNo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Lrdt)
                    .HasColumnName("LRDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.Lrfreight)
                    .HasColumnName("LRFreight")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Lrno)
                    .HasColumnName("LRNo")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Lrpacks)
                    .HasColumnName("LRPacks")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.MainfestId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.MainfestNo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MarginAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.MarkupAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.MaterialVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Mrptot)
                    .HasColumnName("MRPTot")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NetAmtFc)
                    .HasColumnName("NetAmtFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.Netwt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Notes)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.OrderTypeId)
                    .HasColumnName("OrderTypeID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PayTermId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Phone)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.PikPakStatusId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Pin)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Podrecd)
                    .HasColumnName("PODRecd")
                    .HasMaxLength(1);

                entity.Property(e => e.RecdAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RecordTypeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RemovalDt).HasColumnType("datetime");

                entity.Property(e => e.RoundOff).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SaleAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SaleType)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SalesOrderHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SalesRetAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SealNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShipStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Shipper)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Soheaderid)
                    .HasColumnName("SOHeaderid")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TatReasonId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TatRemark)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.TotChargeAmtFc)
                    .HasColumnName("TotChargeAmtFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.TotDiscAmtFc)
                    .HasColumnName("TotDiscAmtFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.TotGrossAmnt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotGrossAmntFc)
                    .HasColumnName("TotGrossAmntFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.TotNetAmnt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotTaxAmnt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotTaxAmtFc)
                    .HasColumnName("TotTaxAmtFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.TotalCartonQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotalCbm)
                    .HasColumnName("TotalCBM")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotalQtyinDozen).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TransMode)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.TransName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.VehicleInTime).HasColumnType("datetime");

                entity.Property(e => e.VehicleOutTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<SalesOrderDetail>(entity =>
            {
                entity.Property(e => e.SalesOrderDetailId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ConsigneeAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CustOrderNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryTerms)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NoOfLots).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SailingDate).HasColumnType("datetime");

                entity.Property(e => e.SalesOrderHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleDate).HasColumnType("datetime");

                entity.Property(e => e.ShipmentModeMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TotalQty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TransporterAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<SalesOrderLotDetail>(entity =>
            {
                entity.HasKey(e => e.SalesOrderLotDetaillId)
                    .HasName("PK__SalesOrderLotDet__753864A1");

                entity.Property(e => e.SalesOrderLotDetaillId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActualProdDt).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ConsigneeAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeliveryTerms)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LotNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LotQty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SailingDate).HasColumnType("datetime");

                entity.Property(e => e.SalesOrderDetailId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleDate).HasColumnType("datetime");

                entity.Property(e => e.ShipmentModeMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransporterAddress)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<SalesPickList>(entity =>
            {
                entity.Property(e => e.SalesPickListId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.NoofBoxex)
                    .HasColumnName("NOOfBoxex")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PacketMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PacketSrNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PickListQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SalesDtlId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SalesHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesRetnPacketList>(entity =>
            {
                entity.HasKey(e => e.SalesRtnPacketListId)
                    .HasName("PK_SalesRetnacketList");

                entity.Property(e => e.SalesRtnPacketListId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PacketMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PacketNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PacketSrNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PostStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SalesRtnDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SalesRtnHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesWidgetMaster>(entity =>
            {
                entity.HasKey(e => e.PksalesWidgetMasterId)
                    .HasName("PKSalesWidgetMasterID");

                entity.HasIndex(e => new { e.PksalesWidgetMasterId, e.Particular, e.ThisMth, e.FromApril, e.DueDays, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.WidgetCode, e.FkplantId, e.SeqNo })
                    .HasName("PlantId");

                entity.Property(e => e.PksalesWidgetMasterId)
                    .HasColumnName("PKSalesWidgetMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FkplantId)
                    .HasColumnName("FKPlantId")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FromApril).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Particular)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SeqNo)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ThisMth).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.WidgetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalvDetail>(entity =>
            {
                entity.Property(e => e.SalvDetailId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.MoheaderId)
                    .HasColumnName("MOHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OkQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ReworkQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SalvHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ScrapQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SecondsQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StatusId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TotalQty).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<SalvHeader>(entity =>
            {
                entity.Property(e => e.SalvHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OkQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReworkQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SalvDt).HasColumnType("datetime");

                entity.Property(e => e.SalvNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ScrapQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SecondsQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotalQty).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<SalvRejDetail>(entity =>
            {
                entity.Property(e => e.SalvRejDetailId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ConfigurationDetailId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RejectionQuantity).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RejectionType).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ReworkQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SalvHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ScrapQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SecondsQty).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<SbcmtrlDetail>(entity =>
            {
                entity.ToTable("SBCMtrlDetail");

                entity.Property(e => e.SbcmtrlDetailId)
                    .HasColumnName("SBCMtrlDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BomdetailId)
                    .HasColumnName("BOMDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RecType)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecType)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ReqQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RetQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SoheaderId)
                    .HasColumnName("SOHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Uomid)
                    .HasColumnName("UOMId")
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SchCalcMtd>(entity =>
            {
                entity.Property(e => e.SchCalcMtdId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SchOfType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Sdrdetail>(entity =>
            {
                entity.ToTable("SDRDetail");

                entity.Property(e => e.SdrdetailId)
                    .HasColumnName("SDRDetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CustVendorMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LotNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReqDispatchQty).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SdrheaderId)
                    .HasColumnName("SDRHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Sdrheader>(entity =>
            {
                entity.ToTable("SDRHeader");

                entity.Property(e => e.SdrheaderId)
                    .HasColumnName("SDRHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedById)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AuthorisedById)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeptMasteerId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProdetailId)
                    .HasColumnName("PRODetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SdragainstId)
                    .HasColumnName("SDRAgainstId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Sdrdt)
                    .HasColumnName("SDRDt")
                    .HasColumnType("datetime");

                entity.Property(e => e.Sdrno)
                    .HasColumnName("SDRNo")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ServTaxInfo>(entity =>
            {
                entity.Property(e => e.ServTaxInfoId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Amnt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BillDt).HasColumnType("datetime");

                entity.Property(e => e.BillNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ExciseNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsCreditTaken)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsPaid)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PaidAmnt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.RefundClaimNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RltvVoucherNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TransHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VoucherNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ServiceClass>(entity =>
            {
                entity.HasKey(e => e.ServClId);

                entity.Property(e => e.ServClId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ServClDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ShiftMaster>(entity =>
            {
                entity.Property(e => e.ShiftMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BreakHrs).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShiftDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShiftEndTime)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ShiftStartTime)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ShiftTimeInHr).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalProdHrs).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<ShipToMaster>(entity =>
            {
                entity.HasIndex(e => new { e.ShipToMasterId, e.CustomerId, e.ConsigneeName, e.Address, e.City, e.State, e.Phone, e.Mobile, e.ContactPerson, e.IsDeleted, e.IsBlocked })
                    .HasName("<Name of Missing Index, sysname,>");

                entity.Property(e => e.ShipToMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Addtype)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Awbno)
                    .HasColumnName("AWBNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BillToAddress)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConsigneeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CustomerId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Destination)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Distance)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Forwarder)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GeoLocation)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Gstcode)
                    .HasColumnName("GSTCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Gststate)
                    .HasColumnName("GSTState")
                    .HasMaxLength(36);

                entity.Property(e => e.InsuranceCompany)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IsBlocked)
                    .HasColumnName("isBlocked")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDefaultBillTo).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDefaultDeliv).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDefaultNotify).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDefaultShipTo).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Latitude)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Longitude)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Oms)
                    .HasColumnName("OMS")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Pan)
                    .HasColumnName("PAN")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlcRcptPreCarr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PortDischarge)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PortLoad)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PreCarrBy)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rating)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RefId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Reftype)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RouteMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StateMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TanGstinNumber)
                    .HasColumnName("TAN_GSTIN_Number")
                    .HasMaxLength(100);

                entity.Property(e => e.Tanno)
                    .HasColumnName("TANNO")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TannoName)
                    .HasColumnName("TANNoName")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TaxClass)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TransitLeadtime).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Transporter)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransporterAddress)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.VesselNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ShipmentTracking>(entity =>
            {
                entity.HasKey(e => e.PkrequestId)
                    .HasName("PK__Shipment__326C0FF0432873FE");

                entity.Property(e => e.PkrequestId)
                    .HasColumnName("PKRequestId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityCenter)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Addeddt).HasColumnType("datetime");

                entity.Property(e => e.AirwayBillDate).HasColumnType("datetime");

                entity.Property(e => e.AirwayBillNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Barcode)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CcontactName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ContactName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Contents)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentStatgeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CustCity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustPin)
                    .HasColumnName("CustPIN")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CustState)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerAddress)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerMobileNo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerPhoneNo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.ExceptedDeliverydate).HasColumnType("datetime");

                entity.Property(e => e.FreightForwarder)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GroupName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Height).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.InwardNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Ledger)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Length).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MaterialDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MaterialMovement)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MaterialReadinessDate).HasColumnType("datetime");

                entity.Property(e => e.ModeOfTransport)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NoOfPackage).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.PackgingRequired)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Pieces)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Pincode).HasColumnType("numeric(6, 0)");

                entity.Property(e => e.PoNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Project)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PurposeOfRemoval)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RequestType)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RequisitionerEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequisitionerId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequisitionerMobileNo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.RequisitionerNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RequisitionerPhoneNo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.SpecialInstructions)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Through)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TrackNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnitId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.VendorAddress)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.VendorEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VendorMobileNo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.VendorName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VendorPhoneNo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Weight).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Width).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WorkFlowId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SixMonthLatemarkData>(entity =>
            {
                entity.HasKey(e => new { e.UserMasterId, e.Year, e.Session });

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Year).HasColumnType("numeric(4, 0)");

                entity.Property(e => e.Session).HasColumnType("numeric(1, 0)");

                entity.Property(e => e.IsProc)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TotalEl)
                    .HasColumnName("TotalEL")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.TotalHours).HasColumnType("numeric(3, 0)");
            });

            modelBuilder.Entity<SizeMaster>(entity =>
            {
                entity.HasKey(e => e.SizeCode);

                entity.Property(e => e.SizeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SizeDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SkillGroupMaster>(entity =>
            {
                entity.HasKey(e => e.PkskillGroupId);

                entity.Property(e => e.PkskillGroupId)
                    .HasColumnName("PKSkillGroupId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SkillGroup)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SkillGroupDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SkillRating>(entity =>
            {
                entity.HasKey(e => e.RatingId);

                entity.Property(e => e.RatingId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.RatingValue)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SkillSetMaster>(entity =>
            {
                entity.HasKey(e => e.PkskillSetId);

                entity.Property(e => e.PkskillSetId)
                    .HasColumnName("PKSkillSetId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FkskillGroupId)
                    .HasColumnName("FKSkillGroupId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Flag)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SkillSet)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SkillSetDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Socommission>(entity =>
            {
                entity.ToTable("SOCommission");

                entity.HasIndex(e => new { e.AgentId, e.CommisionPer, e.CreditPer, e.SoheaderId, e.IsDeleted, e.CommisionOn })
                    .HasName("IDX_SOComm_ID_DEL_Com");

                entity.HasIndex(e => new { e.SoheaderId, e.AgentId, e.CommisionPer, e.CreditPer, e.IsDeleted, e.CommisionOn })
                    .HasName("IDX_DeleComOnSOCom");

                entity.Property(e => e.SocommissionId)
                    .HasColumnName("SOCommissionId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AgentId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CommProcDtlId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CommType)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Commision).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CommisionFc)
                    .HasColumnName("CommisionFC")
                    .HasColumnType("numeric(18, 2)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.CommisionOn)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CommisionPer).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CommissionType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreditPer)
                    .HasColumnType("numeric(9, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Lcno)
                    .HasColumnName("LCNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Lcvalue)
                    .HasColumnName("LCValue")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SoheaderId)
                    .HasColumnName("SOHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.VouId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Sodetail>(entity =>
            {
                entity.ToTable("SODetail");

                entity.HasIndex(e => e.SoheaderId)
                    .HasName("SOHeaderId");

                entity.HasIndex(e => new { e.SodetailId, e.ItemMasterId })
                    .HasName("IX_SODId_IMId_PlntId");

                entity.HasIndex(e => new { e.SodetailId, e.SoheaderId })
                    .HasName("IX_SODId_SOHId");

                entity.HasIndex(e => new { e.SoheaderId, e.ItemMasterId })
                    .HasName("<Name of Missing Index, sysname,>");

                entity.HasIndex(e => new { e.SoheaderId, e.ShipToId, e.LineTotal, e.IsDeleted })
                    .HasName("IDX_SOHIDSHIPTOLINETOT");

                entity.Property(e => e.SodetailId)
                    .HasColumnName("SODetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AllowPartShipment)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.BillingCategoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ConsigneeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeliveryDt).HasColumnType("datetime");

                entity.Property(e => e.DeliveryTerms)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Destination)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DiscAmount)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.DiscPc)
                    .HasColumnName("DiscPC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.Enddt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EveryMonthCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Fax)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FdiscAmount)
                    .HasColumnName("FDiscAmount")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.FlineAmt)
                    .HasColumnName("FLineAmt")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FlineCharges)
                    .HasColumnName("FLineCharges")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FlineTaxes)
                    .HasColumnName("FLineTaxes")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FlineTotal)
                    .HasColumnName("FLineTotal")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Forwarder)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InsuranceCompany)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InterestRate).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsInsurancereqd)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsNoEndDate)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsProRata)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemClassificationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemProcessId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemSize).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LabourChargeItemId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LicenseNo)
                    .HasColumnName("LicenseNO")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.LineAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineCharges).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineTaxes).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineTotal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Merchantid)
                    .HasColumnName("merchantid")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Merchantname)
                    .HasColumnName("merchantname")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MonthlyDay)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MonthlyDayNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MonthlyMonth).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MonthlyWeek)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoOfHu).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NoOfPack).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NoOfPairs).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Occurrences).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.OrgQty)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PeriodicEndDate).HasColumnType("datetime");

                entity.Property(e => e.Phone)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Poqty)
                    .HasColumnName("POQty")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PricePoint)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ProFigure)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ProUnit)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.QuotationDtlId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RecEndDate).HasColumnType("datetime");

                entity.Property(e => e.RecStartDate).HasColumnType("datetime");

                entity.Property(e => e.RecurDaysCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RecurWeeksCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RecurYearCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Remark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.RenewalStatus)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RetQty)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RouteFrom)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RouteTo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SegmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SeqNo).HasColumnType("numeric(5, 0)");

                entity.Property(e => e.ShipToId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SodetailStatus)
                    .HasColumnName("SODetailStatus")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SoheaderId)
                    .HasColumnName("SOHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Startdt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.State)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SuggLotNo)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TaxClassMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Transporter)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransporterAddress)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.TypeOfPeriod)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WareHouseId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.WarrantyCode)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.YearlyDay)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyMonth)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyMonthName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyWeek)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SodetailTaxLine>(entity =>
            {
                entity.ToTable("SODetailTaxLine");

                entity.Property(e => e.SodetailTaxLineId)
                    .HasColumnName("SODetailTaxLineId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BaseAmntPercForTaxCalc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BaseAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BaseAmountType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LineNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Recoverable).HasDefaultValueSql("((0))");

                entity.Property(e => e.SeqNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SodetailId)
                    .HasColumnName("SODetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxAmountFc)
                    .HasColumnName("TaxAmountFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.TaxMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxPc)
                    .HasColumnName("TaxPC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Soheader>(entity =>
            {
                entity.ToTable("SOHeader");

                entity.HasIndex(e => e.Sono)
                    .HasName("IX_SOHeader");

                entity.HasIndex(e => new { e.SoheaderId, e.Sono, e.Sodate, e.CustomerMasterId, e.ConsigneeName, e.City, e.OrderTypeMasterId, e.PlantMasterId, e.Approver, e.SalesEngg, e.IsDeleted, e.SoheaderStatus })
                    .HasName("IDX_IsDeletedSOStatus");

                entity.Property(e => e.SoheaderId)
                    .HasColumnName("SOHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Advance)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Approver)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Awbno)
                    .HasColumnName("AWBNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BankSwiftCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BasicAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BasicAmtFc)
                    .HasColumnName("BasicAmtFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BillToId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CallId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConsigneeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactMobile)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPersonName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreditDays).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreditTerm)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CurrencyMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CustOrderPodt)
                    .HasColumnName("CustOrderPODt")
                    .HasColumnType("datetime");

                entity.Property(e => e.CustOrderPono).HasColumnName("CustOrderPONo");

                entity.Property(e => e.CustomerMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerRfpno)
                    .HasColumnName("CustomerRFPNO")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryTerms)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Destination)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchMode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Doack)
                    .HasColumnName("DOack")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dobkd)
                    .HasColumnName("DOBkd")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dodisptch)
                    .HasColumnName("DODisptch")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dorcvd)
                    .HasColumnName("DORcvd")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dorej)
                    .HasColumnName("DORej")
                    .HasColumnType("datetime");

                entity.Property(e => e.Drawback)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EventFrmDt).HasColumnType("datetime");

                entity.Property(e => e.EventToDt).HasColumnType("datetime");

                entity.Property(e => e.ExRate).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ExeResp)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Forwarder)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Freight)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FyearId)
                    .HasColumnName("FYearId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.GracePeriod)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InsuranceCompany)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceDeliveryBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsReqMo).HasColumnName("IsReqMO");

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Latitude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Longitude)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MachineGroupMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mocreated).HasColumnName("MOCreated");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NetAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NetAmtFc)
                    .HasColumnName("NetAmtFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NoOfPersons).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NotifyId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.OrderReceivedDate).HasColumnType("datetime");

                entity.Property(e => e.OrderRecvdFrom).HasMaxLength(500);

                entity.Property(e => e.OrderTypeMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PrefDelFrmTime)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PrefDelToTime)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PriceListDtlId)
                    .HasColumnName("PriceListDtlID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PriceListHdrId)
                    .HasColumnName("PriceListHdrID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Program)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.QcStatus)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RatePerPerson).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RefRecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RevisionNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SalesEngg)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SalesType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SionsrNo)
                    .HasColumnName("SIONSrNo")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SocontractId)
                    .HasColumnName("SOContractId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Sodate)
                    .HasColumnName("SODate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SoheaderStatus)
                    .HasColumnName("SOHeaderStatus")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Sono)
                    .HasColumnName("SONo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Sotype)
                    .HasColumnName("SOtype")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TimeSlotId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TotChargeAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotChargeAmtFc)
                    .HasColumnName("TotChargeAmtFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotDiscAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotDiscAmtFc)
                    .HasColumnName("TotDiscAmtFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotTaxAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotTaxAmtFc)
                    .HasColumnName("TotTaxAmtFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotalGrossAmt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalOrderQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotalOrderValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Transporter)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransporterAddress)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WareHouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ZoneMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Soheader20190307>(entity =>
            {
                entity.HasKey(e => e.SoheaderId)
                    .HasName("PK__SOHeader__69C6B1F5");

                entity.ToTable("SOHeader_20190307");

                entity.HasIndex(e => e.Sono)
                    .HasName("IX_SOHeader");

                entity.HasIndex(e => new { e.SoheaderId, e.Sono, e.Sodate, e.CustomerMasterId, e.ConsigneeName, e.City, e.OrderTypeMasterId, e.PlantMasterId, e.Approver, e.SalesEngg, e.IsDeleted, e.SoheaderStatus })
                    .HasName("IDX_IsDeletedSOStatus");

                entity.Property(e => e.SoheaderId)
                    .HasColumnName("SOHeaderId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Advance)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Approver)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Awbno)
                    .HasColumnName("AWBNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BankSwiftCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BasicAmt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BasicAmtFc)
                    .HasColumnName("BasicAmtFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.BillToId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CallId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConsigneeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactMobile)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPersonName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreditDays).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CreditTerm)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CurrencyMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CustOrderPodt)
                    .HasColumnName("CustOrderPODt")
                    .HasColumnType("datetime");

                entity.Property(e => e.CustOrderPono).HasColumnName("CustOrderPONo");

                entity.Property(e => e.CustomerMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerRfpno)
                    .HasColumnName("CustomerRFPNO")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryTerms)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Destination)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DispatchMode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Doack)
                    .HasColumnName("DOack")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dobkd)
                    .HasColumnName("DOBkd")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dodisptch)
                    .HasColumnName("DODisptch")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dorcvd)
                    .HasColumnName("DORcvd")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dorej)
                    .HasColumnName("DORej")
                    .HasColumnType("datetime");

                entity.Property(e => e.Drawback)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EventFrmDt).HasColumnType("datetime");

                entity.Property(e => e.EventToDt).HasColumnType("datetime");

                entity.Property(e => e.ExRate)
                    .HasColumnType("numeric(9, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Forwarder)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Freight)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InsuranceCompany)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceDeliveryBy)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsReqMo).HasColumnName("IsReqMO");

                entity.Property(e => e.ItemClassification)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.MachineGroupMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mocreated).HasColumnName("MOCreated");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NetAmt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NetAmtFc)
                    .HasColumnName("NetAmtFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.NoOfPersons).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NotifyId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.OrderReceivedDate).HasColumnType("datetime");

                entity.Property(e => e.OrderRecvdFrom).HasMaxLength(500);

                entity.Property(e => e.OrderTypeMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PriceListDtlId)
                    .HasColumnName("PriceListDtlID")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PriceListHdrId)
                    .HasColumnName("PriceListHdrID")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Program)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.QcStatus)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.QuotationNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RatePerPerson).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RefRecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefRecType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RevisionNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SalesEngg)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SalesType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('6')");

                entity.Property(e => e.ShipToMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SionsrNo)
                    .HasColumnName("SIONSrNo")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SocontractId)
                    .HasColumnName("SOContractId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Sodate)
                    .HasColumnName("SODate")
                    .HasColumnType("datetime");

                entity.Property(e => e.SoheaderStatus)
                    .HasColumnName("SOHeaderStatus")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Sono)
                    .HasColumnName("SONo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Sotype)
                    .HasColumnName("SOtype")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TimeSlotId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TotChargeAmt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotChargeAmtFc)
                    .HasColumnName("TotChargeAmtFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.TotDiscAmt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotDiscAmtFc)
                    .HasColumnName("TotDiscAmtFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.TotTaxAmt)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotTaxAmtFc)
                    .HasColumnName("TotTaxAmtFC")
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.TotalGrossAmt)
                    .HasColumnType("numeric(18, 2)")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.TotalOrderQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotalOrderValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Transporter)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransporterAddress)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ZoneMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SoitemDetailFeatures>(entity =>
            {
                entity.HasKey(e => e.SoitmDtlFechr);

                entity.ToTable("SOItemDetailFeatures");

                entity.Property(e => e.SoitmDtlFechr)
                    .HasColumnName("SOItmDtlFechr")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.BomdetailId)
                    .HasColumnName("BOMDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.QtyReqd).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SoDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Sosample>(entity =>
            {
                entity.ToTable("SOSample");

                entity.Property(e => e.SosampleId)
                    .HasColumnName("SOSampleId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApprovalDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SampleQty).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SampleShceduleDt).HasColumnType("datetime");

                entity.Property(e => e.SampleSubmisionDt).HasColumnType("datetime");

                entity.Property(e => e.SodetailId)
                    .HasColumnName("SODetailId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Soschedule>(entity =>
            {
                entity.ToTable("SOSchedule");

                entity.HasIndex(e => e.SodetailId)
                    .HasName("SODetailId");

                entity.Property(e => e.SoscheduleId)
                    .HasColumnName("SOScheduleId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActualMoqty)
                    .HasColumnName("ActualMOQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CrtnAlloctdQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsPeriodic)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemProcessId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Moqty)
                    .HasColumnName("MOQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NoOfPack).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.PickedQty)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.PlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PorefId)
                    .HasColumnName("PORefId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ProformaQty)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.QtyWithYield).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RecQty)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.SailingDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleDate).HasColumnType("datetime");

                entity.Property(e => e.ShipmentQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SodetailId)
                    .HasColumnName("SODetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SoscheduleStatus)
                    .HasColumnName("SOScheduleStatus")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SoscheduleBom>(entity =>
            {
                entity.ToTable("SOScheduleBOM");

                entity.Property(e => e.SoscheduleBomid)
                    .HasColumnName("SOScheduleBOMId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Bomid)
                    .HasColumnName("BOMId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ComponentId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CummuYeildAtOperationSeq)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EffectiveFrom).HasColumnType("datetime");

                entity.Property(e => e.EffectiveTo).HasColumnType("datetime");

                entity.Property(e => e.FutureMatlCostLower).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FutureMatlCostThis).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineTotal)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Moqty)
                    .HasColumnName("MOQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProductionQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.QtyPer).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.QtyReqd).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RejectionQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ReqQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SailingDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleDate).HasColumnType("datetime");

                entity.Property(e => e.ShipmentQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SoscheduleId)
                    .HasColumnName("SOScheduleId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SpecDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpecVal)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.StdMatlCostLower).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.StdMatlCostThis).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Uomid)
                    .HasColumnName("UOMId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UsedAtOperationSeq)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SourceType>(entity =>
            {
                entity.Property(e => e.SourceTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NoofDays)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SourceType1)
                    .IsRequired()
                    .HasColumnName("SourceType")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SourceTypeDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SpecDetail>(entity =>
            {
                entity.Property(e => e.SpecDetailId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SpecDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpecDetailCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpecHeaderId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<SpecHeader>(entity =>
            {
                entity.Property(e => e.SpecHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SpecCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SpecDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<SqtableForEmail>(entity =>
            {
                entity.HasKey(e => e.DocumentType);

                entity.ToTable("SQTableForEmail");

                entity.Property(e => e.DocumentType)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.SqforEmail)
                    .HasColumnName("SQForEmail")
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StandardCalendarOptions>(entity =>
            {
                entity.HasKey(e => e.CalendarOptionId);

                entity.Property(e => e.CalendarOptionId)
                    .HasMaxLength(32)
                    .ValueGeneratedNever();

                entity.Property(e => e.CalendarId).HasMaxLength(32);

                entity.Property(e => e.DefaultEndTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultStartTime).HasColumnType("datetime");

                entity.Property(e => e.FiscalYearStartsIn).HasMaxLength(50);

                entity.Property(e => e.WeekStartsOn).HasMaxLength(50);
            });

            modelBuilder.Entity<StateMaster>(entity =>
            {
                entity.Property(e => e.StateMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.StateCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StateDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TaxClassMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StkAdjPacket>(entity =>
            {
                entity.Property(e => e.StkAdjPacketId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.PacketNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PacketSrNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StockAdjId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StkQcdtl>(entity =>
            {
                entity.ToTable("StkQCDtl");

                entity.Property(e => e.StkQcdtlId)
                    .HasColumnName("StkQCDtlId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BasicVal).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Bvuomid)
                    .HasColumnName("BVUOMId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Fifo)
                    .HasColumnName("FIFO")
                    .HasColumnType("datetime");

                entity.Property(e => e.Goact).HasColumnName("GOAct");

                entity.Property(e => e.Goval)
                    .HasColumnName("GOVal")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MActVal)
                    .HasColumnName("M_ActVal")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.MnTolrnc).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.MnTolrncUom)
                    .HasColumnName("MnTolrncUOM")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MxTolrnc).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.MxTolrncUom)
                    .HasColumnName("MxTolrncUOM")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Nogoact).HasColumnName("NOGOAct");

                entity.Property(e => e.Nogoval)
                    .HasColumnName("NOGOVal")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OActVal)
                    .HasColumnName("O_ActVal")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ObsrvVal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Qcdesc)
                    .HasColumnName("QCDesc")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Qctype)
                    .HasColumnName("QCType")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RefId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Remark)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SeqNo)
                    .HasColumnName("SeqNO")
                    .HasColumnType("numeric(9, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SourceId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SourceType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StkQchdrId)
                    .HasColumnName("StkQCHdrId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(9, 0)");
            });

            modelBuilder.Entity<StkQchdr>(entity =>
            {
                entity.ToTable("StkQCHdr");

                entity.Property(e => e.StkQchdrId)
                    .HasColumnName("StkQCHdrId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedQtyWithSample)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CertNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Fifo)
                    .HasColumnName("FIFO")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdentificationCodeType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItmPlntId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Mono)
                    .HasColumnName("MONo")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PrntDt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Prodqcno)
                    .HasColumnName("PRODQCNo")
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.QcstatusId)
                    .HasColumnName("QCStatusId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('120')");

                entity.Property(e => e.RetentionPeroid)
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Samplesize)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.Samplesizenature)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sampletype)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(9, 0)");
            });

            modelBuilder.Entity<StockAdjustment>(entity =>
            {
                entity.HasKey(e => e.StockAdjId);

                entity.Property(e => e.StockAdjId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AdjDate).HasColumnType("datetime");

                entity.Property(e => e.AdjNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AdjQty).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AdjType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CartonNo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CartonSrNo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FinYearId).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OpRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OpValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PacketMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StockDetails>(entity =>
            {
                entity.HasIndex(e => new { e.FinYearId, e.PlantMasterId, e.BarCodeSrNo, e.LocStat, e.OrderId, e.Ref, e.RecdQty, e.MovedQty, e.BalQty, e.RecdVal, e.MovedVal, e.BalVal, e.SrecdQty, e.SmovedQty, e.SbalQty, e.CreationLevel, e.UserLevel, e.IsDeleted, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.SApprovedQty, e.ApprovedQty, e.ApprovedVal, e.UnitRate, e.SupplierId, e.LocalImport, e.RefDocId, e.RefDocType, e.FgtransferQty, e.SourceType, e.SourceId, e.UnPostedQty, e.ItemMasterId, e.WarehouseMasterId, e.LocationMasterId, e.BatchNo, e.Fifo, e.Qcstatus })
                    .HasName("ItemMasterLot");

                entity.HasIndex(e => new { e.StockDetailsId, e.FinYearId, e.PlantMasterId, e.WarehouseMasterId, e.LocationMasterId, e.BarCodeSrNo, e.Fifo, e.LocStat, e.OrderId, e.Ref, e.RecdQty, e.MovedQty, e.BalQty, e.RecdVal, e.MovedVal, e.BalVal, e.SrecdQty, e.SmovedQty, e.SbalQty, e.CreationLevel, e.UserLevel, e.IsDeleted, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.SApprovedQty, e.ApprovedQty, e.ApprovedVal, e.UnitRate, e.SupplierId, e.LocalImport, e.RefDocId, e.RefDocType, e.FgtransferQty, e.SourceType, e.SourceId, e.Qcstatus, e.UnPostedQty, e.BatchNo, e.ItemMasterId })
                    .HasName("LotItem");

                entity.Property(e => e.StockDetailsId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ApprovedVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BalQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BalVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BarCodeSrNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FgtransferQty)
                    .HasColumnName("FGTransferQty")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Fifo).HasColumnType("datetime");

                entity.Property(e => e.FinYearId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LocStat)
                    .HasColumnName("locStat")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LocalImport)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('L')");

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MovedQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.MovedVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Qcstatus)
                    .HasColumnName("QCStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Approved')");

                entity.Property(e => e.RecdQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RecdVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Ref)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RefDocId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.RefDocType)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.SApprovedQty)
                    .HasColumnName("sApprovedQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SbalQty)
                    .HasColumnName("SBalQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SmovedQty)
                    .HasColumnName("SMovedQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SourceType)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SrecdQty)
                    .HasColumnName("SRecdQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('NA')");

                entity.Property(e => e.UnPostedQty)
                    .HasColumnType("numeric(9, 4)")
                    .HasDefaultValueSql("((0.0000))");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StyleCodeMaster>(entity =>
            {
                entity.HasKey(e => e.StyleCode);

                entity.Property(e => e.StyleCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.StyleDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<StyleMaster>(entity =>
            {
                entity.Property(e => e.StyleMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Construction)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CustomerMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SockImage).HasColumnType("image");

                entity.Property(e => e.SockType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StyleCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StyleDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<SubContractWip>(entity =>
            {
                entity.ToTable("SubContractWIP");

                entity.Property(e => e.SubContractWipid)
                    .HasColumnName("SubContractWIPId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FrmOperationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FromwipitemId)
                    .HasColumnName("FROMWIPItemId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.InRatio).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LabourChargeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.MoHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MoroutingId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.MoveToWip).HasColumnName("MoveToWIP");

                entity.Property(e => e.OutRatio).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.ToOperationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TowipitemId)
                    .HasColumnName("TOWIPItemId")
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SugPickList>(entity =>
            {
                entity.Property(e => e.SugPickListId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PacketMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PacketQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PickListQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PicklistHdrId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PicklistdtlId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.StockDetailsId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SuggPutAway>(entity =>
            {
                entity.Property(e => e.SuggPutAwayId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.GrndetailId)
                    .HasColumnName("GRNDetailId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PostedDate).HasColumnType("datetime");

                entity.Property(e => e.PutAwayQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Status)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<SupportMaterialInfo>(entity =>
            {
                entity.HasKey(e => e.PkmaterialId);

                entity.Property(e => e.PkmaterialId)
                    .HasColumnName("PKMaterialId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId).HasMaxLength(36);

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsReturnable)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SerialNo).HasMaxLength(50);
            });

            modelBuilder.Entity<SupportStaffBankDetails>(entity =>
            {
                entity.HasKey(e => e.UserBankId)
                    .HasName("PK__SupportS__2BFF643A867A7169");

                entity.Property(e => e.UserBankId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccountNo).HasMaxLength(36);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AdharNo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BankName).HasMaxLength(36);

                entity.Property(e => e.BranchName).HasMaxLength(36);

                entity.Property(e => e.Ifscode).HasMaxLength(36);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Pano)
                    .HasColumnName("PANO")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SatffAddress)
                    .HasColumnName("satffAddress")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.VendorName)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SupportTktReopen>(entity =>
            {
                entity.HasKey(e => e.PktktReOpenId);

                entity.Property(e => e.PktktReOpenId)
                    .HasColumnName("PKTktReOpenId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActCompletionDate).HasColumnType("datetime");

                entity.Property(e => e.ActivityId).HasMaxLength(36);

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId).HasMaxLength(36);
            });

            modelBuilder.Entity<TaskAuthority>(entity =>
            {
                entity.HasKey(e => e.PktaskAuthId);

                entity.HasIndex(e => new { e.FktaskId, e.FkuserId, e.IsDeleted, e.FkplantId, e.AuthorisedAction })
                    .HasName("FKUserId");

                entity.Property(e => e.PktaskAuthId)
                    .HasColumnName("PKTaskAuthId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AuthorisedAction)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FkbranchId)
                    .HasColumnName("FKBranchId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkplantId)
                    .HasColumnName("FKPlantId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FktaskId)
                    .HasColumnName("FKTaskId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkuserId)
                    .HasColumnName("FKUserId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserGroupId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<TaskAuthorityHistory>(entity =>
            {
                entity.HasKey(e => e.PktaskAuthHstryId);

                entity.Property(e => e.PktaskAuthHstryId)
                    .HasColumnName("PKTaskAuthHstryId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AuthorisedAction)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FktaskAuthId)
                    .IsRequired()
                    .HasColumnName("FKTaskAuthId")
                    .HasMaxLength(50);

                entity.Property(e => e.FktaskId)
                    .HasColumnName("FKTaskId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkuserId)
                    .HasColumnName("FKUserId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserGroupId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<TaskHistory>(entity =>
            {
                entity.HasKey(e => e.PktaskHstryId);

                entity.Property(e => e.PktaskHstryId)
                    .HasColumnName("PKTaskHstryId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DefaultAuth)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkmenuId)
                    .HasColumnName("FKMenuId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkmoduleId)
                    .HasColumnName("FKModuleId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FktaskId)
                    .HasColumnName("FKTaskId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsLock)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ParentTaskId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TaskDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TechnicalName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<TaskMaster>(entity =>
            {
                entity.HasKey(e => e.PktaskId);

                entity.Property(e => e.PktaskId)
                    .HasColumnName("PKTaskId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DefaultAuth)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EncrptTechName)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkmenuId)
                    .HasColumnName("FKMenuId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkmoduleId)
                    .HasColumnName("FKModuleId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsLock)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ParentTaskId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TaskDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TechnicalName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<TaskWiseUserMaster>(entity =>
            {
                entity.HasKey(e => e.PktskUserId);

                entity.Property(e => e.PktskUserId)
                    .HasColumnName("PKTskUserId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FktaskId)
                    .HasColumnName("FKTaskId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkuserMastId)
                    .HasColumnName("FKUserMastId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<TaxAuthority>(entity =>
            {
                entity.HasIndex(e => e.TaxAuthorityId)
                    .HasName("UQ__TaxAuthority__1293BD5E")
                    .IsUnique();

                entity.Property(e => e.TaxAuthorityId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.TaxAuthDesc)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<TaxCalculation>(entity =>
            {
                entity.Property(e => e.TaxCalculationId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BaseAmntPercForTaxCalc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BaseAmount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EffectiveFrom).HasColumnType("datetime");

                entity.Property(e => e.EffectiveUpto).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LineNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MinAmntAllowedForTaxCalc).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Module)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OppositeInvoicedGl)
                    .HasColumnName("OppositeInvoicedGL")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PayableAccount)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivableAccount)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Recoverable).HasDefaultValueSql("((0))");

                entity.Property(e => e.SeqNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TaxCalcId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxClassMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxPc)
                    .HasColumnName("TaxPC")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<TaxCategory>(entity =>
            {
                entity.HasKey(e => e.TaxGroup)
                    .HasName("PK_Tax_Group");

                entity.Property(e => e.TaxGroup)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<TaxClassMaster>(entity =>
            {
                entity.Property(e => e.TaxClassMasterId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EffectiveFrom).HasColumnType("datetime");

                entity.Property(e => e.EffectiveUpto).HasColumnType("datetime");

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Module)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TaxClassCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TaxClassDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<TaxMaster>(entity =>
            {
                entity.Property(e => e.TaxMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ChargeMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PayableAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReceivableAccount)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecoveryPer).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TaxAuthorityId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TaxGroup)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<TaxRateTaxClass>(entity =>
            {
                entity.HasKey(e => e.TaxrateTaxClassMasterId)
                    .HasName("PK__TaxRate___D86B1913AED435D1");

                entity.ToTable("TaxRate_TaxClass");

                entity.Property(e => e.TaxrateTaxClassMasterId)
                    .HasColumnName("Taxrate_TaxClassMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.EffectiveFrom).HasColumnType("datetime");

                entity.Property(e => e.EffectiveTo).HasColumnType("datetime");

                entity.Property(e => e.InFromSeztaxclassid)
                    .HasColumnName("InFromSEZTaxclassid")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.InImportTaxclassid)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.InInterStateTaxclassid)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.InIntraStateTaxclassid)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.InIntraUtTaxclassid)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OpExportTaxclassid)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.OpFromSeztaxclassid)
                    .HasColumnName("OpFromSEZTaxclassid")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.OpInterStateTaxclassid)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.OpIntraStateTaxclassid)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.OpIntraUtTaxclassid)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRate).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<TaxSetOffEntryMaster>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK__TaxSetOffEntryMa__5070F446");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PayableGlid)
                    .HasColumnName("PayableGLID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecdGlid)
                    .HasColumnName("RecdGLID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SetOffCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SetOffPer).HasColumnType("numeric(9, 3)");

                entity.Property(e => e.TaxSetOffInfoId)
                    .HasColumnName("TaxSetOffInfoID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ValidFromDt).HasColumnType("datetime");

                entity.Property(e => e.ValidToDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<TblMst>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK__TblMst__0F975522");

                entity.Property(e => e.RecId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DbmstId)
                    .HasColumnName("DBMstId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TblDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TblMstId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TblName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TblType)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tds16aemailRecords>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK__TDS16AEmailRecords__164452B1");

                entity.ToTable("TDS16AEmailRecords");

                entity.Property(e => e.RecId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmailSentDt).HasColumnType("datetime");

                entity.Property(e => e.EntityCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EntityName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Panno)
                    .HasColumnName("PANNO")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TdsclassMaster>(entity =>
            {
                entity.ToTable("TDSClassMaster");

                entity.Property(e => e.TdsclassMasterId)
                    .HasColumnName("TDSClassMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccountMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Tdscode)
                    .HasColumnName("TDSCode")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Tdsdesc)
                    .HasColumnName("TDSDesc")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TdsinclTx)
                    .HasColumnName("TDSInclTx")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VouMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Tdsdetails>(entity =>
            {
                entity.ToTable("TDSDetails");

                entity.HasIndex(e => e.RecId)
                    .HasName("UQ__TDSDetails__492FC531")
                    .IsUnique();

                entity.Property(e => e.TdsdetailsId)
                    .HasColumnName("TDSDetailsId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AmtRngFrom).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.AmtRngTo).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TdsmasterId)
                    .IsRequired()
                    .HasColumnName("TDSMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Tdsper)
                    .HasColumnName("TDSPer")
                    .HasColumnType("numeric(9, 0)");
            });

            modelBuilder.Entity<Tdsmaster>(entity =>
            {
                entity.ToTable("TDSMaster");

                entity.Property(e => e.TdsmasterId)
                    .HasColumnName("TDSMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.EducationCess).HasColumnType("numeric(9, 3)");

                entity.Property(e => e.EffFrom).HasColumnType("datetime");

                entity.Property(e => e.EffTo).HasColumnType("datetime");

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Section)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Surcharge).HasColumnType("numeric(9, 3)");

                entity.Property(e => e.TdsclassMasterId)
                    .HasColumnName("TDSClassMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Tdsper)
                    .HasColumnName("TDSPer")
                    .HasColumnType("numeric(9, 3)");
            });

            modelBuilder.Entity<TempCartonDetail>(entity =>
            {
                entity.Property(e => e.TempCartonDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BarcodeNo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ShiftNo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TableNo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TempCartonHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempCartonHeader>(entity =>
            {
                entity.Property(e => e.TempCartonHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PacketCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PacketDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PacketQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TestCaseMaster>(entity =>
            {
                entity.HasKey(e => e.PktestId);

                entity.ToTable("TestCase_Master");

                entity.Property(e => e.PktestId)
                    .HasColumnName("PKTestID")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DefectId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExecutionDt).HasColumnType("datetime");

                entity.Property(e => e.ExecutionStatus)
                    .HasColumnName("Execution_status")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ModuleId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PriorityId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TestCaseCode)
                    .HasColumnName("Test_Case_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TestDescription).HasColumnName("Test_description");

                entity.Property(e => e.TestSteps)
                    .HasColumnName("Test_steps")
                    .IsUnicode(false);

                entity.Property(e => e.TesterId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TypeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TestCaseResult>(entity =>
            {
                entity.HasKey(e => e.PkTestCaseResultId);

                entity.ToTable("TestCase_Result");

                entity.Property(e => e.PkTestCaseResultId)
                    .HasColumnName("PK_TestCaseResult_Id")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CauseOfDefect)
                    .HasColumnName("Cause_of_defect")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CycleNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DefectDescription).HasColumnName("Defect_description");

                entity.Property(e => e.DefectEnvironment).HasColumnName("Defect_environment");

                entity.Property(e => e.DefectId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DefectStatus)
                    .HasColumnName("Defect_status")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExecutionStatus)
                    .HasColumnName("Execution_status")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkcyclId)
                    .HasColumnName("FKCyclId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FktestId)
                    .IsRequired()
                    .HasColumnName("FKTestId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ModuleId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PriorityId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Severity)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StepsReproduce)
                    .HasColumnName("Steps_reproduce")
                    .IsUnicode(false);

                entity.Property(e => e.TesterId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TestLibraryDetail>(entity =>
            {
                entity.HasKey(e => e.PktestLibDtlId);

                entity.Property(e => e.PktestLibDtlId)
                    .HasColumnName("PKTestLibDtlId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Comments).HasMaxLength(500);

                entity.Property(e => e.DefectId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExecutionStatus)
                    .HasColumnName("Execution_status")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkfunctionId)
                    .HasColumnName("FKFunctionId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PriorityId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TestDescription).HasColumnName("Test_description");

                entity.Property(e => e.TestSteps)
                    .HasColumnName("Test_steps")
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TestLibraryHeader>(entity =>
            {
                entity.HasKey(e => e.PkfunctionId);

                entity.Property(e => e.PkfunctionId)
                    .HasColumnName("PKFunctionId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<TicketMaterialConsumption>(entity =>
            {
                entity.HasKey(e => e.PkTicketMaterialConsumptionId)
                    .HasName("PK__TicketMa__C54D1234DB2BEA3A");

                entity.Property(e => e.PkTicketMaterialConsumptionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ConsumedQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Isdeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LocationId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Uomid)
                    .HasColumnName("UOMId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TimeReqdMaster>(entity =>
            {
                entity.Property(e => e.TimeReqdMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Modifiedy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TimeReqd)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TimeRequiredPer)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<TimeSheet>(entity =>
            {
                entity.HasIndex(e => e.UserMasterId)
                    .HasName("IdxUMId");

                entity.HasIndex(e => new { e.TimeSheetId, e.EntryDate, e.TimeFrom, e.TimeTo, e.Status, e.Remarks, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.UnitId, e.ActivityId, e.TimeSlotId, e.ProjectId, e.ActivityTypeId, e.BookedHours, e.Rate, e.TotalAmount, e.UserMasterId, e.WorkDate, e.IsDeleted })
                    .HasName("WorkDate");

                entity.HasIndex(e => new { e.TimeSheetId, e.UserMasterId, e.EntryDate, e.TimeFrom, e.TimeTo, e.Status, e.IsDeleted, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.UnitId, e.TimeSlotId, e.ProjectId, e.Remarks, e.ActivityTypeId, e.BookedHours, e.Rate, e.TotalAmount, e.ReportingStatus, e.AssignedCount, e.ActivityId, e.WorkDate })
                    .HasName("ActivityId");

                entity.Property(e => e.TimeSheetId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActionMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address).HasMaxLength(36);

                entity.Property(e => e.AssignedCount)
                    .HasColumnName("Assigned_Count")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.BookedHours)
                    .HasColumnName("Booked_Hours")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ClaimDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.EntryDate).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Latitude).HasMaxLength(36);

                entity.Property(e => e.Longitude).HasMaxLength(36);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Rate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Remarks).HasMaxLength(1000);

                entity.Property(e => e.Status).HasColumnType("numeric(20, 0)");

                entity.Property(e => e.TimeFrom).HasColumnType("datetime");

                entity.Property(e => e.TimeSheetEntryFrmClient)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.TimeSlotId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TimeTo).HasColumnType("datetime");

                entity.Property(e => e.TotalAmount)
                    .HasColumnName("Total_Amount")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UnitId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.WorkDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TimeSlot>(entity =>
            {
                entity.Property(e => e.TimeSlotId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.TimeEnd).HasColumnType("datetime");

                entity.Property(e => e.TimeStart).HasColumnType("datetime");
            });

            modelBuilder.Entity<TimeSlotMaster>(entity =>
            {
                entity.HasKey(e => e.TimeSlotId)
                    .HasName("PK__TimeSlotMaster__03317E3D");

                entity.Property(e => e.TimeSlotId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.TimeSlotDuration)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TimesheetReimbursement>(entity =>
            {
                entity.Property(e => e.TimesheetReimbursementId)
                    .HasColumnName("TimesheetReimbursementID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ClaimDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Distance)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Dt).HasColumnType("date");

                entity.Property(e => e.Exp1).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Exp10).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Exp2).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Exp3).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Exp4).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Exp5).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Exp6).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Exp7).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Exp8).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Exp9).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FromLocation).HasMaxLength(100);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsclientReimbursement)
                    .HasColumnName("ISClientReimbursement")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Mode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Remark).IsUnicode(false);

                entity.Property(e => e.SoheaderId)
                    .HasColumnName("SOHeaderID")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SyncInfo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TimesheetId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ToLocation).HasMaxLength(100);

                entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ToolReturnDetail>(entity =>
            {
                entity.HasKey(e => e.ToolRectDtlId);

                entity.Property(e => e.ToolRectDtlId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BalToReturn).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IssueQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Lotno)
                    .HasColumnName("LOTNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MoheaderId)
                    .IsRequired()
                    .HasColumnName("MOHeaderId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RectDt).HasColumnType("datetime");

                entity.Property(e => e.ToLocation)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ToolId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ToolRectHdrId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ToolReturnHeader>(entity =>
            {
                entity.HasKey(e => e.ToolRetHdrId)
                    .HasName("pk_ToolRetHdrId_pid");

                entity.Property(e => e.ToolRetHdrId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RectDt).HasColumnType("datetime");

                entity.Property(e => e.RectNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Top10WidgetMaster>(entity =>
            {
                entity.HasKey(e => e.Pktop10WidgetMasterId)
                    .HasName("PKTop10WidgetMasterID");

                entity.HasIndex(e => new { e.Pktop10WidgetMasterId, e.FkwidgetId, e.PartyName, e.DueDays, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.Code, e.WidgetCode, e.Balance })
                    .HasName("Code");

                entity.Property(e => e.Pktop10WidgetMasterId)
                    .HasColumnName("PKTop10WidgetMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Balance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkwidgetId).HasColumnName("FKWidgetId");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PartyName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.WidgetCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrackNotification>(entity =>
            {
                entity.HasKey(e => e.PktrackNotifyId);

                entity.Property(e => e.PktrackNotifyId)
                    .HasColumnName("Pktrack_notifyId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FknotifDtlsId)
                    .HasColumnName("FKNotifDtlsId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FlagRead).HasColumnName("flag_read");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MarkDate)
                    .HasColumnName("Mark_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TransAllocationLines>(entity =>
            {
                entity.Property(e => e.TransAllocationLinesId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AdjAccId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AdjUnit)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AllocLineNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AllocLineType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AllocType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AllocateToAdminDiv)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AllocateToSettlmnt)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AllocateToTrans)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ChqNo).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.DebitNoteTransId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DiscAcntId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DiscAmnt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ExchLossGain).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IntAcntId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IntAmnt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LinePayList)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LinePayListLine)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineSourceId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineSourceType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineValFc)
                    .HasColumnName("LineValFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LodgeDepositNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NarrativeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PersonalLgrLineStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TargetDocDt).HasColumnType("datetime");

                entity.Property(e => e.TransHeaderId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransSettlementLinesId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TransAppntLines>(entity =>
            {
                entity.HasKey(e => e.TransAppntLineId)
                    .HasName("PK__TransAppntLines__63449CEF");

                entity.Property(e => e.TransAppntLineId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CostCentreId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LineCurrency)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineFinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineNarrative)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LinePeriodDisSeq)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineSource)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LineVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineValFc)
                    .HasColumnName("LineValFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NarrativeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Percentage).HasColumnType("numeric(9, 5)");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransGllinesId)
                    .HasColumnName("TransGLLinesId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TransApprovalLines>(entity =>
            {
                entity.Property(e => e.TransApprovalLinesId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApprLineNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ApprLineTransPosted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ApprStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ApprUser)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateResponseRecd).HasColumnType("datetime");

                entity.Property(e => e.DtApprReq).HasColumnType("datetime");

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NarrativeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Reason)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SeqCurrency)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SeqDocDate).HasColumnType("datetime");

                entity.Property(e => e.SeqEffDate).HasColumnType("datetime");

                entity.Property(e => e.SeqEntity)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SeqFinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SeqLadger)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SeqOriginUnit)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SeqPeriod)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SeqPeriodDisSeq).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SeqSupplyDate).HasColumnType("datetime");

                entity.Property(e => e.SeqTransNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SeqTransType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransHeaderId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TransCashLines>(entity =>
            {
                entity.HasIndex(e => new { e.TransCashLinesId, e.CashBookVal, e.CashBookValFc, e.ChqNo, e.CheqDate, e.BankRemittanceNo, e.LedgerId, e.LineAccId, e.TransHeaderId })
                    .HasName("IDX_TRANSCASH_TRANSHEADER");

                entity.Property(e => e.TransCashLinesId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AdjType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AllocVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.AllocValFc)
                    .HasColumnName("AllocValFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.BankChargesAppli)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.BankRemittanceNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BankTransType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CashBookVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.CashBookValFc)
                    .HasColumnName("CashBookValFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.CashLineNarrative)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CashLineNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CheqDate).HasColumnType("datetime");

                entity.Property(e => e.ChqNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CurrencyId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ExchangeRt).HasColumnType("decimal(18, 8)");

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FwdCvrMstId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.InTransitStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LedgerId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineAccId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineAccPeriod)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineAccType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineSource)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineSttlmntMethod)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineUnit)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LodgeDepositNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NarrativeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RateAdviceExp)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.RecoDate).HasColumnType("datetime");

                entity.Property(e => e.RecoNarrative)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RecoRef)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecoStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransModesId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TransChargeLine>(entity =>
            {
                entity.HasKey(e => e.TransChargeId)
                    .HasName("PK__TransChargeLine__1392CE8F");

                entity.HasIndex(e => new { e.RecId, e.TransChargeId, e.FinDivId, e.ChrgLineNo, e.ItemCode, e.ItemDesc, e.LineQty, e.LoadedValue, e.LinePrice, e.LineExt, e.LineDiscPer, e.LineDiscVal, e.LineValue, e.LineValueFc, e.LineNarrative, e.AllowSettlementDisc, e.LineUnit, e.LineAccountId, e.LineAccType, e.LineAccPeriod, e.LineApportionmentId, e.SubToWithHolding, e.ItemTaxClassId, e.TaxIndicator, e.TaxTxnType, e.LineItemId, e.AccMethodTo, e.OrderDate, e.OrderLineNo, e.OrderNo, e.WithHoldingMethod, e.WithHoldingMethodId, e.OrigDocDt, e.OrigDocNo, e.LcentryId, e.SourceId, e.SourceType, e.IsAutoGenerated, e.NarrativeId, e.IsDeleted, e.SecId, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.ChargeId, e.TransHeaderId })
                    .HasName("TransHeaderId");

                entity.Property(e => e.TransChargeId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccMethodTo)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AllowSettlementDisc)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ChargeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ChrgLineNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Gstin)
                    .HasColumnName("GSTIN")
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.IsAutoGenerated)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ItemTaxClassId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LcentryId)
                    .HasColumnName("LCEntryId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineAccPeriod)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineAccType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineAccountId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineApportionmentId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineDiscPer).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineDiscVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineExt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineItemId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineNarrative)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LinePrice).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineUnit)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineValueFc)
                    .HasColumnName("LineValueFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LoadedValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NarrativeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.OrderLineNo).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.OrderNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OrigDocDt).HasColumnType("datetime");

                entity.Property(e => e.OrigDocNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SourceType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SubToWithHolding)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TaxIndicator)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxTxnType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransHeaderId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VendorName).IsUnicode(false);

                entity.Property(e => e.WithHoldingMethod)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.WithHoldingMethodId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TransErrLog>(entity =>
            {
                entity.Property(e => e.TransErrLogId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ErrorDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FieldName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PanelDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.TransHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TransGllines>(entity =>
            {
                entity.ToTable("TransGLLines");

                entity.HasIndex(e => new { e.LineAccountId, e.LineVal, e.TransHeaderId })
                    .HasName("RptGLSummarywoc");

                entity.Property(e => e.TransGllinesId)
                    .HasColumnName("TransGLLinesId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccuralRevStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GllineNo)
                    .HasColumnName("GLLineNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LineAccPeriodId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineAccType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineAccountId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineApportionmentId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineCurrency)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineFinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineNarrative)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LinePeriodDisSeq).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.LinePeriodId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineSource)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LineSourceId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineSourceType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineUnit)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LineValFc)
                    .HasColumnName("LineValFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NarrativeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TransHeader>(entity =>
            {
                entity.HasIndex(e => new { e.PersonalLgrValue, e.EntityId })
                    .HasName("EntityId");

                entity.HasIndex(e => new { e.TransNo, e.TransStatus })
                    .HasName("IDX_TRNHDRTrNoStatu");

                entity.HasIndex(e => new { e.EffDate, e.EntityId, e.TransStatus, e.PersonalLgrValue })
                    .HasName("TransStatus");

                entity.HasIndex(e => new { e.TransNo, e.EffDate, e.PartyId, e.TransStatus, e.PersonalLgrValue })
                    .HasName("AllocationCreditorsReport");

                entity.HasIndex(e => new { e.ExRate, e.PartyId, e.PartyName, e.TransHeaderId, e.TransNo, e.TransStatus, e.EffDate })
                    .HasName("Idx_DebtorsAgingRpt2");

                entity.HasIndex(e => new { e.PersonalLgrValue, e.TransHeaderId, e.TransNo, e.TransStatus, e.EffDate, e.PartyId, e.CashValue })
                    .HasName("Idx_DebtorsAgingRpt1");

                entity.HasIndex(e => new { e.EffDate, e.FinDivId, e.PartyId, e.SalesEngg, e.TransHeaderId, e.TransNo, e.TransStatus, e.VouMasterId })
                    .HasName("IDX_TrnHdr_VouMstId");

                entity.HasIndex(e => new { e.EffDate, e.FinDivId, e.PartyId, e.SalesEngg, e.TransHeaderId, e.TransNo, e.VouMasterId, e.TransStatus })
                    .HasName("IDX_TrnHdr_Status");

                entity.HasIndex(e => new { e.RecId, e.TransHeaderId, e.FinDivId, e.TransNo, e.TransType, e.TransGlid, e.DocDate, e.SupplyDate, e.PeriodMasterId, e.PeriodDisplaySeq, e.OmitPeriodAccural, e.PartyId, e.PartyName, e.TransEntity, e.TransAccType, e.IdTradingPartnerId, e.IdRefNo, e.JournalTypePosted, e.JournalNoPosted, e.JournalNoReassign, e.JournalTypeReassign, e.TaxTransType, e.TheirRef, e.BillInvNo, e.BillInvDate, e.Boeno, e.Boedate, e.Lcno, e.Lcdate, e.FwdCvrNo, e.FwdCvrDt, e.InwRemNo, e.TransContact, e.ShipToId, e.ShipToRef, e.ApplyTax, e.Contingentliability, e.PersonalLgrValue, e.PersonalLgrValueFc, e.CashValue, e.CashValueFc, e.LinesValue, e.LinesValueFc, e.Glvalue, e.GlvalueFc, e.AllocationBal, e.AllocationBalFc, e.SettlementBal, e.SettlementBalFc, e.TaxValue, e.TaxValueFc, e.CurrencyId, e.ExRate, e.MultiDivider, e.ExRateOverride, e.BatchId, e.OriginUnit, e.OriginUser, e.ApportionMasterId, e.TransSource, e.LastLineNo, e.LastAttLineNo, e.TransNarrative, e.TransStatus, e.IsTransPosted, e.IsTransInUse, e.UnpostedAlloc, e.IsRepeatingTrans, e.IgnoreWarnings, e.ArchiveStatus, e.TransApprovalStatus, e.IsOneTimeAccTrans, e.LastChgFromSys, e.NarrativeId, e.InstallMethodId, e.NoteMethodId, e.NoteTransNo, e.NoteDueDt, e.WithholdingMethodId, e.PocurrencyId, e.PoexRate, e.PomultiDivider, e.PoexRateOverride, e.PostingSeqNo, e.SettlementVal, e.SettlementValFc, e.SettlementBalOs, e.GlpostingTrans, e.DisputedTransaction, e.DisputeReason, e.PaymentSttlTermsId, e.PayeeName, e.RefTransHeaderId, e.RefTransHeaderType, e.RefTransHeaderInfo, e.GateEntryNo, e.GateEntryDt, e.CapexFormMasterId, e.IsDeleted, e.SecId, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.SalesEngg, e.IsTemplate, e.AmtDistributed, e.VouMasterId, e.EntityId, e.EffDate })
                    .HasName("TransMasterId");

                entity.Property(e => e.TransHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AllocationBal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.AllocationBalFc)
                    .HasColumnName("AllocationBalFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.AmtDistributed).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ApplyTax)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ApportionMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ArchiveStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BatchId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BillInvDate).HasColumnType("datetime");

                entity.Property(e => e.BillInvNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Boedate)
                    .HasColumnName("BOEDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Boeno)
                    .HasColumnName("BOENo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CapexFormMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CashValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.CashValueFc)
                    .HasColumnName("CashValueFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Contingentliability)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CurrencyId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DisputeReason)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DisputedTransaction)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DocDate).HasColumnType("datetime");

                entity.Property(e => e.EffDate).HasColumnType("datetime");

                entity.Property(e => e.EntityId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ExRate).HasColumnType("numeric(18, 8)");

                entity.Property(e => e.ExRateOverride).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FwdCvrDt).HasColumnType("datetime");

                entity.Property(e => e.FwdCvrNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GateEntryDt).HasColumnType("datetime");

                entity.Property(e => e.GateEntryNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GlpostingTrans)
                    .HasColumnName("GLPostingTrans")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Glvalue)
                    .HasColumnName("GLValue")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.GlvalueFc)
                    .HasColumnName("GLValueFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.IdRefNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IdTradingPartnerId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IgnoreWarnings)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InstallMethodId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.InwRemNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsOneTimeAccTrans)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsRepeatingTrans)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsTemplate)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsTransInUse)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsTransPosted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.JournalNoPosted)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.JournalNoReassign)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.JournalTypePosted)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.JournalTypeReassign)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastAttLineNo).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.LastChgFromSys)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LastLineNo).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.Lcdate)
                    .HasColumnName("LCDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Lcno)
                    .HasColumnName("LCNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LinesValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.LinesValueFc)
                    .HasColumnName("LinesValueFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MultiDivider).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NarrativeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NoteDueDt).HasColumnType("datetime");

                entity.Property(e => e.NoteMethodId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NoteTransNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OmitPeriodAccural)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.OriginUnit)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OriginUser)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PartyId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PartyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeName)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentSttlTermsId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodDisplaySeq).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.PeriodMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PersonalLgrValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PersonalLgrValueFc)
                    .HasColumnName("PersonalLgrValueFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PocurrencyId)
                    .HasColumnName("POCurrencyId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PoexRate)
                    .HasColumnName("POExRate")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PoexRateOverride)
                    .HasColumnName("POExRateOverride")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PomultiDivider)
                    .HasColumnName("POMultiDivider")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PostingSeqNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(10, 0)");

                entity.Property(e => e.RecurrHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RefTransHeaderId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefTransHeaderInfo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RefTransHeaderType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SalesEngg)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SettlementBal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SettlementBalFc)
                    .HasColumnName("SettlementBalFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SettlementBalOs)
                    .HasColumnName("SettlementBalOS")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SettlementVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SettlementValFc)
                    .HasColumnName("SettlementValFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ShipToId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToRef)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SourceType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SupplyDate).HasColumnType("datetime");

                entity.Property(e => e.TaxTransType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxValueFc)
                    .HasColumnName("TaxValueFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TheirRef)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransAccType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransApprovalStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransContact)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransEntity)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransGlid)
                    .HasColumnName("TransGLId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransNarrative)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TransNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransSource)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UnpostedAlloc)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.VouMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.WithholdingMethodId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TransHistory>(entity =>
            {
                entity.Property(e => e.TransHistoryId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BatchNo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeptMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Fifo).HasColumnType("datetime");

                entity.Property(e => e.FinYearId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LocStat)
                    .HasColumnName("locStat")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.LocationMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NewLocImpQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NewLocImpVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NewLocationQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NewLocationVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NewStock).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NewSupplierQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NewSupplierVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NewVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NewWarehouseQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.NewWarehouseVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PrevStock).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PrevVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Reason)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ref)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SaleRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Sqty)
                    .HasColumnName("SQty")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TransAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TransCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TransDt).HasColumnType("datetime");

                entity.Property(e => e.TransKey)
                    .HasMaxLength(160)
                    .IsUnicode(false);

                entity.Property(e => e.TransRate).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TransSettlementLines>(entity =>
            {
                entity.HasIndex(e => new { e.SttlmntVal, e.SttlmntBalOs, e.TransHeaderId })
                    .HasName("AllocationCreditorsRpt");

                entity.Property(e => e.TransSettlementLinesId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CurrContractId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DateSettled).HasColumnType("datetime");

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.InstallIntAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.InstallIntAmtFc)
                    .HasColumnName("InstallIntAmtFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.InstallPrincipalAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.InstallPrincipalAmtFc)
                    .HasColumnName("InstallPrincipalAmtFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LedgerId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LetterListId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LetterTypeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineNarrative)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LineSettled)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NarrativeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NoteListFinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NoteListId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NoteListLineNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NoteMethodId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NoteTransNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PartyId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentListFinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentListId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentListLineNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PersonalLgrLineStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PrevNoteLetters)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Reason)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StlLineDateOfDoc).HasColumnType("datetime");

                entity.Property(e => e.SttlmntBalOs)
                    .HasColumnName("SttlmntBalOS")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SttlmntBalOsfc)
                    .HasColumnName("SttlmntBalOSFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SttlmntDate).HasColumnType("datetime");

                entity.Property(e => e.SttlmntDiscBase)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SttlmntLineNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SttlmntLineSource)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SttlmntLineTranNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SttlmntMethodId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SttlmntStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SttlmntTermsId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SttlmntVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SttlmntValFc)
                    .HasColumnName("SttlmntValFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SttlmntValGross).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TransHeaderId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TransTaxLines>(entity =>
            {
                entity.Property(e => e.TransTaxLinesId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AdjAccId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CashDiscAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.CashDiscPer).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.ChargeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CompTaxUplifTaxId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CompTaxUplift).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.CompTaxUpliftResult).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.DiscAccId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EcmemoTax)
                    .HasColumnName("ECMemoTax")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.EffTaxRate).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IncludeTaxInCashDisc)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InfoOnlyTax)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.InvTaxSuffix)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsTaxInvoiced)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemTaxClassId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LineTaxRate).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.MemoLiabRecAccId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MemoOffsetAccId)
                    .HasColumnName("memoOffsetAccId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.NarrativeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NonRecoVataccId)
                    .HasColumnName("NonRecoVATAccId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OrderNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.OrderQty).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OriginChrgAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.OriginTaxBase)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.RecoTaxAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RecoTaxBaseAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToSuffix)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SpecialChargeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxAccId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxAdjForCashDisc)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TaxAmt).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxAmtFc)
                    .HasColumnName("TaxAmtFC")
                    .HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxBaseAmtSub)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxCodeResultId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxEffDt).HasColumnType("datetime");

                entity.Property(e => e.TaxExclPrice).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxGroupCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxInPriceCalcType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TaxInclPrice).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxIndicator)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxLineNarrative)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TaxLineNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxLineSource)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TaxLineTaxableVal).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxPercent).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TaxRateDerived)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRateMethod)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRateSub)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRecoPer).HasColumnType("numeric(9, 4)");

                entity.Property(e => e.TaxSeqNo).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.TaxTxnType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransChargeLineId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransHeaderId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Uomid)
                    .HasColumnName("UOMId")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UseTax)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.VendorId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.WriteOffAccId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TransTypeList>(entity =>
            {
                entity.Property(e => e.TransTypeListId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CodeDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QtyEffect).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.StatCd)
                    .HasColumnName("StatCD")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TransCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TransporterCall>(entity =>
            {
                entity.Property(e => e.TransporterCallId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Consignee)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Destination)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ReqDtTm).HasColumnType("datetime");

                entity.Property(e => e.Smsstatus)
                    .HasColumnName("SMSStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Transporter)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.VehicleType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Vr)
                    .HasColumnName("VR")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TransporterMaster>(entity =>
            {
                entity.Property(e => e.TransporterMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Awbno)
                    .HasColumnName("AWBNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ForwarderMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.InsuranceCompanyId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PinCode)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Reftype)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Sms)
                    .HasColumnName("SMS")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransporterName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<TrnwiseDocAppr>(entity =>
            {
                entity.HasKey(e => e.DocApprId);

                entity.Property(e => e.DocApprId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ApprDt).HasColumnType("datetime");

                entity.Property(e => e.ApprStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Approver)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ReqDt).HasColumnType("datetime");

                entity.Property(e => e.Requestor)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Udfmaster>(entity =>
            {
                entity.ToTable("UDFMaster");

                entity.Property(e => e.UdfmasterId)
                    .HasColumnName("UDFMasterId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AssemblyPath)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ClassName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FunctionDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FunctionName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ReturnType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Udfcode)
                    .IsRequired()
                    .HasColumnName("UDFCode")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Udfdesc)
                    .HasColumnName("UDFDesc")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UnitMaster>(entity =>
            {
                entity.HasKey(e => e.UnitId);

                entity.HasIndex(e => new { e.UnitId, e.StartDate, e.DueDate, e.EndDate, e.Priority, e.UserLoginId, e.Active, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.Days, e.Hours, e.IssuedTo, e.BillingAmt, e.UnitTypeMasterId, e.ActualStartDate, e.ActualEndDate, e.IsDefaultUnit, e.UnitName, e.UnitDesc, e.Remarks, e.ModuleId, e.IsDeleted })
                    .HasName("ModuleId");

                entity.HasIndex(e => new { e.ModuleId, e.UnitName, e.UnitDesc, e.StartDate, e.DueDate, e.EndDate, e.Priority, e.UserLoginId, e.Remarks, e.Active, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.Days, e.Hours, e.IssuedTo, e.BillingAmt, e.UnitTypeMasterId, e.ActualStartDate, e.ActualEndDate, e.IsDefaultUnit, e.ClientId, e.UnitId, e.IsDeleted })
                    .HasName("UnitId");

                entity.Property(e => e.UnitId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Active)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BillingAmt).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ClientId).HasMaxLength(50);

                entity.Property(e => e.DueDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.IsDefaultUnit)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IssuedTo)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ModuleId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Prefix)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Priority).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.SourceId)
                    .HasColumnName("sourceId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UnitDesc).HasMaxLength(1000);

                entity.Property(e => e.UnitName).HasMaxLength(500);

                entity.Property(e => e.UnitTypeMasterId).HasMaxLength(36);

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UnitTypeMaster>(entity =>
            {
                entity.HasKey(e => e.UnitTypeId);

                entity.Property(e => e.UnitTypeId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UnitType).HasMaxLength(100);

                entity.Property(e => e.WorkflowId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Uomconversion>(entity =>
            {
                entity.ToTable("UOMConversion");

                entity.Property(e => e.UomconversionId)
                    .HasColumnName("UOMConversionId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ConvFactor).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Uomfrom)
                    .HasColumnName("UOMFrom")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Uomto)
                    .HasColumnName("UOMTo")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Uommaster>(entity =>
            {
                entity.ToTable("UOMMaster");

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Uomcode)
                    .HasColumnName("UOMCode")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Uomdesc)
                    .HasColumnName("UOMDesc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Uomdigit).HasColumnName("UOMDigit");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<UserCategoryMaster>(entity =>
            {
                entity.HasKey(e => e.PkuserCategoryId);

                entity.Property(e => e.PkuserCategoryId)
                    .HasColumnName("PKUserCategoryId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CategoryDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<UserClass>(entity =>
            {
                entity.Property(e => e.UserClassId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.UserClassName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserClassRelation>(entity =>
            {
                entity.HasKey(e => e.UserClassrelId);

                entity.Property(e => e.UserClassrelId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.UserClassId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserGroupId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserContactInfo>(entity =>
            {
                entity.HasKey(e => e.PkuserContactId);

                entity.Property(e => e.PkuserContactId).HasColumnName("PKUserContactId");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.DeviceRegId)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Moblieno)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserGroup>(entity =>
            {
                entity.HasKey(e => e.PkuserGroupId)
                    .HasName("PK_UserGroupMaster");

                entity.Property(e => e.PkuserGroupId)
                    .HasColumnName("PKUserGroupId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserGroupName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<UserGroupOld>(entity =>
            {
                entity.HasKey(e => e.UserGroupId)
                    .HasName("PK__UserGroup__4D2A7347");

                entity.ToTable("UserGroup_old");

                entity.Property(e => e.UserGroupId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Remarks)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserGroupName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserGroupRelation>(entity =>
            {
                entity.HasKey(e => e.PkuserGroupRelationId)
                    .HasName("PK_UserGroupRelation_1");

                entity.Property(e => e.PkuserGroupRelationId)
                    .HasColumnName("PKUserGroupRelationId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserGroupId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserPrefOrder).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<UserGroupRelationOld>(entity =>
            {
                entity.HasKey(e => e.UserGroupRelationId)
                    .HasName("PK__UserGroupRelatio__52E34C9D");

                entity.ToTable("UserGroupRelation_old");

                entity.Property(e => e.UserGroupRelationId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserGroupId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserMasterId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserPrefOrder).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<UserHistory>(entity =>
            {
                entity.HasKey(e => e.PkuserHstryId);

                entity.Property(e => e.PkuserHstryId)
                    .HasColumnName("PKUserHstryId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeptMasterId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DesignationId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Dob)
                    .HasColumnName("DOB")
                    .HasColumnType("datetime");

                entity.Property(e => e.Doj)
                    .HasColumnName("DOJ")
                    .HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmpId)
                    .HasColumnName("EmpID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ExtNo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FailedLoginAttempt).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkuserCategoryId)
                    .HasColumnName("FKUserCategoryId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkuserMasterId)
                    .HasColumnName("FKUserMasterId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsCompleteRight)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsReportingUsingExcel)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsuprofileExpire)
                    .HasColumnName("ISUProfileExpire")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LastLoginDt).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LocationId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MembershipNo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PswModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ReportingTo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UprofileExpDate)
                    .HasColumnName("UProfileExpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserLeaveSetting>(entity =>
            {
                entity.HasKey(e => e.LeaveSettingId);

                entity.Property(e => e.LeaveSettingId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.BalanceClSl)
                    .HasColumnName("Balance_CL_SL")
                    .HasColumnType("numeric(2, 0)");

                entity.Property(e => e.BalancePl)
                    .HasColumnName("Balance_PL")
                    .HasColumnType("numeric(2, 0)");

                entity.Property(e => e.ClSl)
                    .HasColumnName("CL_SL")
                    .HasColumnType("numeric(2, 0)");

                entity.Property(e => e.Fromdate).HasColumnType("datetime");

                entity.Property(e => e.Lwp)
                    .HasColumnName("LWP")
                    .HasColumnType("numeric(2, 0)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Pl)
                    .HasColumnName("PL")
                    .HasColumnType("numeric(2, 0)");

                entity.Property(e => e.Todate).HasColumnType("datetime");

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserMaster>(entity =>
            {
                entity.HasIndex(e => e.UserMasterId)
                    .HasName("Usermasterid");

                entity.HasIndex(e => new { e.UserLoginId, e.IsActive })
                    .HasName("IDX_UMIsActive");

                entity.HasIndex(e => new { e.UserMasterId, e.UserName, e.IsActive, e.IsDeleted, e.SeptDate })
                    .HasName("<UserMasterId, UserName,>");

                entity.HasIndex(e => new { e.UserMasterId, e.UserName, e.IsActive, e.IsDeleted, e.SeptDate, e.IsHrexecutive })
                    .HasName("<UserMasterId, IsHRExecutive,>");

                entity.HasIndex(e => new { e.UserMasterId, e.UserName, e.ReportingTo, e.PlantMasterId, e.Crmcategory, e.SeptDate })
                    .HasName("CRMCategory");

                entity.HasIndex(e => new { e.UserMasterId, e.UserLoginId, e.UserName, e.DeptMasterId, e.Email, e.Mobile, e.ReportingTo, e.DesignationId, e.PlantMasterId, e.Crmcategory, e.CrmnoofDays, e.Active, e.IsActive, e.IsDeleted, e.SeptDate })
                    .HasName("<IsActive>");

                entity.HasIndex(e => new { e.UserMasterId, e.UserLoginId, e.UserName, e.Title, e.DeptMasterId, e.Email, e.Mobile, e.ExtNo, e.LocationId, e.Phone, e.Dob, e.Doj, e.IsActive, e.IsReportingUsingExcel, e.DesignationId, e.EmpId, e.FirstName, e.LastName, e.IsuprofileExpire, e.UprofileExpDate, e.PlantMasterId, e.ActvDactvDt, e.Crmcode, e.Crmcategory, e.CrmnoofDays, e.PswModifiedDt, e.LastLoginDt, e.IsDisabled, e.IsDeleted, e.IsCompleteRight, e.AllowEditingDays, e.MiddleName, e.IsClientContact, e.Active, e.Gender, e.IsSysUser, e.MobileActive, e.RegularWkoff, e.AlternetWkOff, e.AlternetWkOffVal, e.EffectLeaveDate, e.IsBuyer, e.SeptDate, e.InTime, e.OutTime, e.InOutFlg, e.FkShiftMasterId, e.IsAttendanceRecordMandatory, e.ConsiderWeeklyOff, e.IsIntDeptEmp, e.ReportingTo })
                    .HasName("ReportingTo");

                entity.HasIndex(e => new { e.UserMasterId, e.UserLoginId, e.Title, e.UserPassword, e.HintQuestion, e.Answer, e.DeptMasterId, e.Email, e.Mobile, e.ExtNo, e.LocationId, e.ReportingTo, e.Phone, e.Dob, e.Doj, e.IsActive, e.IsReportingUsingExcel, e.DesignationId, e.EmpId, e.FirstName, e.LastName, e.IsuprofileExpire, e.UprofileExpDate, e.PlantMasterId, e.ActvDactvDt, e.Crmcode, e.Crmcategory, e.CrmnoofDays, e.PswModifiedDt, e.LastLoginDt, e.IsDisabled, e.FailedLoginAttempt, e.CreationLevel, e.UserLevel, e.IsDeleted, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.IsCompleteRight, e.AllowEditingDays, e.MiddleName, e.ChangePass1stLogin, e.IsClientContact, e.Active, e.Gender, e.IsSysUser, e.MobileActive, e.RegularWkoff, e.AlternetWkOff, e.AlternetWkOffVal, e.EffectLeaveDate, e.IsBuyer, e.SeptDate, e.InTime, e.OutTime, e.InOutFlg, e.FkShiftMasterId, e.IsAttendanceRecordMandatory, e.ConsiderWeeklyOff, e.IsIntDeptEmp, e.UserName })
                    .HasName("UserName");

                entity.HasIndex(e => new { e.UserMasterId, e.UserName, e.Title, e.UserPassword, e.HintQuestion, e.Answer, e.DeptMasterId, e.Email, e.Mobile, e.ExtNo, e.LocationId, e.ReportingTo, e.Phone, e.Dob, e.Doj, e.IsActive, e.IsReportingUsingExcel, e.DesignationId, e.EmpId, e.FirstName, e.LastName, e.IsuprofileExpire, e.UprofileExpDate, e.PlantMasterId, e.ActvDactvDt, e.Crmcode, e.Crmcategory, e.CrmnoofDays, e.PswModifiedDt, e.LastLoginDt, e.IsDisabled, e.FailedLoginAttempt, e.CreationLevel, e.UserLevel, e.IsDeleted, e.AddedBy, e.AddedDt, e.ModifiedBy, e.ModifiedDt, e.IsCompleteRight, e.AllowEditingDays, e.MiddleName, e.ChangePass1stLogin, e.IsClientContact, e.Active, e.Gender, e.IsSysUser, e.MobileActive, e.RegularWkoff, e.AlternetWkOff, e.AlternetWkOffVal, e.EffectLeaveDate, e.IsBuyer, e.SeptDate, e.InTime, e.OutTime, e.InOutFlg, e.FkShiftMasterId, e.IsAttendanceRecordMandatory, e.ConsiderWeeklyOff, e.IsIntDeptEmp, e.UserLoginId })
                    .HasName("UserLoginId");

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Aadhaar)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.ActvDactvDt).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AllowUsrTimeSlotHrs)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.AlternetWkOff)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((7))");

                entity.Property(e => e.AlternetWkOffVal)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Answer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConsiderWeeklyOff)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('P')");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Crmcategory)
                    .HasColumnName("CRMCategory")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Crmcode)
                    .HasColumnName("CRMCode")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CrmnoofDays).HasColumnName("CRMNoofDays");

                entity.Property(e => e.DeptMasterId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DesignationId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dob)
                    .HasColumnName("DOB")
                    .HasColumnType("datetime");

                entity.Property(e => e.Doj)
                    .HasColumnName("DOJ")
                    .HasColumnType("datetime");

                entity.Property(e => e.EffectLeaveDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmpId)
                    .HasColumnName("EmpID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ExtNo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FailedLoginAttempt).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkEmpStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FkShiftMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('2')");

                entity.Property(e => e.FkuserCategoryId)
                    .HasColumnName("FKUserCategoryId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.HintQuestion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InOutFlg)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.InTime)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('9:30 AM')");

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsAttendanceRecordMandatory)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.IsBus)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IsBuyer).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsCompleteRight)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsExternalUser)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsHrexecutive).HasColumnName("IsHRExecutive");

                entity.Property(e => e.IsIntDeptEmp).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsReportingUsingExcel)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsSysUser).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsdefaultUser).HasColumnName("isdefaultUser");

                entity.Property(e => e.IsuprofileExpire)
                    .HasColumnName("ISUProfileExpire")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LastLoginDt).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LocationId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MembershipNo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MobileActive).HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OutTime)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('6:30 PM')");

                entity.Property(e => e.Pan)
                    .HasColumnName("PAN")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PerCity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PerCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PerCountry)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PerState)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pfno)
                    .HasColumnName("PFNo")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PreCity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PreCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PreCountry)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PreState)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PswModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RegularWkoff)
                    .HasColumnName("RegularWKOff")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ReportingTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SameAsPresent)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.SeptDate).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UprofileExpDate)
                    .HasColumnName("UProfileExpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.UseShift)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserLoginId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserPassword)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserPhotos>(entity =>
            {
                entity.HasKey(e => e.PkphotoId);

                entity.Property(e => e.PkphotoId)
                    .HasColumnName("PKPhotoId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FkuserId)
                    .HasColumnName("FKUserId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FtpuserPath)
                    .HasColumnName("FTPUserPath")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserSetUp>(entity =>
            {
                entity.Property(e => e.UserSetUpId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.LunchTime)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LunchTimeFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.LunchTimeTo).HasColumnType("smalldatetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.TeaTime)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TeaTimeFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.TeaTimeTo).HasColumnType("smalldatetime");

                entity.Property(e => e.TimeFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.TimeIncrement).HasColumnType("smalldatetime");

                entity.Property(e => e.TimeTo).HasColumnType("smalldatetime");

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserSetting>(entity =>
            {
                entity.HasKey(e => e.PksettingId);

                entity.Property(e => e.PksettingId)
                    .HasColumnName("PKSettingId")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.DelegateId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkfunctionId)
                    .HasColumnName("FKFunctionId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkprojectId)
                    .HasColumnName("FKProjectId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkuserMasterId)
                    .HasColumnName("FKUserMasterId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TimeIncrementInMinutes).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.UserApplicationTheme)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserSettingTrail>(entity =>
            {
                entity.HasKey(e => e.PksettingTrailId);

                entity.Property(e => e.PksettingTrailId)
                    .HasColumnName("PKSettingTrailId")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CurrentDelegateId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkfunctionId)
                    .HasColumnName("FKFunctionId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkprojectId)
                    .HasColumnName("FKProjectId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkuserMasterId)
                    .HasColumnName("FKUserMasterId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PksettingId)
                    .HasColumnName("PKSettingId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PreviousDelegateId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TimeIncrementInMinutes).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.UserPassword).IsUnicode(false);

                entity.Property(e => e.WayOfCommunication)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserSkillApproval>(entity =>
            {
                entity.HasKey(e => e.PkuserSkillApprId);

                entity.Property(e => e.PkuserSkillApprId)
                    .HasColumnName("PKUserSkillApprId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkskillId)
                    .HasColumnName("FKSkillId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkuserMasterId)
                    .HasColumnName("FKUserMasterId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastRating)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RatingRequired)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserSkillTransaction>(entity =>
            {
                entity.HasKey(e => e.PkuserSkillTrancId);

                entity.Property(e => e.PkuserSkillTrancId)
                    .HasColumnName("PKUserSkillTrancId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FkskillId)
                    .HasColumnName("FKSkillId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkuserMasterId)
                    .HasColumnName("FKUserMasterId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Rating)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserTarget>(entity =>
            {
                entity.HasKey(e => e.UserMasterId);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Answer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeptMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Designation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dob)
                    .HasColumnName("DOB")
                    .HasColumnType("datetime");

                entity.Property(e => e.Doj)
                    .HasColumnName("DOJ")
                    .HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExtNo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.HighestQual)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HintQuestion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsAdmin)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsReportingUsingExcel)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LocationId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PhoneNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserLoginId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserPassword)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserWidgetCombination>(entity =>
            {
                entity.HasKey(e => e.UserWidComId);

                entity.Property(e => e.UserWidComId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Position)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SequenceNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.WidgetId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserWiseActivityPlanner>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.Property(e => e.RecordId).ValueGeneratedNever();

                entity.Property(e => e.ActivityAssignmentRemark)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ActivityName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsLeaveTaken)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LocationName).HasMaxLength(10);

                entity.Property(e => e.ProjectName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserLoginId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserWiseSkillSet>(entity =>
            {
                entity.HasKey(e => e.PkuesrWiseSkillId);

                entity.Property(e => e.PkuesrWiseSkillId)
                    .HasColumnName("PKUesrWiseSkillId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FkskillId)
                    .HasColumnName("FKSkillId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FkuserMasterId)
                    .HasColumnName("FKUserMasterId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Rating)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserWiseWeeklyOff>(entity =>
            {
                entity.HasKey(e => e.PkuserWeeklOffId);

                entity.Property(e => e.PkuserWeeklOffId)
                    .HasColumnName("PKUserWeeklOffId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FkuserId)
                    .HasColumnName("FKUserId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.WeeklyOff)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UsrCtrlMaster>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK__UsrCtrlMaster__14270015");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.AssembyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExecutionString)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UsrCtrlMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UsrCtrlName)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UsrCtrlProp>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK__UsrCtrlProp__160F4887");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.AllowedValues)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultPropVal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PropName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UsrCtrlMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UsrCtrlPropId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VatretentionEntry>(entity =>
            {
                entity.ToTable("VATRetentionEntry");

                entity.Property(e => e.VatretentionEntryId)
                    .HasColumnName("VATRetentionEntryId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FinDivId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsSetOff)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.RetPer).HasColumnType("numeric(9, 3)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VehicleMaster>(entity =>
            {
                entity.Property(e => e.VehicleMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.DockInTime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DockOutTime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.TransporterCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransporterCodeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VehicleInTime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VehicleNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VehicleOutTime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VehicleType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VehicleVolume).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<VehicleTypeMaster>(entity =>
            {
                entity.Property(e => e.VehicleTypeMasterId)
                    .HasColumnName("VehicleTypeMasterID")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.VehicleType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VendorContractChargeDetail>(entity =>
            {
                entity.Property(e => e.VendorContractChargeDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CalcMethod)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ChargeAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ChrgMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.QtyValue).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.RatePercent).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TaxClassMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.TotalAmount).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.VendorContractHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VendorContractDetail>(entity =>
            {
                entity.Property(e => e.VendorContractDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CurrencyMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Rate)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UommasterId)
                    .HasColumnName("UOMMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.VendorContractHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VendorContractHeader>(entity =>
            {
                entity.Property(e => e.VendorContractHeaderId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comments)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ConsigneeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContractDt).HasColumnType("datetime");

                entity.Property(e => e.ContractNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DeliverTermsId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Destination)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExchRate).HasColumnType("numeric(30, 0)");

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InsuranceDtl)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MethodOfPackaging)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModeOfTransport)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OrderTypeMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.PayTermId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Ref)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SpecialCondition)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValidFrom).HasColumnType("datetime");

                entity.Property(e => e.ValidTo).HasColumnType("datetime");

                entity.Property(e => e.WareHouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.WarrantyTerms)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VendorContractQtyRateBreakUp>(entity =>
            {
                entity.Property(e => e.VendorContractQtyRateBreakUpId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.QtyUpto)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Rate)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.VendorContractDetailId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VenueMaster>(entity =>
            {
                entity.HasKey(e => e.PkvenueId);

                entity.Property(e => e.PkvenueId)
                    .HasColumnName("PKVenueId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Venue).HasMaxLength(300);
            });

            modelBuilder.Entity<VersionMaster>(entity =>
            {
                entity.Property(e => e.VersionMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Features).IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Version)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ViConfiguration>(entity =>
            {
                entity.ToTable("VI_Configuration");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FieldDesc).HasMaxLength(50);
            });

            modelBuilder.Entity<ViRequestLogMaster>(entity =>
            {
                entity.HasKey(e => e.RequestId);

                entity.ToTable("VI_RequestLogMaster");

                entity.Property(e => e.RequestId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.InitiatedBy).HasMaxLength(250);

                entity.Property(e => e.IsApproved)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsAssigned)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ProjectId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.ReqDesc).HasMaxLength(250);

                entity.Property(e => e.ReqDt).HasColumnType("datetime");

                entity.Property(e => e.ReqTypeId).HasColumnType("numeric(9, 0)");
            });

            modelBuilder.Entity<VouExPt>(entity =>
            {
                entity.Property(e => e.VouExPtId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.EventName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExPtMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VouMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VouMaster>(entity =>
            {
                entity.Property(e => e.VouMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ApprDefCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AutoReco)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CurrencyCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsForeignCur)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VouDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.VouName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VouPrintId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VouPanel>(entity =>
            {
                entity.Property(e => e.VouPanelId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CrDr)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IsMandatory)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsSysGenerated)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsVisible)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LinesAllowed).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.ManualAllowed)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PanelMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VouMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VouPnlDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VouPanelField>(entity =>
            {
                entity.Property(e => e.VouPanelFieldId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AllowChange)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultValue)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EditableAfterPost)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsMandatory)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsVisible)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PanelFieldId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VouPanelId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VouPnlFldDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VouPanelFieldValue>(entity =>
            {
                entity.Property(e => e.VouPanelFieldValueId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.PropType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PropVal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UsrCtrlPropId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VouPanelFieldId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VouPeriodDetail>(entity =>
            {
                entity.Property(e => e.VouPeriodDetailId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PeriodMasterId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.VouMasterId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VouPrintProg>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.Property(e => e.RecId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.AssemblyName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExecutionString)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.VouPrintId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VouPrintProgDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VouRecuReq>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_MRPReq");

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.EveryMonthCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsNoEndDate).HasMaxLength(10);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.MonthlyDay)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MonthlyDayNo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MonthlyMonth).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.MonthlyWeek)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoOfOccur).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Occurrences).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RecEndDate).HasColumnType("datetime");

                entity.Property(e => e.RecStartDate).HasColumnType("datetime");

                entity.Property(e => e.RecurDaysCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RecurWeeksCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RecurYearCount).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TransHeaderId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TypeOfPeriod)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VouMasterId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VouRecurrId)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyDay)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyMonth)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyMonthName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearlyWeek)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VouTransHist>(entity =>
            {
                entity.Property(e => e.VouTransHistId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ChangesDetails)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PanelName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VouUcprop>(entity =>
            {
                entity.ToTable("VouUCProp");

                entity.Property(e => e.VouUcpropId)
                    .HasColumnName("VouUCPropId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.DefDispVal)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DefaultPropVal)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RecId).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.UsrCtrlPropId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.VouPanelFieldId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VsApplErpmenu1>(entity =>
            {
                entity.HasKey(e => e.MenuId);

                entity.ToTable("VsApplERPMenu1");

                entity.Property(e => e.MenuId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AssemblyName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CheckPreLoadCondition)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DocType)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Erpmodule)
                    .HasColumnName("ERPModule")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Executable)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ExecutionString)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IconId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IconImg).HasColumnType("image");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MenuCode)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.MenuCommand)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MenuDesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MenuShortCut)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PageName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParentMenuCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RefId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserRightValue).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<VsApplMenu>(entity =>
            {
                entity.HasKey(e => e.MenuId);

                entity.Property(e => e.MenuId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AssemblyName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CheckPreLoadCondition)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.Executable)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ExecutionString)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.IconId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IconImg).HasColumnType("image");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MenuCode)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.MenuDesc)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MenuShortCut)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PageName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParentMenuCode)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.RefId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserRightValue).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<VsDitab>(entity =>
            {
                entity.ToTable("VsDITab");

                entity.Property(e => e.VsDitabId)
                    .HasColumnName("VsDITabId")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CheckId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ClientId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DbAction)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.DistList)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.IsReflected)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TabColName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TabKeyValue)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TabName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Vskeys>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK__VSKeys__1F198FD4");

                entity.ToTable("VSKeys");

                entity.Property(e => e.RecId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CodeDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Fixed)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LongDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TypeCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VslDailyScheduleCreation>(entity =>
            {
                entity.HasKey(e => e.DailyScheduleId);

                entity.ToTable("VSL_DailyScheduleCreation");

                entity.Property(e => e.DailyScheduleId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.CurrentStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted).HasMaxLength(1);

                entity.Property(e => e.LastSchTime).HasColumnType("datetime");

                entity.Property(e => e.Laststatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NextschTime).HasColumnType("datetime");

                entity.Property(e => e.SchedulerId)
                    .IsRequired()
                    .HasMaxLength(36);
            });

            modelBuilder.Entity<VslPaCalendarExceptions>(entity =>
            {
                entity.HasKey(e => e.CalendarExceptionId)
                    .HasName("PK__VSL_PA_CalendarE__5F7E2DAC");

                entity.ToTable("VSL_PA_CalendarExceptions");

                entity.Property(e => e.CalendarExceptionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CalendarEndDate).HasColumnType("datetime");

                entity.Property(e => e.CalendarId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.CalendarStartDate).HasColumnType("datetime");

                entity.Property(e => e.ClientId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ExceptionName).HasMaxLength(50);

                entity.Property(e => e.ExceptionTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsWorking)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ResourceDesc).HasMaxLength(50);

                entity.Property(e => e.ResourceId).HasMaxLength(36);

                entity.Property(e => e.ResourceType).HasMaxLength(50);

                entity.Property(e => e.TypeOfPeriod)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Xmlinfo)
                    .HasColumnName("XMLInfo")
                    .HasMaxLength(1000);
            });

            modelBuilder.Entity<VslPaCalendarMaster>(entity =>
            {
                entity.HasKey(e => e.CalendarId)
                    .HasName("PK__VSL_PA_CalendarM__59C55456");

                entity.ToTable("VSL_PA_CalendarMaster");

                entity.Property(e => e.CalendarId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CalendarName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ClientId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VslPaDayType>(entity =>
            {
                entity.HasKey(e => e.DayTypeId)
                    .HasName("PK__VSL_PA_DayType__57DD0BE4");

                entity.ToTable("VSL_PA_DayType");

                entity.Property(e => e.DayTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ClientId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DayTypedesc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VslPaExceptionTypes>(entity =>
            {
                entity.HasKey(e => e.ExceptionTypeId)
                    .HasName("PK__VSL_PA_Exception__5D95E53A");

                entity.ToTable("VSL_PA_ExceptionTypes");

                entity.Property(e => e.ExceptionTypeId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ClientId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ExceptionTypeDesc)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IsWorking)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VslPaResourceType>(entity =>
            {
                entity.HasKey(e => e.ResourceTypeId);

                entity.ToTable("VSL_PA_ResourceType");

                entity.Property(e => e.ResourceTypeId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.Remarks).HasMaxLength(1000);

                entity.Property(e => e.ResourceLevel).HasMaxLength(50);

                entity.Property(e => e.ResourceType).HasMaxLength(50);

                entity.Property(e => e.ResourceTypeDesc).HasMaxLength(100);
            });

            modelBuilder.Entity<VslPaStandardCalendarOptions>(entity =>
            {
                entity.HasKey(e => e.CalendarOptionId)
                    .HasName("PK__VSL_PA_StandardC__5BAD9CC8");

                entity.ToTable("VSL_PA_StandardCalendarOptions");

                entity.Property(e => e.CalendarOptionId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.CalendarId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ClientId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.DaysPerMonth)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultEndTime).HasColumnType("datetime");

                entity.Property(e => e.DefaultStartTime).HasColumnType("datetime");

                entity.Property(e => e.FiscalYearStartsIn)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HoursPerDay)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HoursPerWeek)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WeekStartsOn)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VslRptGridStyle>(entity =>
            {
                entity.HasKey(e => e.PkrptStyleId);

                entity.ToTable("VSL_RptGridStyle");

                entity.Property(e => e.PkrptStyleId)
                    .HasColumnName("PKRptStyleId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.FkuserMastId)
                    .HasColumnName("FKUserMastId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RptBgColor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RptFontName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RptFontSize)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RptForeColor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Rptcode)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VslRptScheduleXml>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("VSL_Rpt_ScheduleXml");

                entity.Property(e => e.RecId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsScheduled)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.RptBasicXml)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.RptName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<VslSchedulerInfo>(entity =>
            {
                entity.HasKey(e => e.SchedulerId);

                entity.ToTable("VSL_SchedulerInfo");

                entity.Property(e => e.SchedulerId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SchEndDate).HasColumnType("datetime");

                entity.Property(e => e.ScheduleDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleTime).HasColumnType("datetime");

                entity.Property(e => e.ScheduleXmlinfo)
                    .HasColumnName("ScheduleXMLInfo")
                    .IsUnicode(false);

                entity.Property(e => e.SchedulerTypeId)
                    .IsRequired()
                    .HasMaxLength(36);

                entity.Property(e => e.SourceId)
                    .IsRequired()
                    .HasMaxLength(36);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<VslSchedulerReportDefinitions>(entity =>
            {
                entity.HasKey(e => e.ScheduleId)
                    .HasName("PK_VSL_Schedular");

                entity.ToTable("VSL_SchedulerReportDefinitions");

                entity.Property(e => e.ScheduleId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RptName).HasMaxLength(50);

                entity.Property(e => e.RptXml).HasMaxLength(1000);

                entity.Property(e => e.ScheduleNo).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<VslSchedulerType>(entity =>
            {
                entity.HasKey(e => e.SchTypeId);

                entity.ToTable("VSL_SchedulerType");

                entity.Property(e => e.SchTypeId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.IsDeleted).HasMaxLength(1);

                entity.Property(e => e.Remarks)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SchTypeDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VslSourceType>(entity =>
            {
                entity.HasKey(e => e.SourceTypeId);

                entity.ToTable("VSL_SourceType");

                entity.Property(e => e.SourceTypeId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AssemblyName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Class)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.KeyValue)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<VslVcAttachmentMaster>(entity =>
            {
                entity.HasKey(e => e.AttachmentId)
                    .HasName("PK_ERP_AttachmentMaster")
                    .ForSqlServerIsClustered(false);

                entity.ToTable("VSL_VC_AttachmentMaster");

                entity.Property(e => e.AttachmentId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.FileContent).HasColumnType("image");

                entity.Property(e => e.FileName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FileType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MsgId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VslVcFtpcredentials>(entity =>
            {
                entity.HasKey(e => e.Ftpid);

                entity.ToTable("VSL_VC_FTPCredentials");

                entity.Property(e => e.Ftpid)
                    .HasColumnName("FTPId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ComponentKey).HasMaxLength(100);

                entity.Property(e => e.CreationLevel).HasMaxLength(50);

                entity.Property(e => e.EffectiveFromDt).HasColumnType("datetime");

                entity.Property(e => e.EffectiveToDt).HasColumnType("datetime");

                entity.Property(e => e.FtpuserId)
                    .HasColumnName("FTPUserId")
                    .HasMaxLength(100);

                entity.Property(e => e.FtpuserPwd)
                    .HasColumnName("FTPUserPwd")
                    .HasMaxLength(100);

                entity.Property(e => e.HostIp)
                    .HasColumnName("HostIP")
                    .HasMaxLength(50);

                entity.Property(e => e.HostName).HasMaxLength(50);

                entity.Property(e => e.IsauthTls).HasColumnName("ISAuthTls");

                entity.Property(e => e.Isssl).HasColumnName("ISSsl");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.SyncInfo).HasMaxLength(100);

                entity.Property(e => e.UserLevel).HasMaxLength(50);
            });

            modelBuilder.Entity<VslVcMailDataMaster>(entity =>
            {
                entity.HasKey(e => e.MessageId)
                    .HasName("PK_ERP_MailData")
                    .ForSqlServerIsClustered(false);

                entity.ToTable("VSL_VC_MailDataMaster");

                entity.Property(e => e.MessageId)
                    .HasColumnName("MessageID")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AccountType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.ExpiryTime).HasColumnType("datetime");

                entity.Property(e => e.MessageBcc)
                    .HasColumnName("MessageBCC")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.MessageBody).HasColumnType("image");

                entity.Property(e => e.MessageCc)
                    .HasColumnName("MessageCC")
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.MessageFrom)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MessageRemark)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.MessageSentAt).HasColumnType("datetime");

                entity.Property(e => e.MessageStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MessageSubject)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.MessageTo)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.MessageType)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VsnxtNos>(entity =>
            {
                entity.HasKey(e => e.DocName);

                entity.ToTable("VSNxtNos");

                entity.Property(e => e.DocName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.NextNos).HasColumnType("numeric(10, 0)");

                entity.Property(e => e.PrefixText)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RecCounter).HasColumnType("numeric(10, 0)");
            });

            modelBuilder.Entity<VwbDesignationMaster>(entity =>
            {
                entity.HasKey(e => e.DesignationId)
                    .HasName("PK_DesignationMaster");

                entity.ToTable("VWB_DesignationMaster");

                entity.Property(e => e.DesignationId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Designation).HasMaxLength(100);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwbEmpLeaveMaintenance>(entity =>
            {
                entity.HasKey(e => e.PkempLeaveId);

                entity.ToTable("VWB_EmpLeaveMaintenance");

                entity.Property(e => e.PkempLeaveId)
                    .HasColumnName("PKEmpLeaveId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Balance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Consumed).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Credit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FkuserMasterId)
                    .HasColumnName("FKUserMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.FkyearMasterId)
                    .HasColumnName("FKYearMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LeaveCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OpenBal).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<VwbPeriodMaster>(entity =>
            {
                entity.HasKey(e => e.PkperiodMasterId);

                entity.ToTable("VWB_PeriodMaster");

                entity.Property(e => e.PkperiodMasterId)
                    .HasColumnName("PKPeriodMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.FkyearId)
                    .HasColumnName("FKYearId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodLength).HasColumnType("numeric(5, 0)");

                entity.Property(e => e.PeriodSeq)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Predate)
                    .HasColumnName("PREDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Prsdate)
                    .HasColumnName("PRSDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Prtype)
                    .HasColumnName("PRType")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SecId)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwbUserMaster>(entity =>
            {
                entity.HasKey(e => e.UserMasterId)
                    .HasName("PK_UserMaster");

                entity.ToTable("VWB_UserMaster");

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActvDactvDt).HasColumnType("datetime");

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.AlternetWkOff)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((6))");

                entity.Property(e => e.AlternetWkOffVal)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Answer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Crmcategory)
                    .HasColumnName("CRMCategory")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Crmcode)
                    .HasColumnName("CRMCode")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CrmnoofDays).HasColumnName("CRMNoofDays");

                entity.Property(e => e.DeptMasterId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DesignationId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Dob)
                    .HasColumnName("DOB")
                    .HasColumnType("datetime");

                entity.Property(e => e.Doj)
                    .HasColumnName("DOJ")
                    .HasColumnType("datetime");

                entity.Property(e => e.EffectLeaveDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmpId)
                    .HasColumnName("EmpID")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ExtNo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FailedLoginAttempt).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Gender)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.HintQuestion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsCompleteRight)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsReportingUsingExcel)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsSysUser).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsuprofileExpire)
                    .HasColumnName("ISUProfileExpire")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.LastLoginDt).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LocationId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MobileActive).HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PswModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RegularWkoff)
                    .HasColumnName("RegularWKOff")
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ReportingTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UprofileExpDate)
                    .HasColumnName("UProfileExpDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.UserLoginId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserPassword)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwbYearMaster>(entity =>
            {
                entity.HasKey(e => e.PkyearId);

                entity.ToTable("VWB_YearMaster");

                entity.Property(e => e.PkyearId)
                    .HasColumnName("PKYearId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsPreviousYear)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WareHouseMaster>(entity =>
            {
                entity.Property(e => e.WareHouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.BackFlushing).HasDefaultValueSql("((0))");

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ConsigneeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPerson).HasMaxLength(300);

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CustVendorMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.Designation).HasMaxLength(250);

                entity.Property(e => e.DivisionId)
                    .HasColumnName("DivisionID")
                    .HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(200);

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FunctionArea).HasMaxLength(250);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsPlanning)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsReceived)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsShipping)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsSubcontract)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile).HasMaxLength(15);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.Phone).HasMaxLength(20);

                entity.Property(e => e.PinCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PlantId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StateMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Whaddress)
                    .HasColumnName("WHAddress")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Whcity)
                    .HasColumnName("WHCity")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Whcountry)
                    .HasColumnName("WHCountry")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WhmgrId)
                    .HasColumnName("WHMgrId")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.WhmgrMobile)
                    .HasColumnName("WHMgrMobile")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Whstate)
                    .HasColumnName("WHState")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WarehourseStockMgmt>(entity =>
            {
                entity.HasKey(e => e.WhstockMgmtId)
                    .HasName("PK__Warehour__32203709625930F1");

                entity.Property(e => e.WhstockMgmtId)
                    .HasColumnName("WHStockMgmtId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.MaximumStock).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.MinimumStock).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.RecorderLevel)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UserLevel)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WarrantyItems>(entity =>
            {
                entity.HasKey(e => e.PkwarrantyItemId)
                    .HasName("PKWarrantyItemId");

                entity.Property(e => e.PkwarrantyItemId)
                    .HasColumnName("PKWarrantyItemId")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId).HasMaxLength(36);

                entity.Property(e => e.ItemQty).HasMaxLength(100);

                entity.Property(e => e.ItemRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.RouteFrom).HasMaxLength(50);

                entity.Property(e => e.RouteTo).HasMaxLength(50);

                entity.Property(e => e.SalesDtlId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SerialNo).HasMaxLength(100);

                entity.Property(e => e.WarrantyRegisterId).HasMaxLength(36);
            });

            modelBuilder.Entity<WarrantyMaster>(entity =>
            {
                entity.Property(e => e.WarrantyMasterId)
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CreationLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IslicenseRequired)
                    .HasColumnName("ISLicenseRequired")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.MaterialCharge).HasColumnType("numeric(1, 0)");

                entity.Property(e => e.Modeofsupport)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.UserLevel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarrantyCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.WarrantyDesc).IsUnicode(false);

                entity.Property(e => e.WarrantyDisplaytill).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarrantyExpiresAfter).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<WarrantyRegisterMaster>(entity =>
            {
                entity.HasKey(e => e.PkwarrantyRegister)
                    .HasName("PK__Warranty__0BE0424C25B24A21");

                entity.Property(e => e.PkwarrantyRegister)
                    .HasColumnName("PKWarrantyRegister")
                    .HasMaxLength(36)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ApprovalDt).HasColumnType("datetime");

                entity.Property(e => e.ApprovedBy)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.BatchLot).HasMaxLength(50);

                entity.Property(e => e.Branch).IsUnicode(false);

                entity.Property(e => e.ChequeNo).HasMaxLength(50);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Fifo)
                    .HasColumnName("FIFO")
                    .HasColumnType("datetime");

                entity.Property(e => e.InstallDate).HasColumnType("datetime");

                entity.Property(e => e.IntimateCustomerEmailSms)
                    .HasColumnName("IntimateCustomerEmailSMS")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IntimateEmailSmsto)
                    .HasColumnName("IntimateEmailSMSTo")
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceDt).HasColumnType("datetime");

                entity.Property(e => e.InvoiceNo).HasMaxLength(50);

                entity.Property(e => e.IsApproved)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Ishosted)
                    .HasColumnName("ishosted")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPlantId).HasMaxLength(36);

                entity.Property(e => e.Mode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModeOfSupport)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OtherEnvWarrantyId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.OtherEnviroment)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.SalesHeaderId).HasMaxLength(36);

                entity.Property(e => e.ShipToId).HasMaxLength(36);

                entity.Property(e => e.ShipmentDt).HasColumnType("datetime");

                entity.Property(e => e.SignOfDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Url)
                    .HasColumnName("URL")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UsebyCustomer)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Version)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.WarrantyCode).HasMaxLength(50);

                entity.Property(e => e.WarrantyNo).HasMaxLength(36);

                entity.Property(e => e.WarrantyStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WidgetMaster>(entity =>
            {
                entity.HasKey(e => e.WidgetId);

                entity.Property(e => e.AddedBy).HasMaxLength(50);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ColorCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PageUrl)
                    .HasColumnName("PageURL")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TechnicalName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WidgetName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WidgetOfApplication)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WiplocationMaster>(entity =>
            {
                entity.ToTable("WIPLocationMaster");

                entity.Property(e => e.WiplocationMasterId)
                    .HasColumnName("WIPLocationMasterId")
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.LocationCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LocationName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.PlantMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WorkFlowStgActivity>(entity =>
            {
                entity.HasKey(e => e.WorkFlwStgActId);

                entity.Property(e => e.WorkFlwStgActId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.UnitId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WorkflowStageId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WorkerMaster>(entity =>
            {
                entity.Property(e => e.WorkerMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.WorkerCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.WorkerName)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WorkflowMaster>(entity =>
            {
                entity.HasKey(e => e.WorkflowId);

                entity.Property(e => e.WorkflowId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted).HasMaxLength(10);

                entity.Property(e => e.IsMainGroup)
                    .HasColumnName("isMainGroup")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsPrefix)
                    .HasColumnName("isPrefix")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsSubGroup)
                    .HasColumnName("isSubGroup")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IsWorkSpace)
                    .HasColumnName("isWorkSpace")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.WorkflowDescription).HasMaxLength(250);
            });

            modelBuilder.Entity<WorkflowStage>(entity =>
            {
                entity.Property(e => e.WorkflowStageId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.ActivityTypeId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.CompletionWithin).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.EstimatedHours).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.OffsetInDays).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.OffsetInHours).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.PrecedingStageId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SeqNo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UserMasterId)
                    .HasMaxLength(36)
                    .IsUnicode(false);

                entity.Property(e => e.WorkflowId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WorkflowStageDesc).HasMaxLength(250);
            });

            modelBuilder.Entity<YarnMaster>(entity =>
            {
                entity.HasKey(e => e.YarnCode);

                entity.Property(e => e.YarnCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.YarnDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZoneMaster>(entity =>
            {
                entity.Property(e => e.ZoneMasterId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AddedDt).HasColumnType("datetime");

                entity.Property(e => e.IsDeleted)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDt).HasColumnType("datetime");

                entity.Property(e => e.ZoneCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ZoneDesc)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });
        }
    }
}
